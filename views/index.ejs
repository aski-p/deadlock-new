<main class="main-container">
    <section class="hero-section">
        <h1 class="hero-title">박근형의 데드락은 데드락을 더 재밌게 플레이할 수 있게 해줍니다!</h1>
        <p class="hero-subtitle">점점 커지는 박근형의 데드락 커뮤니티에 합류해서 게임에 대해 더 배우고 실력을 키워보세요. 저희 컨텐츠는 최신 빌드 기반으로 계속 업데이트되고 있어요.</p>
        
        <% if (!user) { %>
        <div class="hero-cta">
            <a href="/auth/steam" class="cta-button">Steam으로 시작하기</a>
        </div>
        <% } else { %>
        <div class="hero-cta">
            <a href="/ko/leaderboards/europe" class="cta-button">리더보드 보기</a>
        </div>
        <% } %>
    </section>

    <section class="wiki-section">
        <div class="hero-image deadlock-logo">
            <img src="https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/apps/1422450/894b65503d8d59ca12dea83e1b24e271faf5fab5.jpg" alt="Deadlock Logo" class="deadlock-logo-img" onerror="this.src='https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/1422450/894b65503d8d59ca12dea83e1b24e271faf5fab5.jpg';">
        </div>
        <div class="wiki-content">
            <h2>데드락 위키는 스텟과 프로 컨텐츠로 운영됩니다</h2>
            <p>우리 <a href="/ko/wiki" class="wiki-link">위키백과</a>에서 게임, 영웅, 아이템 등에 대한 정보를 확인할 수 있어.</p>
        </div>
    </section>

    <section class="app-section">
        <h2>윈도우 앱</h2>
        <div class="app-features">
            <p>우리 인게임 앱은 데드락과 연동되어 플레이어, 영웅, 매치 정보에 따라 실시간 정보를 제공해.</p>
            <p>앱은 밸브 공식 API를 통해 게임과 통신하고 있지.</p>
        </div>
        <div class="app-partners">
            <span class="valve-logo">VALVE</span>
        </div>
        <div class="app-stats">
            <div class="stat-item">
                <span class="stat-icon">✅</span>
                <span>밸브 서비스 약관을 완벽히 준수함</span>
            </div>
        </div>
    </section>
    
    <% if (user) { %>
    <section class="user-dashboard">
        <div class="dashboard-container">
            <h2 class="section-title">안녕하세요, <%= user.username %>님!</h2>
            
            <div class="dashboard-grid">
                <div class="dashboard-card">
                    <h3>최근 게임</h3>
                    <div id="recent-games">
                        <p>최근 게임을 불러오는 중...</p>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <h3>통계 요약</h3>
                    <div id="stats-summary">
                        <p>통계를 불러오는 중...</p>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <h3>순위</h3>
                    <div id="rank-info">
                        <p>순위 정보를 불러오는 중...</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
    // Load user data if logged in
    async function loadUserData() {
        try {
            // Load recent games
            const recentResponse = await fetch('/api/player/<%= user.steamId %>/recent');
            const recentData = await recentResponse.json();
            
            // Load stats
            const statsResponse = await fetch('/api/player/<%= user.steamId %>/stats');
            const statsData = await statsResponse.json();
            
            // Update UI with data
            updateRecentGames(recentData);
            updateStats(statsData);
            
        } catch (error) {
            console.error('Error loading user data:', error);
        }
    }

    function updateRecentGames(data) {
        const container = document.getElementById('recent-games');
        if (data && data.response && data.response.games) {
            const games = data.response.games.slice(0, 3);
            container.innerHTML = games.map(game => 
                '<div class="recent-game">' +
                '<span class="game-name">' + game.name + '</span>' +
                '<span class="playtime">' + Math.round(game.playtime_2weeks / 60) + '시간</span>' +
                '</div>'
            ).join('');
        } else {
            container.innerHTML = '<p>최근 게임 데이터가 없습니다.</p>';
        }
    }

    function updateStats(data) {
        const container = document.getElementById('stats-summary');
        if (data && data.playerstats) {
            container.innerHTML = '<p>게임 통계가 업데이트되었습니다.</p>';
        } else {
            container.innerHTML = '<p>통계 데이터를 불러올 수 없습니다.</p>';
        }
    }

    // Load data when page loads
    document.addEventListener('DOMContentLoaded', loadUserData);
    </script>
    <% } %>
</main>