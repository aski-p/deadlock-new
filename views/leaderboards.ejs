<div class="leaderboards-section">
    <div class="leaderboards-container">
        <div class="leaderboards-header">
            <h1 class="page-title">리더보드 - <%= 
                region === 'europe' ? '유럽' : 
                region === 'asia' ? '아시아' : 
                region === 'north-america' ? '북미' :
                region === 'south-america' ? '남미' :
                region === 'oceania' ? '오세아니아' : '지역'
            %></h1>
            
            <div class="region-selector">
                <a href="/ko/leaderboards/europe" class="region-btn <%= region === 'europe' ? 'active' : '' %>">
                    유럽
                </a>
                <a href="/ko/leaderboards/asia" class="region-btn <%= region === 'asia' ? 'active' : '' %>">
                    아시아
                </a>
                <a href="/ko/leaderboards/north-america" class="region-btn <%= region === 'north-america' ? 'active' : '' %>">
                    북미
                </a>
                <a href="/ko/leaderboards/south-america" class="region-btn <%= region === 'south-america' ? 'active' : '' %>">
                    남미
                </a>
                <a href="/ko/leaderboards/oceania" class="region-btn <%= region === 'oceania' ? 'active' : '' %>">
                    오세아니아
                </a>
            </div>
        </div>

        <div class="filters-section">
            <div class="filter-group">
                <label for="hero-filter">영웅 필터:</label>
                <select id="hero-filter" class="filter-select">
                    <option value="all">모든 영웅</option>
                    <option value="abrams">Abrams</option>
                    <option value="bebop">Bebop</option>
                    <option value="dynamo">Dynamo</option>
                    <option value="grey-talon">Grey Talon</option>
                    <option value="haze">Haze</option>
                    <option value="infernus">Infernus</option>
                    <option value="ivy">Ivy</option>
                    <option value="kelvin">Kelvin</option>
                    <option value="lady-geist">Lady Geist</option>
                    <option value="lash">Lash</option>
                    <option value="mcginnis">McGinnis</option>
                    <option value="mo-krill">Mo & Krill</option>
                    <option value="paradox">Paradox</option>
                    <option value="pocket">Pocket</option>
                    <option value="seven">Seven</option>
                    <option value="shiv">Shiv</option>
                    <option value="vindicta">Vindicta</option>
                    <option value="viscous">Viscous</option>
                    <option value="warden">Warden</option>
                    <option value="wraith">Wraith</option>
                    <option value="yamato">Yamato</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="medal-filter">메달 필터:</label>
                <select id="medal-filter" class="filter-select">
                    <option value="all">모든 메달</option>
                    <option value="eternus">Eternus</option>
                    <option value="phantom">Phantom</option>
                    <option value="oracle">Oracle</option>
                    <option value="ritualist">Ritualist</option>
                    <option value="alchemist">Alchemist</option>
                    <option value="arcanist">Arcanist</option>
                    <option value="initiate">Initiate</option>
                </select>
            </div>
        </div>

        <div class="leaderboard-table-container">
            <div class="table-loading" id="table-loading">
                <div class="loading-spinner"></div>
                <p>리더보드 데이터를 불러오는 중...</p>
            </div>
            
            <table class="leaderboard-table" id="leaderboard-table" style="display: none;">
                <thead>
                    <tr>
                        <th class="rank-column">순위</th>
                        <th class="player-column">플레이어</th>
                        <th class="country-column">국가</th>
                        <th class="heroes-column">영웅</th>
                        <th class="medal-column">메달</th>
                        <th class="score-column">점수</th>
                    </tr>
                </thead>
                <tbody id="leaderboard-tbody">
                </tbody>
            </table>
            
            <div class="pagination" id="pagination" style="display: none;">
                <button class="pagination-btn" id="prev-btn" disabled>이전</button>
                <span class="pagination-info" id="pagination-info">1 / 10</span>
                <button class="pagination-btn" id="next-btn">다음</button>
            </div>
        </div>
    </div>
</div>

<script>
let currentPage = 1;
let totalPages = 20;
let currentFilters = {
    region: '<%= region %>',
    hero: 'all',
    medal: 'all'
};

async function loadLeaderboardData() {
    const loading = document.getElementById('table-loading');
    const table = document.getElementById('leaderboard-table');
    
    loading.style.display = 'flex';
    table.style.display = 'none';
    
    try {
        const params = new URLSearchParams({
            page: currentPage,
            limit: 50,
            hero: currentFilters.hero,
            medal: currentFilters.medal
        });
        
        const response = await fetch(`/api/v1/leaderboards/${currentFilters.region}?${params}`);
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        updateLeaderboardTable(data.data);
        updatePaginationInfo(data.pagination);
        loading.style.display = 'none';
        table.style.display = 'table';
        
    } catch (error) {
        console.error('Failed to load leaderboard data:', error);
        loading.innerHTML = '<p style="color: #ff6b6b;">리더보드 데이터를 불러오는데 실패했습니다.</p>';
    }
}

function updateLeaderboardTable(data) {
    const tbody = document.getElementById('leaderboard-tbody');
    
    // 메달 이미지 매핑 - 간단한 색상 배지로 대체
    const getMedalImage = (medal, subrank) => {
        const medalColors = {
            'eternus': '#FFD700',    // 금색
            'phantom': '#8A2BE2',    // 보라색
            'oracle': '#00CED1',     // 청록색
            'ritualist': '#32CD32',  // 녹색
            'alchemist': '#FF8C00',  // 주황색
            'arcanist': '#FF1493',   // 분홍색
            'initiate': '#808080'    // 회색
        };
        
        const color = medalColors[medal.toLowerCase()] || '#808080';
        const medalText = medal.charAt(0).toUpperCase() + subrank;
        
        return `data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40"><circle cx="20" cy="20" r="18" fill="${color}" stroke="%23fff" stroke-width="2"/><text x="20" y="26" text-anchor="middle" font-size="12" font-weight="bold" fill="%23fff">${medalText}</text></svg>`;
    };

    // 영웅 이미지 매핑 - 간단한 색상 아이콘으로 대체
    const getHeroImage = (heroName) => {
        const heroColors = {
            'Abrams': '#FF6B47',     // 주황색
            'Bebop': '#4CAF50',      // 녹색
            'Dynamo': '#2196F3',     // 파란색
            'Grey Talon': '#9E9E9E', // 회색
            'Haze': '#9C27B0',       // 보라색
            'Infernus': '#F44336',   // 빨간색
            'Ivy': '#4CAF50',        // 녹색
            'Kelvin': '#00BCD4',     // 청록색
            'Lady Geist': '#795548', // 갈색
            'Lash': '#FF9800',       // 주황색
            'McGinnis': '#607D8B',   // 청회색
            'Mo & Krill': '#8BC34A', // 연녹색
            'Paradox': '#673AB7',    // 담보라
            'Pocket': '#FFC107',     // 황색
            'Seven': '#3F51B5',      // 남색
            'Shiv': '#E91E63',       // 분홍색
            'Vindicta': '#9C27B0',   // 보라색
            'Viscous': '#00E676',    // 녹색
            'Warden': '#795548',     // 갈색
            'Wraith': '#424242',     // 진회색
            'Yamato': '#F44336',     // 빨간색
            'Mirage': '#00BCD4',     // 청록색
            'Calico': '#FF5722',     // 주황색
            'Holliday': '#4CAF50'    // 녹색
        };
        
        const color = heroColors[heroName] || '#9E9E9E';
        const initials = heroName.split(' ').map(word => word.charAt(0)).join('').substring(0, 2);
        
        return `data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><rect width="32" height="32" fill="${color}" rx="4"/><text x="16" y="20" text-anchor="middle" font-size="10" font-weight="bold" fill="%23fff">${initials}</text></svg>`;
    };
    
    tbody.innerHTML = data.map(player => 
        '<tr class="leaderboard-row">' +
        '<td class="rank-cell">' +
            '<span class="rank-number">' + player.rank + '</span>' +
        '</td>' +
        '<td class="player-cell">' +
            '<div class="player-info">' +
                '<img src="' + player.player.avatar + '" alt="' + player.player.name + '" class="player-avatar" onerror="this.src=\'data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><circle cx=\"20\" cy=\"20\" r=\"18\" fill=\"%23666\" stroke=\"%23fff\" stroke-width=\"2\"/><text x=\"20\" y=\"26\" text-anchor=\"middle\" font-size=\"20\" fill=\"%23fff\">👤</text></svg>\'">' +
                '<span class="player-name">' + player.player.name + '</span>' +
            '</div>' +
        '</td>' +
        '<td class="country-cell">' +
            '<span class="country-flag">' + player.player.country + '</span>' +
        '</td>' +
        '<td class="heroes-cell">' +
            '<div class="heroes-list">' +
                player.heroes.map(hero => 
                    '<div class="hero-item">' +
                        '<img src="' + getHeroImage(hero) + '" alt="' + hero + '" class="hero-image" title="' + hero + '" onerror="this.src=\'https://deadlock.gg/_next/image?url=https%3A%2F%2Fcdn.deadlock.gg%2Fheroes%2Fabrams.webp&w=64&q=75\'">' +
                    '</div>'
                ).join('') +
            '</div>' +
        '</td>' +
        '<td class="medal-cell">' +
            '<div class="medal-badge">' +
                '<img src="' + getMedalImage(player.medal, player.subrank) + '" alt="' + player.medal + ' ' + player.subrank + '" class="medal-image" title="' + player.medal + ' ' + player.subrank + '">' +
            '</div>' +
        '</td>' +
        '<td class="score-cell">' +
            '<span class="score-number">' + player.score.toLocaleString() + '</span>' +
        '</td>' +
        '</tr>'
    ).join('');
}

function updatePaginationInfo(pagination) {
    const paginationInfo = document.getElementById('pagination-info');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const paginationDiv = document.getElementById('pagination');
    
    // 모든 지역에서 실제 API 사용하므로 페이징 숨기기
    paginationDiv.style.display = 'none';
    return;
    
    totalPages = pagination.total_pages;
    currentPage = pagination.current_page;
    
    paginationInfo.textContent = currentPage + ' / ' + totalPages;
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages;
}

// Event listeners
document.getElementById('hero-filter').addEventListener('change', (e) => {
    currentFilters.hero = e.target.value;
    currentPage = 1;
    loadLeaderboardData();
});

document.getElementById('medal-filter').addEventListener('change', (e) => {
    currentFilters.medal = e.target.value;
    currentPage = 1;
    loadLeaderboardData();
});

document.getElementById('prev-btn').addEventListener('click', () => {
    if (currentPage > 1) {
        currentPage--;
        loadLeaderboardData();
    }
});

document.getElementById('next-btn').addEventListener('click', () => {
    if (currentPage < totalPages) {
        currentPage++;
        loadLeaderboardData();
    }
});

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    loadLeaderboardData();
});
</script>