<div class="my-profile-section">
    <div class="my-profile-container">
        <!-- Profile Header -->
        <div class="profile-header">
            <div class="profile-welcome">
                <h1 class="welcome-title">안녕하세요, <%= user.username %>님! 👋</h1>
                <p class="welcome-subtitle">데드락에서의 여러분의 활약을 확인해보세요!</p>
            </div>
            <div class="steam-info">
                <img src="<%= user.avatar %>" alt="<%= user.username %>" class="profile-steam-avatar">
                <div class="steam-details">
                    <h3>Steam 계정</h3>
                    <p>Steam ID: <%= user.steamId %></p>
                    <p>Account ID: <%= accountId %></p>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <a href="/ko/players/<%= accountId %>" class="action-btn primary">
                📊 상세 통계 보기
            </a>
            <a href="/ko/leaderboards/asia" class="action-btn secondary">
                🏆 리더보드 확인
            </a>
            <a href="<%= user.profileUrl || '#' %>" target="_blank" class="action-btn secondary">
                🎮 Steam 프로필
            </a>
        </div>

        <!-- Loading State -->
        <div class="profile-loading" id="profile-loading">
            <div class="loading-spinner"></div>
            <p>데드락 통계를 불러오는 중...</p>
        </div>

        <!-- Profile Content -->
        <div class="profile-content" id="profile-content" style="display: none;">
            <!-- Rank Overview -->
            <div class="rank-overview">
                <h2 class="section-title">🏅 현재 랭크</h2>
                <div class="rank-display">
                    <img class="my-rank-medal" id="my-rank-medal" alt="Rank Medal">
                    <div class="rank-details">
                        <h3 id="my-rank-name">Oracle 3</h3>
                        <p id="my-rank-score">3,500 점</p>
                        <div class="rank-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" id="rank-progress"></div>
                            </div>
                            <span class="progress-text" id="progress-text">다음 랭크까지</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Statistics Grid -->
            <div class="stats-overview">
                <h2 class="section-title">📈 통계 개요</h2>
                <div class="stats-grid">
                    <div class="stat-card highlight">
                        <div class="stat-icon">🎯</div>
                        <div class="stat-content">
                            <div class="stat-value" id="my-winrate">0%</div>
                            <div class="stat-label">전체 승률</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">⚔️</div>
                        <div class="stat-content">
                            <div class="stat-value" id="my-matches">0</div>
                            <div class="stat-label">총 게임 수</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">🎪</div>
                        <div class="stat-content">
                            <div class="stat-value" id="my-kda">0.0</div>
                            <div class="stat-label">평균 KDA</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">💀</div>
                        <div class="stat-content">
                            <div class="stat-value" id="my-headshots">0%</div>
                            <div class="stat-label">헤드샷 정확도</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">👑</div>
                        <div class="stat-content">
                            <div class="stat-value" id="my-lane-winrate">0%</div>
                            <div class="stat-label">라인 승률</div>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">💎</div>
                        <div class="stat-content">
                            <div class="stat-value" id="my-souls">0</div>
                            <div class="stat-label">소울/분</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Favorite Heroes -->
            <div class="favorite-heroes">
                <h2 class="section-title">🦸‍♂️ 자주 플레이하는 영웅</h2>
                <div class="heroes-showcase" id="heroes-showcase">
                    <!-- Heroes will be populated by JavaScript -->
                </div>
            </div>

            <!-- Recent Performance -->
            <div class="recent-performance">
                <h2 class="section-title">📊 최근 활동</h2>
                <div class="performance-summary">
                    <div class="performance-card wins">
                        <h3>최근 10게임</h3>
                        <div class="win-loss-indicator" id="recent-winloss">
                            <!-- Win/Loss indicators will be populated -->
                        </div>
                    </div>
                    <div class="performance-card trending">
                        <h3>성능 트렌드</h3>
                        <div class="trend-indicator" id="performance-trend">
                            <span class="trend-arrow">📈</span>
                            <span class="trend-text">상승세!</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Call to Action -->
            <div class="profile-cta">
                <h2>더 자세한 정보가 궁금하신가요?</h2>
                <p>상세 통계 페이지에서 매치 기록, 영웅별 승률, 성과 등을 확인해보세요!</p>
                <a href="/ko/players/<%= accountId %>" class="cta-button-large">
                    📊 전체 통계 보러가기
                </a>
            </div>
        </div>

        <!-- Error State -->
        <div class="profile-error" id="profile-error" style="display: none;">
            <h2>⚠️ 데이터를 불러올 수 없습니다</h2>
            <p>데드락 통계를 가져오는 중 문제가 발생했습니다.</p>
            <p id="error-message" style="color: #EF4444; font-size: 14px; margin-top: 10px;"></p>
            <div style="margin-top: 20px;">
                <button onclick="loadMyProfileData()" class="retry-btn">다시 시도</button>
                <a href="/ko/leaderboards/asia" class="back-button" style="margin-left: 15px;">리더보드 보기</a>
            </div>
        </div>
    </div>
</div>

<style>
/* My Profile Styles */
.my-profile-section {
    padding: 120px 0 60px;
    min-height: 100vh;
    background: #000000;
}

.my-profile-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 40px;
}

.profile-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(135deg, rgba(88, 101, 242, 0.1) 0%, rgba(0, 0, 0, 0) 100%);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(88, 101, 242, 0.2);
}

.profile-welcome {
    flex: 1;
}

.welcome-title {
    font-size: 42px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0 0 15px 0;
    background: linear-gradient(135deg, #FFEFD7 0%, #63a2e2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.welcome-subtitle {
    font-size: 18px;
    color: #999;
    margin: 0;
    line-height: 1.6;
}

.steam-info {
    display: flex;
    align-items: center;
    gap: 20px;
    background: rgba(255, 255, 255, 0.05);
    padding: 30px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.profile-steam-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    border: 3px solid #63a2e2;
    box-shadow: 0 4px 20px rgba(99, 162, 226, 0.3);
}

.steam-details h3 {
    color: #FFEFD7;
    font-size: 18px;
    margin: 0 0 10px 0;
}

.steam-details p {
    color: #999;
    font-size: 14px;
    margin: 5px 0;
    font-family: monospace;
}

.quick-actions {
    display: flex;
    gap: 20px;
    margin-bottom: 40px;
    flex-wrap: wrap;
}

.action-btn {
    padding: 15px 25px;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 600;
    font-size: 16px;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    gap: 8px;
}

.action-btn.primary {
    background: #5865F2;
    color: white;
    border: 2px solid #5865F2;
}

.action-btn.primary:hover {
    background: #4752C4;
    border-color: #4752C4;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(88, 101, 242, 0.4);
}

.action-btn.secondary {
    background: rgba(255, 255, 255, 0.1);
    color: #FFEFD7;
    border: 2px solid rgba(255, 255, 255, 0.2);
}

.action-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
    transform: translateY(-2px);
}

.profile-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 100px 20px;
    color: #FFEFD7;
}

.profile-content {
    color: #FFEFD7;
}

.section-title {
    font-size: 24px;
    font-weight: 600;
    color: #FFEFD7;
    margin-bottom: 25px;
    border-bottom: 2px solid #63a2e2;
    padding-bottom: 10px;
}

.rank-overview {
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.rank-display {
    display: flex;
    align-items: center;
    gap: 30px;
}

.my-rank-medal {
    width: 100px;
    height: 100px;
}

.rank-details h3 {
    font-size: 32px;
    color: #63a2e2;
    margin: 0 0 10px 0;
}

.rank-details p {
    font-size: 18px;
    color: #FFEFD7;
    margin: 0 0 20px 0;
}

.rank-progress {
    width: 300px;
}

.progress-bar {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 8px;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #63a2e2, #5865F2);
    border-radius: 4px;
    transition: width 0.3s;
    width: 60%;
}

.progress-text {
    font-size: 14px;
    color: #999;
}

.stats-overview {
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
}

.stat-card {
    background: rgba(255, 255, 255, 0.03);
    padding: 25px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
    display: flex;
    align-items: center;
    gap: 15px;
}

.stat-card:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateY(-2px);
}

.stat-card.highlight {
    background: linear-gradient(135deg, rgba(88, 101, 242, 0.2) 0%, rgba(99, 162, 226, 0.1) 100%);
    border-color: #5865F2;
}

.stat-icon {
    font-size: 32px;
    filter: grayscale(30%);
}

.stat-content .stat-value {
    font-size: 28px;
    font-weight: 700;
    color: #63a2e2;
    margin-bottom: 5px;
}

.stat-content .stat-label {
    font-size: 14px;
    color: #999;
}

.favorite-heroes, .recent-performance {
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.heroes-showcase {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
}

.hero-showcase-card {
    background: rgba(255, 255, 255, 0.03);
    padding: 20px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
    display: flex;
    align-items: center;
    gap: 15px;
}

.hero-showcase-card:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateY(-2px);
}

.hero-showcase-image {
    width: 60px;
    height: 60px;
    border-radius: 8px;
}

.hero-showcase-info h3 {
    color: #FFEFD7;
    font-size: 18px;
    margin: 0 0 8px 0;
}

.hero-showcase-stats {
    color: #999;
    font-size: 14px;
}

.performance-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 30px;
}

.performance-card {
    background: rgba(255, 255, 255, 0.03);
    padding: 30px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.performance-card h3 {
    color: #FFEFD7;
    font-size: 18px;
    margin: 0 0 20px 0;
}

.win-loss-indicator {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
}

.match-result {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
}

.match-result.win {
    background: #10B981;
    color: white;
}

.match-result.loss {
    background: #EF4444;
    color: white;
}

.trend-indicator {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 18px;
}

.trend-arrow {
    font-size: 24px;
}

.trend-text {
    color: #10B981;
    font-weight: 600;
}

.profile-cta {
    text-align: center;
    background: linear-gradient(135deg, rgba(88, 101, 242, 0.1) 0%, rgba(0, 0, 0, 0) 100%);
    padding: 60px 40px;
    border-radius: 16px;
    border: 1px solid rgba(88, 101, 242, 0.2);
}

.profile-cta h2 {
    font-size: 32px;
    color: #FFEFD7;
    margin: 0 0 15px 0;
}

.profile-cta p {
    font-size: 18px;
    color: #999;
    margin: 0 0 30px 0;
    line-height: 1.6;
}

.cta-button-large {
    display: inline-block;
    background: #5865F2;
    color: white;
    padding: 20px 40px;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 700;
    font-size: 18px;
    transition: all 0.3s;
    box-shadow: 0 4px 20px rgba(88, 101, 242, 0.3);
}

.cta-button-large:hover {
    background: #4752C4;
    transform: translateY(-3px);
    box-shadow: 0 6px 30px rgba(88, 101, 242, 0.4);
    color: white;
}

.profile-error {
    text-align: center;
    padding: 100px 20px;
    color: #FFEFD7;
}

.profile-error h2 {
    font-size: 32px;
    margin-bottom: 20px;
    color: #EF4444;
}

.retry-btn {
    background: #63a2e2;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    margin-top: 20px;
    cursor: pointer;
    transition: all 0.3s;
}

.retry-btn:hover {
    background: #4f8bc9;
    transform: translateY(-2px);
}

/* Responsive */
@media (max-width: 768px) {
    .my-profile-container {
        padding: 0 20px;
    }
    
    .profile-header {
        flex-direction: column;
        gap: 30px;
        text-align: center;
    }
    
    .welcome-title {
        font-size: 32px;
    }
    
    .quick-actions {
        justify-content: center;
    }
    
    .rank-display {
        flex-direction: column;
        text-align: center;
    }
    
    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }
    
    .heroes-showcase {
        grid-template-columns: 1fr;
    }
    
    .performance-summary {
        grid-template-columns: 1fr;
    }
}
</style>

<script>
async function loadMyProfileData() {
    const loading = document.getElementById('profile-loading');
    const content = document.getElementById('profile-content');
    const error = document.getElementById('profile-error');
    
    loading.style.display = 'flex';
    content.style.display = 'none';
    error.style.display = 'none';
    
    try {
        const response = await fetch(`/api/v1/players/<%= accountId %>`);
        const data = await response.json();
        
        if (response.ok) {
            updateMyProfileUI(data);
            loading.style.display = 'none';
            content.style.display = 'block';
        } else {
            throw new Error(data.error || 'Failed to load profile');
        }
        
    } catch (err) {
        console.error('Failed to load profile data:', err);
        loading.style.display = 'none';
        error.style.display = 'block';
        
        // 에러 메시지 표시
        const errorMessageEl = document.getElementById('error-message');
        if (errorMessageEl) {
            errorMessageEl.textContent = `오류 상세: ${err.message || '알 수 없는 오류'}`;
        }
    }
}

function updateMyProfileUI(player) {
    // Rank Information
    const getMedalImage = (medal, subrank) => {
        const medalRankMap = {
            'Eternus': 11, 'Phantom': 10, 'Oracle': 9, 'Ritualist': 8,
            'Alchemist': 7, 'Arcanist': 6, 'Initiate': 5
        };
        const rankNumber = medalRankMap[medal] || 6; // 기본값을 Arcanist로
        return `https://cdn.deadlock.coach/vpk/panorama/images/ranked/badges/rank${rankNumber}/badge_sm_subrank${subrank}.webp`;
    };
    
    // 랭크 정보가 없는 경우 기본값 처리
    const medal = player.rank?.medal || 'Arcanist';
    const subrank = player.rank?.subrank || 1;
    const score = player.rank?.score || 2500;
    
    document.getElementById('my-rank-medal').src = getMedalImage(medal, subrank);
    document.getElementById('my-rank-name').textContent = `${medal} ${subrank}`;
    document.getElementById('my-rank-score').textContent = `${score.toLocaleString()} 점`;
    
    // 리더보드 순위가 있는 경우 추가 정보 표시
    if (player.leaderboardRank) {
        document.getElementById('progress-text').textContent = `리더보드 ${player.leaderboardRank}위`;
    } else {
        document.getElementById('progress-text').textContent = '리더보드 랭킹 없음';
    }
    
    // Statistics
    document.getElementById('my-winrate').textContent = `${player.stats.winRate}%`;
    document.getElementById('my-matches').textContent = player.stats.matches;
    document.getElementById('my-kda').textContent = player.stats.kda;
    document.getElementById('my-headshots').textContent = `${player.stats.headshotPercent}%`;
    document.getElementById('my-lane-winrate').textContent = `${player.stats.laneWinRate}%`;
    document.getElementById('my-souls').textContent = player.stats.soulsPerMin.toLocaleString();
    
    // Heroes
    updateHeroesShowcase(player.heroes);
    
    // Recent matches (simplified for overview)
    updateRecentPerformance(player.recentMatches);
}

function updateHeroesShowcase(heroes) {
    const showcase = document.getElementById('heroes-showcase');
    
    const getHeroImage = (heroName) => {
        const heroImageMap = {
            'Abrams': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bull_card.webp',
            'Bebop': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bebop_card.webp',
            'Dynamo': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/dynamo_card.webp',
            'Haze': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/haze_card.webp',
            'Infernus': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/inferno_card.webp',
            'Ivy': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/ivy_card.webp'
        };
        return heroImageMap[heroName] || 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bull_card.webp';
    };
    
    showcase.innerHTML = heroes.map(hero => `
        <div class="hero-showcase-card">
            <img src="${getHeroImage(hero.name)}" alt="${hero.name}" class="hero-showcase-image">
            <div class="hero-showcase-info">
                <h3>${hero.name}</h3>
                <div class="hero-showcase-stats">
                    ${hero.matches}게임 플레이<br>
                    ${hero.winRate}% 승률
                </div>
            </div>
        </div>
    `).join('');
}

function updateRecentPerformance(matches) {
    const indicator = document.getElementById('recent-winloss');
    
    // Show last 10 matches
    const recentMatches = matches.slice(0, 10);
    indicator.innerHTML = recentMatches.map(match => `
        <div class="match-result ${match.result === '승리' ? 'win' : 'loss'}">
            ${match.result === '승리' ? 'W' : 'L'}
        </div>
    `).join('');
    
    // Calculate win rate for recent matches
    const wins = recentMatches.filter(m => m.result === '승리').length;
    const winRate = Math.round((wins / recentMatches.length) * 100);
    
    // Update trend indicator
    const trendElement = document.getElementById('performance-trend');
    if (winRate >= 60) {
        trendElement.innerHTML = '<span class="trend-arrow">📈</span><span class="trend-text" style="color: #10B981;">상승세!</span>';
    } else if (winRate >= 40) {
        trendElement.innerHTML = '<span class="trend-arrow">➡️</span><span class="trend-text" style="color: #F59E0B;">안정세</span>';
    } else {
        trendElement.innerHTML = '<span class="trend-arrow">📉</span><span class="trend-text" style="color: #EF4444;">하락세</span>';
    }
}

// Load data when page loads
document.addEventListener('DOMContentLoaded', loadMyProfileData);
</script>