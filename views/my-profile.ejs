<div class="player-detail-section">
    <div class="player-detail-container">
        <!-- Welcome Message -->
        <div class="welcome-message">
            <h1>안녕하세요, <%= user.username %>님! 👋</h1>
            <p>데드락에서의 여러분의 활약을 확인해보세요!</p>
            <div class="quick-actions">
                <a href="/ko/leaderboards/asia" class="action-btn secondary">🏆 리더보드</a>
                <a href="<%= user.profileUrl || '#' %>" target="_blank" class="action-btn secondary">🎮 Steam</a>
            </div>
        </div>

        <!-- Loading State -->
        <div class="table-loading" id="player-loading">
            <div class="loading-spinner"></div>
            <p>플레이어 정보를 불러오는 중...</p>
        </div>

        <!-- Player Content -->
        <div class="player-content" id="player-content" style="display: none;">
            <!-- Player Header -->
            <div class="player-header">
                <div class="player-basic-info">
                    <img class="player-detail-avatar" id="player-avatar" alt="Player Avatar">
                    <div class="player-main-info">
                        <h1 class="player-name" id="player-name">플레이어</h1>
                        <div class="player-meta">
                            <span class="player-country" id="player-country">🌍</span>
                            <span class="player-account-id">계정 ID: <%= accountId %></span>
                            <% if (user && user.steamId) { %>
                            <span class="player-steam-id">Steam ID: <%= user.steamId %></span>
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="player-rank">
                    <div class="rank-badge">
                        <img class="rank-medal" id="rank-medal" alt="Rank Medal">
                        <div class="rank-info">
                            <span class="rank-name" id="rank-name">랭크 정보 없음</span>
                            <span class="rank-score" id="rank-score">-</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Player Stats -->
            <div class="player-stats">
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value" id="stat-matches">0</div>
                        <div class="stat-label">매치</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-winrate">0%</div>
                        <div class="stat-label">승률</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-lane-winrate">0%</div>
                        <div class="stat-label">라인 승률</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-kda">0.0</div>
                        <div class="stat-label">KDA</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-souls">0</div>
                        <div class="stat-label">소울/분</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-denies">0</div>
                        <div class="stat-label">디나이</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-endorsements">0</div>
                        <div class="stat-label">추천수</div>
                    </div>
                </div>
            </div>

            <!-- Heroes Section (전체 게임 기반) -->
            <div class="player-section">
                <h2 class="section-title">플레이한 영웅 (전체 게임)</h2>
                <p class="section-note">
                    <i class="fas fa-info-circle"></i>
                    영웅 통계는 외부 API 데이터를 기반으로 하며, 실제 게임 내 데이터와 약간의 차이가 있을 수 있습니다. 
                    데이터는 주기적으로 업데이트됩니다.
                </p>
                <div class="heroes-grid" id="heroes-grid">
                    <!-- Heroes will be populated by JavaScript -->
                </div>
            </div>

            <!-- Recent Matches - deadlock-api.com 스타일 -->
            <div class="player-section">
                <h2 class="section-title">최근 매치</h2>
                <div class="deadlock-matches-container" id="matches-list">
                    <!-- Matches will be populated by JavaScript -->
                </div>
            </div>

            <!-- MMR Graph -->
            <div class="player-section">
                <h2 class="section-title">MMR 히스토리</h2>
                <div class="mmr-graph-container" id="mmr-graph-container">
                    <canvas id="mmr-chart" width="800" height="400"></canvas>
                </div>
            </div>

            <!-- Party Stats -->
            <div class="player-section">
                <h2 class="section-title">파티 통계 (함께 플레이한 팀원)</h2>
                <div class="party-stats-list" id="party-stats-list">
                    <!-- Party stats will be populated by JavaScript -->
                </div>
            </div>
        </div>

        <!-- Error State -->
        <div class="profile-error" id="profile-error" style="display: none;">
            <h2>⚠️ 데이터를 불러올 수 없습니다</h2>
            <p>데드락 통계를 가져오는 중 문제가 발생했습니다.</p>
            <p id="error-message" style="color: #EF4444; font-size: 14px; margin-top: 10px;"></p>
            <div style="margin-top: 20px;">
                <button onclick="loadMyProfileData()" class="retry-btn">다시 시도</button>
                <a href="/ko/leaderboards/asia" class="back-button" style="margin-left: 15px;">리더보드 보기</a>
            </div>
        </div>
    </div>
</div>

<style>
/* deadlock-api.com 정확한 매치 카드 스타일 */
.deadlock-matches-container {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.deadlock-match-card {
    background: rgba(15, 23, 42, 0.6);
    border: 1px solid rgba(71, 85, 105, 0.3);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.2s ease;
}

.deadlock-match-card:hover {
    border-color: rgba(71, 85, 105, 0.5);
    background: rgba(15, 23, 42, 0.8);
}

/* 매치 카드 헤더 */
.deadlock-match-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 24px 12px;
    background: rgba(15, 23, 42, 0.4);
    border-bottom: 1px solid rgba(71, 85, 105, 0.2);
}

.match-outcome-section {
    display: flex;
    align-items: center;
    gap: 12px;
}

.match-result-badge {
    padding: 4px 12px;
    border-radius: 6px;
    font-weight: 600;
    font-size: 14px;
    text-transform: uppercase;
}

.match-result-badge.win {
    background: rgba(34, 197, 94, 0.15);
    color: #22c55e;
    border: 1px solid rgba(34, 197, 94, 0.3);
}

.match-result-badge.loss {
    background: rgba(239, 68, 68, 0.15);
    color: #ef4444;
    border: 1px solid rgba(239, 68, 68, 0.3);
}

.match-meta-info {
    display: flex;
    align-items: center;
    gap: 16px;
    font-size: 14px;
    color: #94a3b8;
}

.match-duration-rank {
    display: flex;
    align-items: center;
    gap: 12px;
}

.match-rank-img {
    width: 24px;
    height: 24px;
    border-radius: 4px;
}

/* 매치 카드 메인 콘텐츠 */
.deadlock-match-content {
    padding: 16px 24px;
}

.match-main-section {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 16px;
}

.match-hero-section {
    display: flex;
    align-items: center;
    gap: 16px;
}

.match-hero-img {
    width: 48px;
    height: 48px;
    border-radius: 8px;
    object-fit: cover;
}

.match-stats-section {
    text-align: right;
}

.match-kda {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
    justify-content: flex-end;
}

.kda-numbers {
    font-size: 18px;
    font-weight: 600;
    color: #f8fafc;
}

.kda-ratio {
    color: #22c55e;
    font-weight: 600;
}

.match-performance {
    display: flex;
    gap: 16px;
    justify-content: flex-end;
    font-size: 13px;
    color: #94a3b8;
}

/* 아이템 그리드 */
.match-items-section {
    margin-bottom: 16px;
}

.deadlock-items-grid {
    display: grid;
    grid-template-columns: repeat(6, 32px);
    gap: 8px;
    width: fit-content;
}

.deadlock-item-slot {
    width: 32px;
    height: 32px;
    border-radius: 6px;
    border: 1px solid rgba(71, 85, 105, 0.3);
    background: rgba(15, 23, 42, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
}

.deadlock-item-img {
    width: 28px;
    height: 28px;
    border-radius: 4px;
}

/* 플레이어 목록 */
.match-players-section {
    background: rgba(15, 23, 42, 0.4);
    border-radius: 8px;
    padding: 16px;
}

.deadlock-players-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px 32px;
}

.deadlock-player-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 4px 0;
}

.deadlock-player-hero {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    border: 1px solid rgba(71, 85, 105, 0.3);
}

.deadlock-player-name {
    font-size: 13px;
    color: #e2e8f0;
    cursor: pointer;
    transition: color 0.2s;
    max-width: 120px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.deadlock-player-name:hover {
    color: #22c55e;
}

.match-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    font-size: 14px;
}

.match-body {
    display: flex;
    gap: 24px;
    align-items: flex-start;
}

/* 새로운 매치 카드 레이아웃 */
.match-content-grid {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 24px;
    width: 100%;
    align-items: flex-start;
}

/* 개인 스탯 영역 (왼쪽) */
.match-personal-stats {
    background: rgba(30, 41, 59, 0.5);
    border-radius: 8px;
    padding: 16px;
    border: 1px solid rgba(71, 85, 105, 0.2);
}

.hero-rank-section {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 16px;
}

.hero-info-compact {
    display: flex;
    align-items: center;
    gap: 8px;
}

.hero-avatar {
    width: 40px;
    height: 40px;
    border-radius: 6px;
    border: 2px solid rgba(71, 85, 105, 0.3);
}

.hero-name-compact {
    font-weight: 600;
    color: #FFEFD7;
    font-size: 14px;
}

.rank-badge-compact .rank-icon {
    width: 32px;
    height: 32px;
}

.personal-stats-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    margin-bottom: 16px;
}

.kda-display {
    text-align: center;
}

.kda-numbers-large {
    font-size: 14px;
    font-weight: bold;
    color: #FFEFD7;
    font-family: monospace;
    white-space: nowrap;
    line-height: 1;
}

.kda-ratio-text {
    font-size: 12px;
    color: #94A3B8;
    margin-top: 4px;
}

.performance-display {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.stat-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.stat-label {
    font-size: 12px;
    color: #94A3B8;
}

.stat-value {
    font-size: 10px;
    font-weight: 500;
    color: #FFEFD7;
}

.match-items-compact {
    border-top: 1px solid rgba(71, 85, 105, 0.2);
    padding-top: 12px;
}

.items-label {
    font-size: 12px;
    color: #94A3B8;
    margin-bottom: 8px;
}

/* 팀 정보 영역 (오른쪽) */
.match-teams {
    background: rgba(30, 41, 59, 0.3);
    border-radius: 8px;
    padding: 16px;
    border: 1px solid rgba(71, 85, 105, 0.2);
    min-height: 200px;
}

.teams-header {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    margin-bottom: 12px;
    text-align: center;
}

.our-team-label {
    font-size: 12px;
    font-weight: 600;
    color: #10B981;
    padding: 4px 8px;
    background: rgba(16, 185, 129, 0.1);
    border-radius: 4px;
}

.enemy-team-label {
    font-size: 12px;
    font-weight: 600;
    color: #EF4444;
    padding: 4px 8px;
    background: rgba(239, 68, 68, 0.1);
    border-radius: 4px;
}

/* 팀별 플레이어 표시 스타일 */
.teams-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    height: 100%;
}

.team-section {
    display: flex;
    flex-direction: column;
    gap: 6px;
    padding: 10px;
    border-radius: 8px;
    background: rgba(15, 23, 42, 0.3);
    border: 1px solid rgba(71, 85, 105, 0.2);
    min-height: 160px;
}

.team-section.our-team {
    border-left: 4px solid #10B981;
    background: rgba(16, 185, 129, 0.05);
}

.team-section.enemy-team {
    border-left: 4px solid #EF4444;
    background: rgba(239, 68, 68, 0.05);
}

.team-label-header {
    font-size: 13px;
    font-weight: 600;
    padding: 5px 10px;
    margin-bottom: 8px;
    border-radius: 6px;
    text-align: center;
}

.our-team .team-label-header {
    color: #10B981;
    background: rgba(16, 185, 129, 0.2);
    border: 1px solid rgba(16, 185, 129, 0.3);
}

.enemy-team .team-label-header {
    color: #EF4444;
    background: rgba(239, 68, 68, 0.2);
    border: 1px solid rgba(239, 68, 68, 0.3);
}

.team-section .flex {
    background: rgba(30, 41, 59, 0.4);
    padding: 5px 8px;
    border-radius: 6px;
    border: 1px solid rgba(71, 85, 105, 0.15);
    transition: all 0.2s ease;
}

.team-section .flex:hover {
    background: rgba(30, 41, 59, 0.7);
    transform: translateX(2px);
}

.team-section img {
    width: 24px !important;
    height: 24px !important;
    border-radius: 50%;
    border: 2px solid rgba(71, 85, 105, 0.3);
}

.our-team .player-name-text {
    color: #10B981 !important;
    font-size: 12px;
    font-weight: 500;
}

.enemy-team .player-name-text {
    color: #EF4444 !important;
    font-size: 12px;
    font-weight: 500;
}

/* 반응형 디자인 */
@media (max-width: 768px) {
    .match-content-grid {
        grid-template-columns: 1fr;
        gap: 16px;
    }
    
    .personal-stats-grid {
        grid-template-columns: 1fr;
        text-align: center;
    }
    
    .teams-header {
        grid-template-columns: 1fr;
        gap: 8px;
    }
}
}

.match-left-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 16px;
    min-width: 0;
}

.match-right-content {
    width: 420px;
    flex-shrink: 0;
}

.match-outcome-info {
    display: flex;
    gap: 8px;
    align-items: center;
}

.match-result-text.win {
    color: #4caf50;
    font-weight: bold;
}

.match-result-text.loss {
    color: #f44336;
    font-weight: bold;
}

.match-type {
    color: #999;
}

.match-date {
    color: #ccc;
}

.match-id-info {
    display: flex;
    gap: 12px;
    align-items: center;
    color: #999;
    font-size: 13px;
}

.match-main-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.rank-hero-section {
    display: flex;
    align-items: center;
    gap: 16px;
}

.rank-badge-img {
    width: 32px;
    height: 32px;
    object-fit: cover;
}

.hero-info {
    display: flex;
    align-items: center;
    gap: 8px;
}

.hero-portrait {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    object-fit: cover;
}

.hero-name {
    font-weight: bold;
    color: #fff;
    font-size: 16px;
}

.stats-section {
    text-align: right;
}

.kda-stats {
    margin-bottom: 4px;
}

.kda-numbers {
    font-size: 18px;
    font-weight: bold;
    color: #fff;
    margin-right: 8px;
}

.kda-ratio {
    color: #4caf50;
    font-weight: bold;
}

.performance-stats {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    font-size: 13px;
    color: #ccc;
}

.stat-item {
    white-space: nowrap;
}

.match-items-section {
    margin-bottom: 16px;
}

.grid {
    display: grid;
}

.grid-cols-6 {
    grid-template-columns: repeat(6, 1fr);
}

.gap-2 {
    gap: 8px;
}

.w-fit {
    width: fit-content;
}

.mb-1 {
    margin-bottom: 4px;
}

.w-8, .h-8 {
    width: 32px;
    height: 32px;
}

.rounded {
    border-radius: 4px;
}

.border-border {
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.bg-muted {
    background-color: rgba(100, 100, 100, 0.3);
}

.match-players {
    margin-top: 12px;
}

.grid-cols-2 {
    grid-template-columns: repeat(2, 1fr);
}

.grid-cols-1 {
    grid-template-columns: repeat(1, 1fr);
}

/* md: 768px 이상에서 auto 1fr auto 레이아웃 */
@media (min-width: 768px) {
    .md\\:grid-cols-\\[auto_1fr_auto\\] {
        grid-template-columns: auto 1fr auto;
    }
}

.gap-x-4 {
    column-gap: 1rem;
}

.gap-y-8 {
    row-gap: 2rem;
}

.bg-card {
    background-color: var(--card-bg, rgba(0, 0, 0, 0.2));
}

.overflow-hidden {
    overflow: hidden;
}

.w-full {
    width: 100%;
}

.gap-x-5 {
    column-gap: 20px;
}

.gap-y-1_5 {
    row-gap: 6px;
}

.w-6, .h-6 {
    width: 24px;
    height: 24px;
}

.rounded-full {
    border-radius: 50%;
}

.player-name-text {
    font-size: 12px;
    color: #ccc;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 128px;
}

.flex {
    display: flex;
}

.items-center {
    align-items: center;
}

.w-full {
    width: 100%;
}

.p-3 {
    padding: 12px;
}

.items-start {
    align-items: flex-start;
}

/* Welcome Message Styles */
.welcome-message {
    text-align: center;
    background: linear-gradient(135deg, rgba(88, 101, 242, 0.1) 0%, rgba(0, 0, 0, 0) 100%);
    padding: 30px;
    border-radius: 16px;
    margin-bottom: 30px;
    border: 1px solid rgba(88, 101, 242, 0.2);
}

.welcome-message h1 {
    font-size: 32px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0 0 10px 0;
}

.welcome-message p {
    color: #999;
    margin: 0 0 20px 0;
    font-size: 16px;
}

.quick-actions {
    display: flex;
    justify-content: center;
    gap: 15px;
    flex-wrap: wrap;
}

.action-btn {
    padding: 8px 16px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    font-size: 14px;
    transition: all 0.3s;
}

.action-btn.secondary {
    background: rgba(255, 255, 255, 0.1);
    color: #FFEFD7;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.action-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
}

/* Player Detail Styles (기존 CSS 재사용) */
.player-detail-section {
    padding: 120px 0 60px;
    min-height: 100vh;
    background: #000000;
}

.player-detail-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 40px;
}

/* 플레이어 기본 스타일 */
.player-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.player-basic-info {
    display: flex;
    align-items: center;
    gap: 20px;
}

.player-detail-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    border: 3px solid #63a2e2;
}

.player-main-info {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.player-name {
    font-size: 32px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0;
}

.player-meta {
    display: flex;
    align-items: center;
    gap: 15px;
    font-size: 16px;
    color: #999;
}

.player-country {
    font-size: 24px;
}

.player-account-id {
    font-family: monospace;
    font-size: 14px;
}

.player-rank {
    text-align: center;
}

.rank-badge {
    display: flex;
    align-items: center;
    gap: 15px;
}

.rank-medal {
    width: 64px;
    height: 64px;
}

.rank-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.rank-name {
    font-size: 18px;
    font-weight: 600;
    color: #63a2e2;
}

.rank-score {
    font-size: 24px;
    font-weight: 700;
    color: #FFEFD7;
}

.player-stats {
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 30px;
}

.stat-card {
    text-align: center;
    padding: 20px;
    background: rgba(255, 255, 255, 0.03);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
}

.stat-card:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateY(-2px);
}

.stat-value {
    font-size: 28px;
    font-weight: 700;
    color: #63a2e2;
    margin-bottom: 8px;
    display: block;
}

.stat-label {
    font-size: 14px;
    color: #999;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.player-section {
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.section-title {
    font-size: 24px;
    font-weight: 600;
    color: #FFEFD7;
    margin-bottom: 30px;
    border-bottom: 2px solid #63a2e2;
    padding-bottom: 10px;
}

.heroes-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
}

.hero-card {
    display: flex;
    align-items: center;
    gap: 15px;
    background: rgba(255, 255, 255, 0.03);
    padding: 20px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
}

.hero-card:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateY(-2px);
}

.hero-card-image {
    width: 50px;
    height: 50px;
    border-radius: 8px;
}

.hero-card-info h3 {
    font-size: 16px;
    font-weight: 600;
    color: #FFEFD7;
    margin: 0 0 5px 0;
}

.hero-card-stats {
    font-size: 14px;
    color: #999;
}

/* 상세 영웅 카드 스타일 */
.hero-card.detailed {
    flex-direction: column;
    align-items: stretch;
    padding: 25px;
    min-height: 300px;
}

.hero-card.detailed .hero-card-image {
    width: 60px;
    height: 60px;
    align-self: center;
    margin-bottom: 15px;
}

.hero-card-name {
    text-align: center;
    font-size: 18px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0 0 20px 0;
}

.hero-card-main-stats {
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.hero-card-detailed-stats {
    flex: 1;
}

.hero-stat-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
    font-size: 13px;
}

.hero-stat-label {
    color: #999;
    font-weight: 500;
}

.hero-stat-value {
    color: #FFEFD7;
    font-weight: 600;
}

.hero-stat-value.positive {
    color: #10B981;
}

.hero-stat-value.negative {
    color: #EF4444;
}

/* 매치 리스트 스타일 */
.matches-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.match-card {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: rgba(255, 255, 255, 0.03);
    padding: 20px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
}

.match-card:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
}

.match-card.win {
    border-left: 4px solid #10B981;
}

.match-card.loss {
    border-left: 4px solid #EF4444;
}

.match-hero {
    display: flex;
    align-items: center;
    gap: 15px;
    min-width: 140px;
}

.match-hero-image {
    width: 40px;
    height: 40px;
    border-radius: 6px;
}

.match-hero-name {
    font-weight: 500;
    color: #FFEFD7;
}

.match-result {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 80px;
}

.result-text {
    font-weight: 600;
    font-size: 14px;
}

.win-text {
    color: #10B981;
}

.loss-text {
    color: #EF4444;
}

.unknown-text {
    color: #999;
}

.match-outcomes {
    display: flex;
    flex-direction: column;
    gap: 2px;
    margin-bottom: 4px;
}

.match-outcome {
    font-weight: 600;
    font-size: 13px;
}

.lane-outcome {
    font-weight: 500;
    font-size: 11px;
}

.match-duration {
    font-size: 12px;
    color: #999;
}

.match-id {
    font-size: 11px;
    color: #666;
    font-family: monospace;
}

.match-stats {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 80px;
}

.kda {
    font-family: monospace;
    font-size: 16px;
    color: #FFEFD7;
}

.kda-ratio {
    font-size: 12px;
    color: #999;
}

.match-performance {
    display: flex;
    gap: 20px;
    flex: 1;
}

.performance-item {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.performance-label {
    font-size: 12px;
    color: #999;
    margin-bottom: 2px;
}

.performance-value {
    font-weight: 500;
    color: #FFEFD7;
    font-size: 14px;
}

.match-time {
    font-size: 12px;
    color: #999;
    min-width: 80px;
    text-align: right;
}

/* Match Items Styles */
.match-items {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    min-width: 250px;
}

.items-label {
    font-size: 12px;
    color: #999;
    font-weight: 500;
}

.items-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(40px, 1fr));
    gap: 4px;
    max-width: 240px;
}

.item-wrapper {
    position: relative;
    display: inline-block;
}

.empty-slot {
    opacity: 0.3;
}

.empty-item-placeholder {
    width: 48px;
    height: 48px;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    font-size: 20px;
}

.empty-item-placeholder::before {
    content: '?';
    font-weight: bold;
}

.items-info {
    font-size: 11px;
    color: #999;
    text-align: center;
    margin-top: 4px;
    font-style: italic;
}

.item-image {
    width: 48px;
    height: 48px;
    border-radius: 4px;
    transition: transform 0.2s ease;
    object-fit: cover;
}

.item-image:hover {
    transform: scale(1.1);
}

.item-image.real-item {
    border: 2px solid #10B981;
    box-shadow: 0 0 8px rgba(16, 185, 129, 0.3);
}

.item-image.real-item:hover {
    border-color: #059669;
    box-shadow: 0 0 12px rgba(16, 185, 129, 0.5);
}

.weapon-item {
    border-color: #FF8C42 !important;
}

.vitality-item {
    border-color: #4CAF50 !important;
}

.spirit-item {
    border-color: #8E44AD !important;
}

.item-cost {
    position: absolute;
    bottom: 2px;
    right: 2px;
    background: rgba(0, 0, 0, 0.8);
    color: #FFD700;
    font-size: 10px;
    font-weight: bold;
    padding: 1px 3px;
    border-radius: 2px;
    line-height: 1;
}


/* 파티 스탯 스타일 */
.party-stats-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.party-member {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px 20px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
    cursor: pointer;
}

.party-member:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateX(5px);
}

.party-member:active {
    background: rgba(99, 162, 226, 0.15);
    border-color: #5289c7;
    transform: translateX(3px) scale(0.98);
}

.party-member-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
}

.party-member-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.party-member-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.party-member-name {
    font-weight: 600;
    color: #FFEFD7;
    font-size: 16px;
}

.party-member-matches {
    font-size: 14px;
    color: #999;
}

.party-member-winrate {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 4px;
    min-width: 80px;
}

.winrate-value {
    font-size: 20px;
    font-weight: 700;
    color: #63a2e2;
}

.winrate-label {
    font-size: 12px;
    color: #999;
    text-transform: uppercase;
}

.party-member-id {
    font-size: 12px;
    color: #999;
    font-family: monospace;
}

.party-stats {
    display: flex;
    gap: 25px;
    flex: 1;
}

.party-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.party-stat-label {
    font-size: 12px;
    color: #999;
    margin-bottom: 4px;
}

.party-stat-value {
    font-weight: 600;
    color: #63a2e2;
    font-size: 14px;
}

.party-last-played {
    font-size: 12px;
    color: #999;
    min-width: 100px;
    text-align: right;
}

/* MMR 그래프 스타일 */
.mmr-graph-container {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 15px;
    padding: 25px;
    margin: 20px 0;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

#mmr-chart {
    width: 100% !important;
    height: 400px !important;
    background: transparent;
}

.match-outcome-info {
    display: flex;
    gap: 8px;
    align-items: center;
}

.match-result-text.win {
    color: #4caf50;
    font-weight: bold;
}

.match-result-text.loss {
    color: #f44336;
    font-weight: bold;
}

.match-type {
    color: #999;
}

.match-date {
    color: #ccc;
}

.match-id-info {
    display: flex;
    gap: 12px;
    align-items: center;
    color: #999;
    font-size: 13px;
}

.match-main-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.rank-hero-section {
    display: flex;
    align-items: center;
    gap: 16px;
}

.match-rank {
    font-weight: bold;
    color: #ffd700;
    font-size: 16px;
}

.hero-info {
    display: flex;
    align-items: center;
    gap: 8px;
}

.hero-portrait {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    object-fit: cover;
}

.hero-name {
    font-weight: bold;
    color: #fff;
    font-size: 16px;
}

.stats-section {
    text-align: right;
}

.kda-stats {
    margin-bottom: 4px;
}

.kda-numbers {
    font-size: 18px;
    font-weight: bold;
    color: #fff;
    margin-right: 8px;
}

.kda-ratio {
    color: #4caf50;
    font-weight: bold;
}

.performance-stats {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    font-size: 13px;
    color: #ccc;
}

.stat-item {
    white-space: nowrap;
}

.match-items-section {
    margin-bottom: 16px;
}

.items-row {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.items-icons {
    display: flex;
    gap: 4px;
    flex-wrap: wrap;
}

.item-icon {
    width: 32px;
    height: 32px;
    border-radius: 4px;
    object-fit: cover;
}

.item-icon.tier-1 {
    border: 1px solid #8B7355;
}

.item-icon.tier-2 {
    border: 1px solid #4A90E2;
}

.item-icon.tier-3 {
    border: 1px solid #9B59B6;
}

.item-icon.tier-4 {
    border: 1px solid #FFD700;
}

.items-names {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    font-size: 12px;
    color: #999;
}

.item-name {
    white-space: nowrap;
}

.match-players {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    font-size: 13px;
}

.team {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.team-header {
    font-weight: bold;
    color: #ccc;
    margin-bottom: 8px;
}

.player-row {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 4px;
    border-radius: 4px;
}

.player-hero-small {
    width: 24px;
    height: 24px;
    border-radius: 4px;
    object-fit: cover;
}

.player-name {
    flex: 1;
    color: #fff;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* deadlock-api.com 스타일 추가 CSS */
.rank-badge-container {
    display: flex;
    align-items: center;
    gap: 8px;
}

.rank-badge-img {
    width: 32px;
    height: 32px;
    object-fit: cover;
}

.rank-text-fallback {
    font-weight: bold;
    color: #ffd700;
    font-size: 16px;
}

.bg-muted {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
}

.border-border {
    border-color: rgba(255, 255, 255, 0.2);
}

.text-muted-foreground {
    color: #999;
}

.player-name-text {
    font-size: 12px;
    color: #ccc;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.grid {
    display: grid;
}

.grid-cols-6 {
    grid-template-columns: repeat(6, 1fr);
}

.grid-cols-2 {
    grid-template-columns: repeat(2, 1fr);
}

.gap-2 {
    gap: 8px;
}

.gap-x-5 {
    column-gap: 20px;
}

.gap-y-1_5 {
    row-gap: 6px;
}

.w-fit {
    width: fit-content;
}

.mb-1 {
    margin-bottom: 4px;
}

.size-8, .w-8, .h-8 {
    width: 32px;
    height: 32px;
}

.w-6, .h-6 {
    width: 24px;
    height: 24px;
}

.rounded {
    border-radius: 4px;
}

.rounded-full {
    border-radius: 50%;
}

.aspect-square {
    aspect-ratio: 1 / 1;
}

.w-32 {
    width: 128px;
}

.truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.text-xs {
    font-size: 12px;
}

.items-start {
    align-items: flex-start;
}

.p-3 {
    padding: 12px;
}

.flex {
    display: flex;
}

.items-center {
    align-items: center;
}

.w-full {
    width: 100%;
}

/* 기존 매치 스타일 숨김 */
.match-card {
    display: none;
}

/* 에러 및 로딩 스타일 */
.profile-error {
    text-align: center;
    padding: 100px 20px;
    color: #FFEFD7;
}

.profile-error h2 {
    font-size: 36px;
    margin-bottom: 20px;
    color: #EF4444;
}

.retry-btn {
    background: #63a2e2;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

.retry-btn:hover {
    background: #5289c7;
    transform: translateY(-2px);
}

.back-button {
    display: inline-block;
    background: rgba(255, 255, 255, 0.1);
    color: #FFEFD7;
    padding: 12px 24px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s;
}

.back-button:hover {
    background: rgba(255, 255, 255, 0.2);
    color: #FFEFD7;
}

/* 팀 랭크 배지 스타일 */
.match-meta-info {
    display: flex;
    align-items: center;
    gap: 10px;
    margin: 4px 0;
}

.team-rank-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    position: relative;
}

.rank-badge-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
}

.rank-fallback {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    border-radius: 6px;
    font-weight: bold;
    font-size: 12px;
    color: white;
    background: linear-gradient(135deg, #63a2e2, #4a90e2);
    border: 2px solid #63a2e2;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);
    line-height: 1;
}

/* 팀 랭크 호버 효과 */
.team-rank-badge:hover {
    transform: scale(1.1);
    transition: transform 0.2s ease;
}

.team-rank-badge:hover .rank-badge-image {
    filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.5)) brightness(1.1);
}

/* 아이템 시간 표시 스타일 */
.item-wrapper {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.item-time {
    position: absolute;
    bottom: -2px;
    right: -2px;
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    font-size: 9px;
    padding: 1px 3px;
    border-radius: 3px;
    line-height: 1;
    border: 1px solid rgba(255, 255, 255, 0.2);
    z-index: 2;
}

.empty-item-placeholder {
    width: 48px;
    height: 48px;
    background: rgba(255, 255, 255, 0.05);
    border: 2px dashed rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    font-size: 12px;
}

/* 반응형 */
@media (max-width: 768px) {
    .player-detail-container {
        padding: 0 20px;
    }
    
    .welcome-message h1 {
        font-size: 24px;
    }
    
    .quick-actions {
        flex-direction: column;
        align-items: center;
    }
    
    .player-header {
        flex-direction: column;
        gap: 20px;
        text-align: center;
    }
    
    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }
    
    .heroes-grid {
        grid-template-columns: 1fr;
    }
    
    .match-card {
        flex-direction: column;
        gap: 12px;
        text-align: center;
    }
    
    .match-hero, .match-result, .match-stats {
        min-width: auto;
    }
    
    .match-performance {
        justify-content: center;
    }
    
    .match-time {
        text-align: center;
        min-width: auto;
    }
    
    .match-meta-info {
        flex-direction: column;
        gap: 5px;
        align-items: center;
    }
    
    .team-rank-badge {
        width: 24px;
        height: 24px;
    }
    
    .rank-fallback {
        width: 20px;
        height: 20px;
        font-size: 10px;
    }
    
    .party-member {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }
    
    .party-member-info {
        min-width: auto;
    }
    
    .party-stats {
        justify-content: center;
        flex-wrap: wrap;
        gap: 15px;
    }
    
    .party-last-played {
        text-align: center;
        min-width: auto;
    }
}

/* Skeleton Loading Styles for Progressive Loading */
.skeleton-loading {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    padding: 20px;
    text-align: center;
    color: #999;
    font-style: italic;
    animation: skeleton-pulse 1.5s ease-in-out infinite alternate;
}

@keyframes skeleton-pulse {
    0% {
        opacity: 0.6;
    }
    100% {
        opacity: 1;
    }
}

.skeleton-loading::before {
    content: "⏳ ";
    margin-right: 8px;
}
</style>

<script>
// 국가 플래그를 이미지로 변환하는 함수
function getCountryImage(countryFlag) {
    const flagImageMap = {
        '🇺🇸': '<img src="https://flagcdn.com/24x18/us.png" alt="미국" title="미국" class="flag-image">',
        '🇨🇦': '<img src="https://flagcdn.com/24x18/ca.png" alt="캐나다" title="캐나다" class="flag-image">',
        '🇲🇽': '<img src="https://flagcdn.com/24x18/mx.png" alt="멕시코" title="멕시코" class="flag-image">',
        '🇬🇧': '<img src="https://flagcdn.com/24x18/gb.png" alt="영국" title="영국" class="flag-image">',
        '🇩🇪': '<img src="https://flagcdn.com/24x18/de.png" alt="독일" title="독일" class="flag-image">',
        '🇫🇷': '<img src="https://flagcdn.com/24x18/fr.png" alt="프랑스" title="프랑스" class="flag-image">',
        '🇪🇸': '<img src="https://flagcdn.com/24x18/es.png" alt="스페인" title="스페인" class="flag-image">',
        '🇮🇹': '<img src="https://flagcdn.com/24x18/it.png" alt="이탈리아" title="이탈리아" class="flag-image">',
        '🇨🇳': '<img src="https://flagcdn.com/24x18/cn.png" alt="중국" title="중국" class="flag-image">',
        '🇯🇵': '<img src="https://flagcdn.com/24x18/jp.png" alt="일본" title="일본" class="flag-image">',
        '🇰🇷': '<img src="https://flagcdn.com/24x18/kr.png" alt="한국" title="한국" class="flag-image">',
        '🇹🇼': '<img src="https://flagcdn.com/24x18/tw.png" alt="대만" title="대만" class="flag-image">',
        '🇸🇬': '<img src="https://flagcdn.com/24x18/sg.png" alt="싱가포르" title="싱가포르" class="flag-image">',
        '🇷🇺': '<img src="https://flagcdn.com/24x18/ru.png" alt="러시아" title="러시아" class="flag-image">',
        '🇵🇱': '<img src="https://flagcdn.com/24x18/pl.png" alt="폴란드" title="폴란드" class="flag-image">',
        '🇸🇪': '<img src="https://flagcdn.com/24x18/se.png" alt="스웨덴" title="스웨덴" class="flag-image">',
        '🇳🇴': '<img src="https://flagcdn.com/24x18/no.png" alt="노르웨이" title="노르웨이" class="flag-image">',
        '🇩🇰': '<img src="https://flagcdn.com/24x18/dk.png" alt="덴마크" title="덴마크" class="flag-image">',
        '🇹🇭': '<img src="https://flagcdn.com/24x18/th.png" alt="태국" title="태국" class="flag-image">',
        '🇻🇳': '<img src="https://flagcdn.com/24x18/vn.png" alt="베트남" title="베트남" class="flag-image">',
        '🇲🇾': '<img src="https://flagcdn.com/24x18/my.png" alt="말레이시아" title="말레이시아" class="flag-image">',
        '🇵🇭': '<img src="https://flagcdn.com/24x18/ph.png" alt="필리핀" title="필리핀" class="flag-image">',
        '🇮🇩': '<img src="https://flagcdn.com/24x18/id.png" alt="인도네시아" title="인도네시아" class="flag-image">',
        '🌍': '<img src="https://flagcdn.com/24x18/un.png" alt="알 수 없음" title="알 수 없음" class="flag-image">'
    };
    
    return flagImageMap[countryFlag] || '<img src="https://flagcdn.com/24x18/un.png" alt="알 수 없음" title="알 수 없음" class="flag-image">';
}

// Progressive Loading 지원 함수들
function populatePlayerData(data) {
    console.log('🎨 기본 프로필 데이터로 UI 업데이트:', data);
    
    // 기본 정보 업데이트 (안전한 요소 체크)
    const playerAvatar = document.getElementById('player-avatar');
    const playerName = document.getElementById('player-name');
    const playerCountry = document.getElementById('player-country');
    
    if (playerAvatar) {
        playerAvatar.src = data.avatar || 'https://avatars.cloudflare.steamstatic.com/b5bd56c1aa4644a474a2e4972be27ef9e82e517e_full.jpg';
    }
    if (playerName) {
        playerName.textContent = data.name || 'Unknown Player';
    }
    if (playerCountry) {
        playerCountry.innerHTML = getCountryImage(data.country || '🌍');
    }
    
    // 랭크 정보 업데이트
    const rankMedal = document.getElementById('rank-medal');
    const rankName = document.getElementById('rank-name');
    const rankScore = document.getElementById('rank-score');
    
    if (rankMedal && rankName && rankScore) {
        const getMedalImage = (medal, subrank) => {
            const medalRankMap = {
                'Eternus': 11, 'Phantom': 10, 'Oracle': 9, 'Ritualist': 8,
                'Alchemist': 7, 'Arcanist': 6, 'Initiate': 5
            };
            const rankNumber = medalRankMap[medal] || 5;
            return `https://cdn.deadlock.coach/vpk/panorama/images/ranked/badges/rank${rankNumber}/badge_sm_subrank${subrank || 1}.webp`;
        };
        
        if (data.rank?.medal && data.rank?.subrank && data.rank?.score) {
            rankMedal.src = getMedalImage(data.rank.medal, data.rank.subrank);
            rankName.textContent = `${data.rank.medal} ${data.rank.subrank}`;
            rankScore.textContent = data.rank.score.toLocaleString();
        } else {
            rankMedal.src = getMedalImage('Initiate', 1);
            rankName.textContent = '랭크 정보 없음';
            rankScore.textContent = '-';
        }
    }
    
    // 기본 스탯 업데이트 (안전한 요소 체크)
    const stats = data.stats || {};
    const statElements = [
        { id: 'stat-matches', value: stats.matches || '0' },
        { id: 'stat-winrate', value: `${stats.winRate || 0}%` },
        { id: 'stat-lane-winrate', value: `${stats.laneWinRate || 0}%` },
        { id: 'stat-kda', value: stats.kda || '0.0' },
        { id: 'stat-headshots', value: `${stats.headshotPct || 0}%` },
        { id: 'stat-souls', value: stats.soulsPerMin || '0' },
        { id: 'stat-damage', value: stats.denies || '0' },
        { id: 'stat-healing', value: stats.endorsements || '0' }
    ];
    
    statElements.forEach(({ id, value }) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        } else {
            console.warn(`⚠️ 요소를 찾을 수 없음: ${id}`);
        }
    });
}

function showSkeletonLoading() {
    console.log('💀 스켈레톤 로딩 UI 표시');
    
    // 영웅, 매치, 파티 섹션에 스켈레톤 UI 표시 (안전한 요소 체크)
    const skeletonElements = [
        { id: 'heroes-grid', message: '영웅 데이터 로딩 중...' },
        { id: 'matches-list', message: '매치 데이터 로딩 중...' },
        { id: 'party-members-list', message: '파티 데이터 로딩 중...' }
    ];
    
    skeletonElements.forEach(({ id, message }) => {
        const element = document.getElementById(id);
        if (element) {
            element.innerHTML = `<div class="skeleton-loading">${message}</div>`;
        } else {
            console.warn(`⚠️ 스켈레톤 요소를 찾을 수 없음: ${id}`);
        }
    });
}

async function loadMyProfileData() {
    const loading = document.getElementById('player-loading');
    const content = document.getElementById('player-content');
    const error = document.getElementById('profile-error');
    
    // DOM 요소 존재 확인
    if (!loading || !content) {
        console.error('❌ 필수 DOM 요소를 찾을 수 없습니다');
        return;
    }
    
    loading.style.display = 'flex';
    content.style.display = 'none';
    if (error) {
        error.style.display = 'none';
    }
    
    try {
        const accountId = '<%= accountId %>';
        console.log('📋 프로필 데이터 로딩 시작, Account ID:', accountId);
        
        // accountId 유효성 검사
        if (!accountId || accountId === 'null' || accountId === 'undefined') {
            throw new Error('Account ID가 유효하지 않습니다. 다시 로그인해주세요.');
        }
        
        // Progressive Loading - 임시 비활성화 (안정성을 위해)
        console.log('🔄 기본 프로필 데이터 로딩 시작...');
        
        // 타임아웃이 있는 fetch 함수
        const fetchWithTimeout = (url, timeout = 15000) => {
            return Promise.race([
                fetch(url, { 
                    headers: { 'Accept': 'application/json' },
                    cache: 'no-cache'
                }),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error(`${url} 요청 타임아웃`)), timeout)
                )
            ]);
        };
        
        // 상세 데이터를 병렬로 로드 (타임아웃 적용)
        console.log('🔄 상세 API 호출 시작...');
        const apiCalls = await Promise.allSettled([
            fetchWithTimeout(`/api/v1/players/${accountId}`),
            fetchWithTimeout(`/api/v1/players/${accountId}/hero-stats`),
            fetchWithTimeout(`/api/v1/players/${accountId}/match-history?limit=10`),
            fetchWithTimeout(`/api/v1/players/${accountId}/party-stats`),
            fetchWithTimeout(`/api/v1/players/${accountId}/mmr`)
        ]);
        
        console.log('📡 API 호출 결과:', apiCalls.map((result, index) => ({
            index,
            status: result.status,
            reason: result.reason?.message
        })));
        
        // 응답 처리
        const results = {
            player: null,
            heroStats: [],
            matchHistory: [],
            partyStats: [],
            mmrData: null
        };
        
        // API 결과 처리
        for (let i = 0; i < apiCalls.length; i++) {
            const result = apiCalls[i];
            const apiNames = ['player', 'heroStats', 'matchHistory', 'partyStats', 'mmrData'];
            
            if (result.status === 'fulfilled') {
                try {
                    if (result.value.ok) {
                        const data = await result.value.json();
                        results[apiNames[i]] = data;
                        console.log(`✅ ${apiNames[i]} 로드 성공`);
                    } else {
                        console.warn(`⚠️ ${apiNames[i]} API 실패 (상태: ${result.value.status})`);
                    }
                } catch (jsonError) {
                    console.error(`❌ ${apiNames[i]} JSON 파싱 오류:`, jsonError);
                }
            } else {
                console.error(`❌ ${apiNames[i]} 요청 실패:`, result.reason);
            }
        }
        
        console.log('📊 최종 받은 데이터:', {
            player: !!results.player,
            heroStats: Array.isArray(results.heroStats) ? results.heroStats.length : 0,
            matchHistory: Array.isArray(results.matchHistory) ? results.matchHistory.length : 0,
            partyStats: Array.isArray(results.partyStats) ? results.partyStats.length : 0,
            mmr: !!results.mmrData
        });
        
        // 최소한 플레이어 데이터라도 있으면 UI 업데이트
        if (results.player && !results.player.error) {
            console.log('🎯 프로필 데이터로 UI 업데이트');
            updatePlayerUIFast(results.player, results.heroStats, results.matchHistory, results.partyStats, results.mmrData);
            loading.style.display = 'none';
            content.style.display = 'block';
            console.log('✅ 프로필 데이터 로딩 완료');
        } else {
            // 모든 API가 실패한 경우 폴백 처리
            console.warn('⚠️ 플레이어 데이터를 가져올 수 없음, 기본 UI 표시');
            showFallbackUI(accountId);
            loading.style.display = 'none';
            content.style.display = 'block';
        }
        
    } catch (err) {
        console.error('❌ 프로필 데이터 로딩 실패:', err);
        
        // 안전한 요소 조작
        if (loading) {
            loading.style.display = 'none';
        }
        if (error) {
            error.style.display = 'block';
        }
        
        const errorMessageEl = document.getElementById('error-message');
        if (errorMessageEl) {
            errorMessageEl.textContent = `오류 상세: ${err.message || '알 수 없는 오류'}`;
        } else {
            console.error('❌ 에러 메시지 요소를 찾을 수 없음');
        }
    }
}

// 폴백 UI 표시 함수
function showFallbackUI(accountId) {
    console.log('🔄 폴백 UI 표시, Account ID:', accountId);
    
    // 기본 플레이어 정보 설정
    const defaultAvatar = 'https://avatars.cloudflare.steamstatic.com/b5bd56c1aa4644a474a2e4972be27ef9e82e517e_full.jpg';
    const defaultName = 'Unknown Player';
    
    try {
        const playerAvatar = document.getElementById('player-avatar');
        const playerName = document.getElementById('player-name');
        const playerCountry = document.getElementById('player-country');
        
        if (playerAvatar) playerAvatar.src = defaultAvatar;
        if (playerName) playerName.textContent = defaultName;
        if (playerCountry) playerCountry.textContent = '🌍';
        
        // 빈 매치 히스토리 표시
        const matchesList = document.getElementById('matches-list');
        if (matchesList) {
            matchesList.innerHTML = '<p style="color: #94a3b8; text-align: center; padding: 2rem;">매치 데이터를 불러올 수 없습니다. 잠시 후 다시 시도해주세요.</p>';
        }
        
        // 빈 통계 표시
        const heroStatsList = document.getElementById('hero-stats-list');
        if (heroStatsList) {
            heroStatsList.innerHTML = '<p style="color: #94a3b8; text-align: center; padding: 2rem;">영웅 통계를 불러올 수 없습니다.</p>';
        }
        
        console.log('✅ 폴백 UI 표시 완료');
    } catch (error) {
        console.error('❌ 폴백 UI 표시 오류:', error);
    }
}

// 빠른 UI 업데이트 - 모든 데이터를 한 번에 처리
function updatePlayerUIFast(player, heroStats, matchHistory, partyStats, mmrData) {
    console.log('🎨 UI 업데이트 시작, 플레이어 데이터:', player);
    
    try {
        // Basic Info (안전한 접근)
        const avatar = player?.avatar || 'https://avatars.cloudflare.steamstatic.com/b5bd56c1aa4644a474a2e4972be27ef9e82e517e_full.jpg';
        const name = player?.name || 'Unknown Player';
        const country = player?.country || '🌍';
        
        document.getElementById('player-avatar').src = avatar;
        document.getElementById('player-name').textContent = name;
        document.getElementById('player-country').innerHTML = getCountryImage(country);
        
        // Rank (안전한 접근)
        const getMedalImage = (medal, subrank) => {
            const medalRankMap = {
                'Eternus': 11, 'Phantom': 10, 'Oracle': 9, 'Ritualist': 8,
                'Alchemist': 7, 'Arcanist': 6, 'Initiate': 5
            };
            const rankNumber = medalRankMap[medal] || 9;
            return `https://cdn.deadlock.coach/vpk/panorama/images/ranked/badges/rank${rankNumber}/badge_sm_subrank${subrank || 1}.webp`;
        };
        
        // 영어 등급을 한글로 변환하는 함수
        const getKoreanMedal = (englishMedal) => {
            const medalTranslation = {
                'Eternus': '이터누스',
                'Phantom': '팬텀',
                'Oracle': '오라클',
                'Ritualist': '리츄얼리스트',
                'Alchemist': '알케미스트',
                'Arcanist': '아케니스트',
                'Initiate': '탐험가'
            };
            return medalTranslation[englishMedal] || englishMedal;
        };
        
        const medal = player?.rank?.medal || null;
        const subrank = player?.rank?.subrank || null;
        const score = player?.rank?.score || null;
        
        if (medal && subrank && score) {
            document.getElementById('rank-medal').src = getMedalImage(medal, subrank);
            document.getElementById('rank-name').textContent = `${getKoreanMedal(medal)} ${subrank}`;
            document.getElementById('rank-score').textContent = (typeof score === 'number' ? score : parseInt(score) || 0).toLocaleString();
        } else {
            // 기본 랭크 이미지 (Initiate 1)
            document.getElementById('rank-medal').src = getMedalImage('Initiate', 1);
            document.getElementById('rank-name').textContent = '랭크 정보 없음';
            document.getElementById('rank-score').textContent = '-';
        }
        
        // Stats (안전한 접근)
        const stats = player?.stats || {};
        const matches = stats.matches || 0;
        const winRate = stats.winRate || 0;
        const laneWinRate = stats.laneWinRate || 0;
        const kda = stats.kda || '0.0';
        const soulsPerMin = stats.soulsPerMin || 0;
        const denies = stats.denies || 0;
        const endorsements = stats.endorsements || 0;
        
        document.getElementById('stat-matches').textContent = matches;
        document.getElementById('stat-winrate').textContent = `${winRate}%`;
        document.getElementById('stat-lane-winrate').textContent = `${laneWinRate}%`;
        document.getElementById('stat-kda').textContent = kda;
        document.getElementById('stat-souls').textContent = (typeof soulsPerMin === 'number' ? soulsPerMin : parseInt(soulsPerMin) || 0).toLocaleString();
        document.getElementById('stat-denies').textContent = (typeof denies === 'number' ? denies : parseInt(denies) || 0).toLocaleString();
        document.getElementById('stat-endorsements').textContent = (typeof endorsements === 'number' ? endorsements : parseInt(endorsements) || 0).toLocaleString();
        
        
        console.log('✅ 기본 UI 업데이트 완료');
        
        // 즉시 영웅 및 매치 데이터 표시
        if (heroStats && Array.isArray(heroStats) && heroStats.length > 0) {
            console.log('🎯 영웅 스탯 표시:', heroStats.length, '개');
            displayHeroStats(heroStats);
        } else {
            console.log('⚠️ 영웅 스탯 없음');
            document.getElementById('heroes-grid').innerHTML = '<p style="color: #999; text-align: center;">영웅 데이터가 없습니다.</p>';
        }
        
        if (matchHistory && Array.isArray(matchHistory) && matchHistory.length > 0) {
            console.log('📋 매치 히스토리 표시:', matchHistory.length, '개');
            displayMatchHistory(matchHistory);
        } else {
            console.log('⚠️ 매치 히스토리 없음');
            document.getElementById('matches-list').innerHTML = '<p style="color: #999; text-align: center;">최근 매치 데이터가 없습니다.</p>';
        }
        
        if (partyStats && Array.isArray(partyStats) && partyStats.length > 0) {
            console.log('👥 파티 스탯 표시:', partyStats.length, '개');
            displayPartyStats(partyStats);
        } else {
            console.log('⚠️ 파티 스탯 없음');
            document.getElementById('party-stats-list').innerHTML = '<p style="color: #999; text-align: center;">파티 데이터가 없습니다.</p>';
        }
        
        // MMR 그래프 표시 - 매치 히스토리에서 랭크 데이터 추출
        if (matchHistory && Array.isArray(matchHistory) && matchHistory.length > 0) {
            // 매치 히스토리에서 랭크 정보 추출하여 MMR 그래프 생성
            const mmrDataFromMatches = matchHistory
                .filter(match => match.teamRank && match.playedAt)
                .map(match => ({
                    date: match.playedAt,
                    rank: match.teamRank,
                    mmr: (9 - match.teamRank) * 1000 // 랭크를 대략적인 MMR로 변환 (임시)
                }))
                .reverse(); // 시간순으로 정렬
                
            if (mmrDataFromMatches.length > 0) {
                console.log('📈 매치 히스토리에서 MMR 그래프 생성:', mmrDataFromMatches.length, '개 데이터');
                displayMMRGraph(mmrDataFromMatches);
            } else {
                console.log('⚠️ 랭크 데이터가 있는 매치가 없음');
                document.getElementById('mmr-graph-container').innerHTML = '<p style="color: #999; text-align: center;">랭크 데이터를 찾을 수 없습니다.</p>';
            }
        } else {
            console.log('⚠️ 매치 히스토리 없음');
            document.getElementById('mmr-graph-container').innerHTML = '<p style="color: #999; text-align: center;">매치 데이터가 없어 MMR 그래프를 표시할 수 없습니다.</p>';
        }
        
        console.log('🎉 모든 UI 업데이트 완료');
        
    } catch (error) {
        console.error('❌ UI 업데이트 중 오류:', error);
        throw error;
    }
}

// 기존 함수는 호환성을 위해 유지
function updatePlayerUI(player) {
    // 기본 정보만 업데이트하고 별도로 로드
    document.getElementById('player-avatar').src = player.avatar;
    document.getElementById('player-name').textContent = player.name;
    document.getElementById('player-country').textContent = player.country;
    
    const getMedalImage = (medal, subrank) => {
        const medalRankMap = {
            'Eternus': 11, 'Phantom': 10, 'Oracle': 9, 'Ritualist': 8,
            'Alchemist': 7, 'Arcanist': 6, 'Initiate': 5
        };
        const rankNumber = medalRankMap[medal] || 9;
        return `https://cdn.deadlock.coach/vpk/panorama/images/ranked/badges/rank${rankNumber}/badge_sm_subrank${subrank}.webp`;
    };
    
    // 영어 등급을 한글로 변환하는 함수
    const getKoreanMedal = (englishMedal) => {
        const medalTranslation = {
            'Eternus': '이터누스',
            'Phantom': '팬텀',
            'Oracle': '오라클',
            'Ritualist': '리츄얼리스트',
            'Alchemist': '알케미스트',
            'Arcanist': '아케니스트',
            'Initiate': '탐험가'
        };
        return medalTranslation[englishMedal] || englishMedal;
    };
    
    if (player.rank?.medal && player.rank?.subrank && player.rank?.score) {
        document.getElementById('rank-medal').src = getMedalImage(player.rank.medal, player.rank.subrank);
        document.getElementById('rank-name').textContent = `${getKoreanMedal(player.rank.medal)} ${player.rank.subrank}`;
        document.getElementById('rank-score').textContent = player.rank.score.toLocaleString();
    } else {
        document.getElementById('rank-medal').src = getMedalImage('Initiate', 1);
        document.getElementById('rank-name').textContent = '랭크 정보 없음';
        document.getElementById('rank-score').textContent = '-';
    }
    
    document.getElementById('stat-matches').textContent = player.stats.matches;
    document.getElementById('stat-winrate').textContent = `${player.stats.winRate}%`;
    document.getElementById('stat-lane-winrate').textContent = `${player.stats.laneWinRate}%`;
    document.getElementById('stat-kda').textContent = player.stats.kda;
    document.getElementById('stat-headshots').textContent = `${player.stats.headshotPercent}%`;
    document.getElementById('stat-souls').textContent = player.stats.soulsPerMin.toLocaleString();
    document.getElementById('stat-damage').textContent = player.stats.damagePerMin.toLocaleString();
    document.getElementById('stat-healing').textContent = player.stats.healingPerMin.toLocaleString();
    
    
    loadHeroStats(player.accountId);
    loadMatchHistory(player.accountId);
}

// 영웅별 스탯 로드
async function loadHeroStats(accountId) {
    const grid = document.getElementById('heroes-grid');
    
    try {
        const response = await fetch(`/api/v1/players/${accountId}/hero-stats`);
        const heroStats = await response.json();
        
        if (response.ok && heroStats.length > 0) {
            displayHeroStats(heroStats);
        } else {
            throw new Error('영웅 스탯을 불러올 수 없습니다');
        }
    } catch (error) {
        console.error('영웅 스탯 로드 실패:', error);
        grid.innerHTML = '<p style="color: #999; text-align: center;">영웅 스탯을 불러올 수 없습니다.</p>';
    }
}

// 영웅 스탯 표시
function displayHeroStats(heroStats) {
    const grid = document.getElementById('heroes-grid');
    
    try {
        console.log('🎯 영웅 스탯 표시 시작:', heroStats);
        
        if (!Array.isArray(heroStats) || heroStats.length === 0) {
            grid.innerHTML = '<p style="color: #999; text-align: center;">영웅 데이터가 없습니다.</p>';
            return;
        }
        
        // Player_숫자 형태에서 실제 플레이어 이름을 찾는 함수
        const getPlayerDisplayName = async (player) => {
            let displayName = player.name || player.player_name || player.steam_name || player.hero || 'Player';
            
            // Player_숫자 패턴 감지 (예: Player_92418199)
            const playerIdMatch = displayName.match(/^Player_(\d+)$/);
            if (playerIdMatch) {
                const playerId = playerIdMatch[1];
                console.log(`🔍 Player_${playerId} 패턴 감지, 실제 플레이어 정보 API 호출 중...`);
                
                try {
                    // 실제 플레이어 정보를 API에서 가져오기
                    const response = await fetch(`/api/v1/players/${playerId}`);
                    if (response.ok) {
                        const playerData = await response.json();
                        const realName = playerData.name || playerData.player_name || playerData.steam_name;
                        if (realName && realName !== 'undefined' && realName !== playerId) {
                            console.log(`✅ Player_${playerId} → 실제 이름: ${realName}`);
                            return realName;
                        }
                    }
                } catch (error) {
                    console.error(`❌ Player_${playerId} 정보 가져오기 실패:`, error);
                }
                
                // API 호출이 실패하면 플레이어 ID만 표시
                return `Player #${playerId}`;
            }
            
            // 일반적인 경우
            return displayName === 'undefined' || !displayName ? player.hero || 'Player' : displayName;
        };

        const getHeroImage = (heroName) => {
            const heroImageMap = {
                'Abrams': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/bull_mm.webp',
                'Bebop': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/bebop_mm.webp',
                'Calico': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/nano_mm.webp',
                'Dynamo': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/sumo_mm.webp',
                'Grey Talon': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/archer_mm.webp',
                'Haze': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/haze_mm.webp',
                'Infernus': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/inferno_mm.webp',
                'Ivy': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/tengu_mm.webp',
                'Kelvin': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/kelvin_mm.webp',
                'Mo & Krill': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/digger_mm.webp',
                'Paradox': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/chrono_mm.webp',
                'Pocket': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/synth_mm.webp',
                'Seven': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/gigawatt_mm.webp',
                'Viper': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viper_mm.webp',
                'Vyper': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viper_mm.webp',
                'Lady Geist': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/lady_geist_mm.webp',
                'Lash': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/lash_mm.webp',
                'McGinnis': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/mcginnis_mm.webp',
                'Mo & Krill': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/digger_mm.webp',
                'Paradox': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/chrono_mm.webp',
                'Pocket': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/synth_mm.webp',
                'Seven': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/gigawatt_mm.webp',
                'Shiv': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/shiv_mm.webp',
                'Viper': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viper_mm.webp',
                'Viscous': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viscous_mm.webp',
                'Warden': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/warden_mm.webp',
                'Vyper': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viper_mm.webp',
                'Holliday': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/astro_mm.webp',
                'Mirage': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/mirage_mm.webp',
                'Wraith': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/wraith_mm.webp',
                'Yamato': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/yamato_mm.webp',
                'Sinclair': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/sinclair_mm.webp',
                'Vindicta': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/vindicta_mm.webp'
            };
            return heroImageMap[heroName] || 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/abrams_mm.webp';
        };
        
        const heroCards = heroStats.map((hero, index) => {
            try {
                // 새로운 hero-stats API 데이터 구조 사용
                const matches = parseInt(hero?.matches) || 0;
                const wins = parseInt(hero?.wins) || 0;
                const losses = parseInt(hero?.losses) || (matches - wins);
                const winRate = hero?.winRate || (matches > 0 ? Math.round((wins / matches) * 100) : 0);
                const kda = hero?.kda || '0.0';
                const avgKills = hero?.avgKills || 0;
                const avgDeaths = hero?.avgDeaths || 0;
                const avgAssists = hero?.avgAssists || 0;
                const avgSoulsPerMin = hero?.avgSoulsPerMin || 0;
                const avgDamagePerMin = hero?.avgDamagePerMin || 0;
                const avgHealingPerMin = hero?.avgHealingPerMin || 0;
                const avgMatchDuration = hero?.avgMatchDuration || 0;
                const durationFormatted = hero?.avgMatchDurationFormatted || 
                    (avgMatchDuration > 0 ? `${Math.floor(avgMatchDuration / 60)}:${(avgMatchDuration % 60).toString().padStart(2, '0')}` : '0:00');
                const heroName = hero?.hero || hero?.name || `Hero${index + 1}`;
                const accuracy = hero?.accuracy || 0;
                const critShotRate = hero?.critShotRate || 0;
                const avgLevel = hero?.avgLevel || 0;
                const timePlayedHours = hero?.timePlayedTotal ? (hero.timePlayedTotal / 3600).toFixed(1) : 0;
                
                return `
                    <div class="hero-card detailed">
                        <img src="${getHeroImage(heroName)}" alt="${heroName}" class="hero-card-image">
                        <div class="hero-card-info">
                            <h3 class="hero-card-name">${heroName}</h3>
                            <div class="hero-card-main-stats">
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">매치:</span>
                                    <span class="hero-stat-value">${matches} (${wins}승 ${losses}패)</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">승률:</span>
                                    <span class="hero-stat-value ${winRate >= 50 ? 'positive' : 'negative'}">${winRate}%</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">총 플레이 시간:</span>
                                    <span class="hero-stat-value">${timePlayedHours}시간</span>
                                </div>
                            </div>
                            <div class="hero-card-detailed-stats">
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">KDA:</span>
                                    <span class="hero-stat-value">${avgKills}/${avgDeaths}/${avgAssists} (${kda})</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">평균 레벨:</span>
                                    <span class="hero-stat-value">${avgLevel}</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">명중률:</span>
                                    <span class="hero-stat-value">${accuracy}%</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">크리티컬율:</span>
                                    <span class="hero-stat-value">${critShotRate}%</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">소울/분:</span>
                                    <span class="hero-stat-value">${avgSoulsPerMin.toLocaleString()}</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">데미지/분:</span>
                                    <span class="hero-stat-value">${avgDamagePerMin.toLocaleString()}</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">평균 시간:</span>
                                    <span class="hero-stat-value">${durationFormatted}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } catch (heroError) {
                console.error('영웅 카드 생성 오류:', heroError, hero);
                return `
                    <div class="hero-card">
                        <img src="https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/abrams_mm.webp" alt="Unknown" class="hero-card-image">
                        <div class="hero-card-info">
                            <h3>Unknown Hero</h3>
                            <div class="hero-card-stats">데이터 오류</div>
                        </div>
                    </div>
                `;
            }
        });
        
        grid.innerHTML = heroCards.join('');
        console.log('✅ 영웅 스탯 표시 완료');
        
    } catch (error) {
        console.error('❌ 영웅 스탯 표시 오류:', error);
        grid.innerHTML = '<p style="color: #ff6b6b; text-align: center;">영웅 데이터 표시 중 오류가 발생했습니다.</p>';
    }
}

// 매치 히스토리 로드
async function loadMatchHistory(accountId) {
    const matchesList = document.getElementById('matches-list');
    
    try {
        const response = await fetch(`/api/v1/players/${accountId}/match-history?limit=20`);
        const matches = await response.json();
        
        if (response.ok && matches.length > 0) {
            displayMatchHistory(matches);
        } else {
            throw new Error('매치 히스토리를 불러올 수 없습니다');
        }
    } catch (error) {
        console.error('매치 히스토리 로드 실패:', error);
        matchesList.innerHTML = '<p style="color: #999; text-align: center;">매치 히스토리를 불러올 수 없습니다.</p>';
    }
}

// 향상된 데드락 아이템 매처 시스템
class DeadlockItemMatcher {
    constructor() {
        this.itemsCache = null;
        this.initialized = false;
        this.apiUrl = '/api/v1/items';
    }

    async fetchItemStats() {
        if (this.itemsCache) {
            return this.itemsCache;
        }

        try {
            console.log('🎒 아이템 정보 API 호출 중...');
            const response = await fetch(this.apiUrl);
            const data = await response.json();
            
            if (data.success) {
                this.itemsCache = data.data.items;
                this.initialized = true;
                console.log(`✅ ${data.data.totalItems}개 아이템 정보 로드 완료`);
                return this.itemsCache;
            } else {
                throw new Error(data.error || '아이템 정보를 가져올 수 없습니다');
            }
        } catch (error) {
            console.error('❌ 아이템 정보 로드 실패:', error);
            
            // 폴백 데이터 사용
            this.itemsCache = this.getFallbackItems();
            this.initialized = true;
            return this.itemsCache;
        }
    }

    getFallbackItems() {
        return {
            // 무기 아이템 (Weapon Items)
            715762406: { name: '확장 탄창', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/basic_magazine_sm.png', type: 'weapon' },
            1342610602: { name: '고막력 탄환', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/high_velocity_mag_sm.png', type: 'weapon' },
            1458044103: { name: '기본 탄창', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/basic_magazine_sm.png', type: 'weapon' },
            1835738020: { name: '몬스터 탄환', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/monster_rounds_sm.png', type: 'weapon' },
            2460791803: { name: '광전사', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/berserker_sm.png', type: 'weapon' },
            3977876567: { name: '테슬라 탄환', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/tesla_bullets_sm.png', type: 'weapon' },
            3731635960: { name: '신비한 정확도', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/mystic_shot_sm.png', type: 'weapon' },
            865846625: { name: '거대한 탄창', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/titanic_magazine_sm.png', type: 'weapon' },
            1414319208: { name: '사냥꾼의 오라', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/hunters_aura_sm.png', type: 'weapon' },
            
            // 생명력 아이템 (Vitality Items)
            1537272748: { name: '추가 체력', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/vitality/extra_health_sm.jpg', type: 'vitality' },
            3970837787: { name: '정신력 갑옷', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/vitality/spirit_armor_sm.jpg', type: 'vitality' },
            3791587546: { name: '총알 갑옷', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/vitality/bullet_armor_sm.jpg', type: 'vitality' },
            2863754076: { name: '추가 재생', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/vitality/extra_regen_sm.jpg', type: 'vitality' },
            3675059374: { name: '추가 지구력', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/vitality/extra_stamina_sm.jpg', type: 'vitality' },
            2598983158: { name: '스프린트 부츠', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/vitality/sprint_boots_sm.jpg', type: 'vitality' },
            3730717068: { name: '치유 의식', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/vitality/healing_rite_sm.jpg', type: 'vitality' },
            1845966100: { name: '지속 속도', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/vitality/enduring_speed_sm.jpg', type: 'vitality' },
            4033043084: { name: '치유 증강기', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/vitality/healing_booster_sm.jpg', type: 'vitality' },
            1955841979: { name: '금속 피부', cost: 3200, tier: 3, image: 'https://assets-bucket.deadlock-api.com/vitality/metal_skin_sm.jpg', type: 'vitality' },
            339443430: { name: '거신상', cost: 3200, tier: 3, image: 'https://assets-bucket.deadlock-api.com/vitality/colossus_sm.jpg', type: 'vitality' },
            
            // 정신력 아이템 (Spirit Items)
            2095565695: { name: '추가 정신력', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/spirit/extra_spirit_sm.jpg', type: 'spirit' },
            1282141666: { name: '신비한 폭발', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/spirit/mystic_burst_sm.jpg', type: 'spirit' },
            3677653320: { name: '정신력 타격', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/spirit/spirit_strike_sm.jpg', type: 'spirit' },
            3702319013: { name: '한파', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/spirit/cold_front_sm.jpg', type: 'spirit' },
            859037655: { name: '부패', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/spirit/decay_sm.jpg', type: 'spirit' },
            3574779418: { name: '주입기', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/spirit/infuser_sm.jpg', type: 'spirit' },
            1673325555: { name: '정신력 흡혈', cost: 800, tier: 1, image: 'https://assets-bucket.deadlock-api.com/spirit/spirit_lifesteal_sm.jpg', type: 'spirit' },
            673001892: { name: '이더 변환', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/spirit/ethereal_shift_sm.jpg', type: 'spirit' },
            1656913918: { name: '상급 쿨다운', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/spirit/superior_cooldown_sm.jpg', type: 'spirit' },
            3754524659: { name: '향상된 쿨다운', cost: 1600, tier: 2, image: 'https://assets-bucket.deadlock-api.com/spirit/improved_cooldown_sm.jpg', type: 'spirit' },
            3812615317: { name: '메아리 파편', cost: 3200, tier: 3, image: 'https://assets-bucket.deadlock-api.com/spirit/echo_shard_sm.jpg', type: 'spirit' },
            1729727717: { name: '신비한 잔향', cost: 3200, tier: 3, image: 'https://assets-bucket.deadlock-api.com/spirit/mystic_reverb_sm.jpg', type: 'spirit' },
            3802996421: { name: '리프레셔', cost: 3200, tier: 3, image: 'https://assets-bucket.deadlock-api.com/spirit/refresher_sm.jpg', type: 'spirit' }
        };
    }

    getItemById(itemId) {
        if (!this.initialized || !this.itemsCache) {
            console.warn('⚠️ 아이템 매처가 초기화되지 않았습니다');
            return null;
        }

        const numericId = parseInt(itemId);
        const item = this.itemsCache[numericId];
        
        if (item) {
            return {
                ...item,
                type: item.type || this.getItemTypeByName(item.name),
                id: numericId
            };
        }

        return null;
    }

    getItemTypeByName(itemName) {
        const weaponItems = ['Basic Magazine', 'Close Quarters', 'Berserker', 'Monster Rounds', 'Tesla Bullets', 'Mystic Shot', 'Titanic Magazine', "Hunter's Aura", 'Headshot Booster', 'High-Velocity Mag', 'Hollow Point Ward', 'Rapid Rounds', 'Restorative Shot', 'Soul Shredder Bullets', 'Toxic Bullets'];
        const vitalityItems = ['Extra Health', 'Spirit Armor', 'Bullet Armor', 'Metal Skin', 'Colossus', 'Extra Regen', 'Extra Stamina', 'Sprint Boots', 'Healing Rite'];
        const spiritItems = ['Extra Spirit', 'Mystic Burst', 'Ethereal Shift', 'Echo Shard', 'Superior Cooldown', 'Spirit Strike', 'Cold Front', 'Decay', 'Infuser', 'Spirit Lifesteal'];
        
        if (weaponItems.includes(itemName)) return 'weapon';
        if (vitalityItems.includes(itemName)) return 'vitality';
        if (spiritItems.includes(itemName)) return 'spirit';
        return 'weapon'; // 기본값
    }

    parseItemName(itemName) {
        if (!itemName) return null;
        
        // Unknown Item (ID) 형태 파싱
        const unknownItemMatch = itemName.match(/Unknown Item \((\d+)\)/);
        if (unknownItemMatch) {
            const itemId = parseInt(unknownItemMatch[1]);
            const item = this.getItemById(itemId);
            if (item) {
                console.log(`🔄 아이템 ID 매핑: ${itemName} → ${item.name}`);
                return item;
            }
        }

        // 직접 아이템 이름으로 검색
        if (this.itemsCache) {
            for (const [id, item] of Object.entries(this.itemsCache)) {
                if (item.name === itemName) {
                    return {
                        ...item,
                        type: item.type || this.getItemTypeByName(item.name),
                        id: parseInt(id)
                    };
                }
            }
        }

        return null;
    }

    getItemData(itemName) {
        const item = this.parseItemName(itemName);
        
        if (item) {
            return {
                name: item.name,
                image: item.image,
                type: item.type,
                cost: item.cost || 0,
                tier: item.tier || 1,
                id: item.id
            };
        }

        // 폴백 처리
        return {
            name: itemName,
            image: 'https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/basic_magazine_sm.png',
            type: 'unknown',
            cost: 0,
            tier: 1,
            id: null
        };
    }
}

// 아이템 매칭 초기화 함수
async function initializeItemMatching() {
    try {
        console.log('🔄 아이템 매칭 시스템 초기화 중...');
        
        // 전역 아이템 매처 생성
        window.itemMatcher = new DeadlockItemMatcher();
        await window.itemMatcher.fetchItemStats();
        
        console.log('✅ 아이템 매칭 시스템 초기화 완료');
        
        // 기존 매치 리스트 업데이트
        updateExistingMatches();
        
    } catch (error) {
        console.error('❌ 아이템 매칭 시스템 초기화 실패:', error);
    }
}

// 기존 매치의 아이템 슬롯 업데이트
function updateExistingMatches() {
    try {
        const matchCards = document.querySelectorAll('.match-card');
        console.log(`🔄 ${matchCards.length}개 매치 카드의 아이템 업데이트 중...`);
        
        matchCards.forEach((matchCard, matchIndex) => {
            const itemsGrid = matchCard.querySelector('.items-grid');
            if (itemsGrid && window.itemMatcher && window.itemMatcher.initialized) {
                // 로딩 메시지가 있는 경우 아이템 데이터 재처리
                const loadingMessage = itemsGrid.querySelector('[style*="grid-column: 1/-1"]');
                if (loadingMessage && loadingMessage.textContent.includes('로딩 중')) {
                    console.log(`🎒 매치 ${matchIndex} 아이템 재처리...`);
                    
                    // 실제 아이템 데이터가 있다면 다시 처리 (이 부분은 실제 매치 데이터에 따라 조정 필요)
                    // 여기서는 예시로 빈 슬롯 메시지를 업데이트
                    itemsGrid.innerHTML = `
                        <div style="grid-column: 1/-1; text-align: center; color: #10B981; font-size: 11px; padding: 8px; border: 1px dashed #10B981; border-radius: 4px;">
                            <i class="fas fa-check-circle"></i> 아이템 매칭 시스템 준비 완료
                        </div>
                    `;
                }
            }
        });
        
        console.log('✅ 기존 매치 아이템 업데이트 완료');
    } catch (error) {
        console.error('❌ 기존 매치 업데이트 실패:', error);
    }
}

// 데드락 아이템ㅇ관리 시스템 (호환성을 위해 유지)
class DeadlockItemManager {
    constructor() {
        this.itemCache = new Map();
        this.initialized = false;
        this.fallbackItems = this.initializeFallbackItems();
    }

    initializeFallbackItems() {
        return {
            'weapon': {
                'Basic Magazine': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Close Quarters': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Headshot Booster': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'High-Velocity Mag': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Hollow Point Ward': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Monster Rounds': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Rapid Rounds': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Restorative Shot': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Soul Shredder Bullets': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Titanic Magazine': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Toxic Bullets': { type: 'weapon', tier: 1, color: '#FF6B35' },
                'Active Reload': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Berserker': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Burst Fire': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Escalating Resilience': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Fleetfoot': { type: 'weapon', tier: 2, color: '#FF8C42' },
                "Hunter's Aura": { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Intensifying Magazine': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Kinetic Dash': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Long Range': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Melee Lifesteal': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Mystic Shot': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Point Blank': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Pristine Emblem': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Sharpshooter': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Slowing Bullets': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Spiritual Overflow': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Tesla Bullets': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Warp Stone': { type: 'weapon', tier: 2, color: '#FF8C42' },
                'Alchemical Fire': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Crippling Headshot': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Frenzy': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Glass Cannon': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Heroic Aura': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Inhibitor': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Lucky Shot': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Phantom Strike': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Ricochet': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Shadow Weave': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Silencer': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Vampiric Burst': { type: 'weapon', tier: 3, color: '#FFA500' },
                'Leech': { type: 'weapon', tier: 3, color: '#FFA500' }
            },
            'vitality': {
                'Extra Health': { type: 'vitality', tier: 1, color: '#4CAF50' },
                'Extra Regen': { type: 'vitality', tier: 1, color: '#4CAF50' },
                'Extra Stamina': { type: 'vitality', tier: 1, color: '#4CAF50' },
                'Sprint Boots': { type: 'vitality', tier: 1, color: '#4CAF50' },
                'Healing Rite': { type: 'vitality', tier: 1, color: '#4CAF50' },
                'Bullet Armor': { type: 'vitality', tier: 1, color: '#4CAF50' },
                'Spirit Armor': { type: 'vitality', tier: 1, color: '#4CAF50' },
                "Enchanter's Barrier": { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Enduring Speed': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Healing Booster': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Health Nova': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Majestic Leap': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Return Fire': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Restorative Locket': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Divine Barrier': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Fortitude': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Improved Bullet Armor': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Improved Spirit Armor': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Lifestrike': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Metal Skin': { type: 'vitality', tier: 3, color: '#81C784' },
                'Superior Stamina': { type: 'vitality', tier: 2, color: '#66BB6A' },
                'Combat Barrier': { type: 'vitality', tier: 3, color: '#81C784' },
                'Colossus': { type: 'vitality', tier: 3, color: '#81C784' },
                'Soul Rebirth': { type: 'vitality', tier: 3, color: '#81C784' },
                'Unstoppable': { type: 'vitality', tier: 3, color: '#81C784' }
            },
            'spirit': {
                'Extra Spirit': { type: 'spirit', tier: 1, color: '#9C27B0' },
                'Spirit Strike': { type: 'spirit', tier: 1, color: '#9C27B0' },
                'Mystic Burst': { type: 'spirit', tier: 1, color: '#9C27B0' },
                'Cold Front': { type: 'spirit', tier: 1, color: '#9C27B0' },
                'Decay': { type: 'spirit', tier: 1, color: '#9C27B0' },
                'Infuser': { type: 'spirit', tier: 1, color: '#9C27B0' },
                'Spirit Lifesteal': { type: 'spirit', tier: 1, color: '#9C27B0' },
                'Ammo Scavenger': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Bullet Resist Shredder': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Ethereal Shift': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Improved Burst': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Improved Cooldown': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Improved Reach': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Improved Spirit': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Quicksilver Reload': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Rapid Recharge': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Superior Cooldown': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Superior Duration': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Torment Pulse': { type: 'spirit', tier: 2, color: '#BA68C8' },
                'Boundless Spirit': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Curse': { type: 'spirit', tier: 3, color: '#CE93D8' },
                "Diviner's Kevlar": { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Echo Shard': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Escalating Exposure': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Frost Grenade': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Knockdown': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Magic Carpet': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Mystic Reverb': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Refresher': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Silence Glyph': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Slowing Hex': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Surge of Power': { type: 'spirit', tier: 3, color: '#CE93D8' },
                'Withering Whip': { type: 'spirit', tier: 3, color: '#CE93D8' }
            }
        };
    }

    getItemNameById(itemId) {
        const itemMap = {
            715762406: 'Basic Magazine',
            1342610602: 'Close Quarters',
            1458044103: 'Basic Magazine',
            1537272748: 'Extra Health',
            1656913918: 'Superior Cooldown',
            1835738020: 'Monster Rounds',
            2460791803: 'Berserker',
            2095565695: 'Extra Spirit',
            1282141666: 'Mystic Burst',
            1955841979: 'Metal Skin',
            339443430: 'Colossus',
            673001892: 'Ethereal Shift',
            3812615317: 'Echo Shard',
            3731635960: 'Mystic Shot',
            865846625: 'Titanic Magazine',
            1414319208: "Hunter's Aura",
            3977876567: 'Tesla Bullets',
            3970837787: 'Spirit Armor',
            3791587546: 'Bullet Armor',
            2712976700: 'Headshot Booster',
            1297326004: 'High-Velocity Mag',
            4247951502: 'Hollow Point Ward',
            2464663797: 'Rapid Rounds',
            2789634532: 'Restorative Shot',
            2829779411: 'Soul Shredder Bullets',
            2502493491: 'Toxic Bullets',
            2616956618: 'Active Reload',
            3925892505: 'Burst Fire',
            2928055866: 'Escalating Resilience',
            4015163062: 'Fleetfoot',
            1275334329: 'Intensifying Magazine',
            3423715847: 'Kinetic Dash',
            1831513066: 'Long Range',
            3536999506: 'Melee Lifesteal',
            2699888085: 'Point Blank',
            3606745462: 'Pristine Emblem',
            3508439251: 'Sharpshooter',
            3600633316: 'Slowing Bullets',
            3635659736: 'Spiritual Overflow',
            2693100866: 'Warp Stone',
            4181896897: 'Alchemical Fire',
            3725728185: 'Crippling Headshot',
            1890169084: 'Frenzy',
            1825436633: 'Glass Cannon',
            3726002346: 'Heroic Aura',
            1549482179: 'Inhibitor',
            2406133962: 'Lucky Shot',
            2547346736: 'Phantom Strike',
            3829306297: 'Ricochet',
            3742624969: 'Shadow Weave',
            3806203616: 'Silencer',
            4245983209: 'Vampiric Burst',
            2462996994: 'Leech',
            2863754076: 'Extra Regen',
            3675059374: 'Extra Stamina',
            2598983158: 'Sprint Boots',
            3730717068: 'Healing Rite',
            2712654494: "Enchanter's Barrier",
            1845966100: 'Enduring Speed',
            4033043084: 'Healing Booster',
            3965969966: 'Health Nova',
            2549827618: 'Majestic Leap',
            3738768485: 'Return Fire',
            4194838994: 'Restorative Locket',
            3986173616: 'Divine Barrier',
            1774871043: 'Fortitude',
            3537157157: 'Improved Bullet Armor',
            3732493568: 'Improved Spirit Armor',
            1751689003: 'Lifestrike',
            1829488953: 'Superior Stamina',
            3534253000: 'Combat Barrier',
            3984996802: 'Soul Rebirth',
            1743913723: 'Unstoppable',
            3677653320: 'Spirit Strike',
            3702319013: 'Cold Front',
            859037655: 'Decay',
            3574779418: 'Infuser',
            1673325555: 'Spirit Lifesteal',
            3655967536: 'Ammo Scavenger',
            2978949851: 'Bullet Resist Shredder',
            3704089726: 'Improved Burst',
            3754524659: 'Improved Cooldown',
            2944647108: 'Improved Reach',
            3792327923: 'Improved Spirit',
            4226924901: 'Quicksilver Reload',
            3984263060: 'Rapid Recharge',
            1723652463: 'Superior Duration',
            3991092218: 'Torment Pulse',
            1833936772: 'Boundless Spirit',
            1845815269: 'Curse',
            3701569419: "Diviner's Kevlar",
            2978738440: 'Escalating Exposure',
            3785419690: 'Frost Grenade',
            1743013306: 'Knockdown',
            3984079998: 'Magic Carpet',
            1729727717: 'Mystic Reverb',
            3802996421: 'Refresher',
            1722829208: 'Silence Glyph',
            3742779730: 'Slowing Hex',
            3706103885: 'Surge of Power',
            2995023008: 'Withering Whip'
        };
        return itemMap[itemId] || `Unknown Item (${itemId})`;
    }

    getItemData(itemName) {
        if (this.itemCache.has(itemName)) {
            return this.itemCache.get(itemName);
        }

        // Unknown Item (ID) 형태 처리
        let actualItemName = itemName;
        if (itemName && itemName.startsWith('Unknown Item (') && itemName.endsWith(')')) {
            const itemId = itemName.match(/Unknown Item \((\d+)\)/)?.[1];
            if (itemId) {
                actualItemName = this.getItemNameById(parseInt(itemId));
                console.log(`🔄 아이템 ID 매핑: ${itemName} → ${actualItemName}`);
            }
        }

        // Fallback 데이터에서 검색
        for (const category of Object.values(this.fallbackItems)) {
            if (category[actualItemName]) {
                const itemData = {
                    name: actualItemName,
                    ...category[actualItemName],
                    image: this.getItemImageUrl(actualItemName)
                };
                this.itemCache.set(itemName, itemData);
                return itemData;
            }
        }

        // Unknown Item 처리
        const unknownItem = {
            name: actualItemName,
            type: 'unknown',
            tier: 1,
            color: '#666666',
            image: this.getItemImageUrl('Basic Magazine')
        };
        this.itemCache.set(itemName, unknownItem);
        return unknownItem;
    }

    getItemImageUrl(itemName) {
        // 새로운 Final Items 로직을 사용하도록 리다이렉트
        return window.getDeadlockApiItemUrl ? window.getDeadlockApiItemUrl(itemName) : `https://assets-bucket.deadlock-api.com/assets-api-res/images/items/weapon/basic_magazine_sm.png`;
    }
}

// 폴백 아이템 매핑 함수들
function getKoreanItemName(itemId) {
    const itemMap = {
        // 무기 아이템 (Weapon Items)
        715762406: '확장 탄창',
        1342610602: '고마력 탄환',
        1458044103: '기본 탄창',
        1835738020: '몬스터 탄환',
        2460791803: '광전사',
        3977876567: '테슬라 탄환',
        3731635960: '신비한 정확도',
        865846625: '거대한 탄창',
        1414319208: '사냥꾼의 오라',
        
        // 생명력 아이템 (Vitality Items)
        1537272748: '추가 체력',
        3970837787: '정신력 갑옷',
        3791587546: '총알 갑옷',
        2863754076: '추가 재생',
        3675059374: '추가 지구력',
        2598983158: '스프린트 부츠',
        3730717068: '치유 의식',
        1845966100: '지속 속도',
        4033043084: '치유 증강기',
        1955841979: '금속 피부',
        339443430: '거신상',
        
        // 정신력 아이템 (Spirit Items)
        2095565695: '추가 정신력',
        1282141666: '신비한 폭발',
        3677653320: '정신력 타격',
        3702319013: '한파',
        859037655: '부패',
        3574779418: '주입기',
        1673325555: '정신력 흡혈',
        673001892: '이더 변환',
        1656913918: '상급 쿨다운',
        3754524659: '향상된 쿨다운',
        3812615317: '메아리 파편',
        1729727717: '신비한 잔향',
        3802996421: '리프레셔'
    };
    return itemMap[itemId] || `Unknown Item (${itemId})`;
}

function getItemImageUrl(itemName) {
    // 아이템 페이지와 동일한 매핑 사용 - 한국어 + 영어 모두 지원
    const imageMap = {
        // 무기 아이템 (한국어)
        '기본 탄창': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/basic_magazine_sm.webp',
        '헤드샷 부스터': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/headshot_booster_sm.webp',
        '고속탄': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/high_velocity_rounds_sm.webp',
        '몬스터 탄환': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/monster_rounds_sm.webp',
        '고속 사격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/rapid_rounds_sm.webp',
        '회복 사격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/restorative_shot_sm.webp',
        '능동 재장전': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/active_reload_sm.webp',
        '백스태버': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/backstabber_sm.webp',
        '신속한 발': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/fleetfoot_sm.webp',
        '강화 탄창': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/intensifying_magazine_sm.webp',
        '역동적 돌진': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/kinetic_dash_sm.webp',
        '장거리': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/long_range_sm.webp',
        '근접 돌격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/melee_charge_sm.webp',
        '신비한 사격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/mystic_shot_sm.webp',
        '오프닝 라운드': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/opening_rounds_sm.webp',
        '둔화 탄환': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/slowing_bullets_sm.webp',
        '정신 파쇄탄': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/spirit_shredder_bullets_sm.webp',
        '분산 사격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/split_shot_sm.webp',
        '신속한 타격자': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/swift_striker_sm.webp',
        '거대한 탄창': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/titanic_magazine_sm.webp',
        '약화 헤드샷': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/weakening_headshot_sm.webp',
        '연금술 화염': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/alchemical_fire_sm.webp',
        '광전사': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/berserker_sm.webp',
        '피의 공물': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/blood_tribute_sm.webp',
        '점사': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/burst_fire_sm.webp',
        '컬티스트 희생': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/cultist_sacrifice_sm.webp',
        '확대되는 저항': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/escalating_resilience_sm.webp',
        '고속 사격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/express_shot_sm.webp',
        '헤드헌터': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/headhunter_sm.webp',
        '영웅의 오라': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/heroic_aura_sm.webp',
        '할로우 포인트': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/hollow_point_sm.webp',
        '사냥꾼의 오라': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/hunters_aura_sm.webp',
        '근거리 사격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/point_blank_sm.webp',
        '명사수': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/sharp_shooter_sm.webp',
        '주문술사 헤드샷': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/spellslinger_headshots_sm.webp',
        '테슬라 탄환': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/tesla_bullets_sm.webp',
        '독성 탄환': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/toxic_bullets_sm.webp',
        '무거운 사격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/weighted_shots_sm.webp',
        '방어 관통탄': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/armor_piercing_rounds_sm.webp',
        '축전기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/capacitor_sm.webp',
        '치명적 헤드샷': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/crippling_headshot_sm.webp',
        '분쇄하는 주먹': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/crushing_fists_sm.webp',
        '광란': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/frenzy_sm.webp',
        '유리 대포': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/glass_cannon_sm.webp',
        '행운의 사격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/lucky_shot_sm.webp',
        '도탄': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/ricochet_sm.webp',
        '그림자 직조': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/shadow_weave_sm.webp',
        '소음기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/silencer_sm.webp',
        '주문술사': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/spell_slinger_sm.webp',
        '영적 넘침': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/spiritual_overflow_sm.webp',

        // 활력 아이템 (한국어)
        '추가 체력': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_health_sm.webp',
        '추가 재생': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_regen_sm.webp',
        '추가 스태미나': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_stamina_sm.webp',
        '치유 의식': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_rite_sm.webp',
        '근접 흡혈': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/melee_lifesteal_sm.webp',
        '반박': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/rebuttal_sm.webp',
        '달리기 부츠': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/sprint_boots_sm.webp',
        '전투 조끼': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/battle_vest_sm.webp',
        '탄환 흡혈': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/bullet_lifesteal_sm.webp',
        '디버프 감소기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/debuff_reducer_sm.webp',
        '마법사의 문장': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/enchanters_emblem_sm.webp',
        '지속 속도': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/enduring_speed_sm.webp',
        '수호 와드': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/guardian_ward_sm.webp',
        '치유 차단': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healbane_sm.webp',
        '치유 부스터': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_booster_sm.webp',
        '반응 방벽': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/reactive_barrier_sm.webp',
        '회복 목걸이': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/restorative_locket_sm.webp',
        '반격': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/return_fire_sm.webp',
        '정신 흡혈': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/spirit_lifesteal_sm.webp',
        '정신 보호막': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/spirit_shielding_sm.webp',
        '무기 보호막': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/weapon_shielding_sm.webp',
        '탄환 저항': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/bullet_resilience_sm.webp',
        '주문 차단': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/counterspell_sm.webp',
        '디버프 제거': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/debuff_remover_sm.webp',
        '불굴': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/fortitude_sm.webp',
        '분노 황홀': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/fury_trance_sm.webp',
        '치유 노바': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_nova_sm.webp',
        '생명력 강타': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/lifestrike_sm.webp',
        '장엄한 도약': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/majestic_leap_sm.webp',
        '금속 피부': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/metal_skin_sm.webp',
        '구조 광선': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/rescue_beam_sm.webp',
        '정신 저항': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/spirit_resilience_sm.webp',
        '스태미나 숙련': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/stamina_mastery_sm.webp',
        '트로피 수집가': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/trophy_collector_sm.webp',
        '베일 워커': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/veil_walker_sm.webp',
        '워프 스톤': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/warp_stone_sm.webp',
        '죽음 속이기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/cheat_death_sm.webp',
        '거신': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/colossus_sm.webp',
        '신성한 방벽': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/divine_barrier_sm.webp',
        '점술사의 케블라': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/diviners_kevlar_sm.webp',
        '치유 템포': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_tempo_sm.webp',
        '주입기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/infuser_sm.webp',
        '억제제': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/inhibitor_sm.webp',
        '저거너트': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/juggernaut_sm.webp',
        '거머리': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/leech_sm.webp',
        '팬텀 스트라이크': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/phantom_strike_sm.webp',
        '장갑 갑옷': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/plated_armor_sm.webp',
        '흡수 탄환': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/siphon_bullets_sm.webp',
        '주문 차단기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/spellbreaker_sm.webp',
        '저지불가': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/unstoppable_sm.webp',
        '흡혈 폭발': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/vampiric_burst_sm.webp',
        '마녀 갑옷': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/witchmail_sm.webp',

        // 정신 아이템 (한국어)
        '추가 충전': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/extra_charge_sm.webp',
        '추가 정신력': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/extra_spirit_sm.webp',
        '신비한 폭발': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_burst_sm.webp',
        '신비한 사거리': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_reach_sm.webp',
        '신비한 재생': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_regen_sm.webp',
        '녹슨 총신': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/rusted_barrel_sm.webp',
        '정신 강타': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_strike_sm.webp',
        '비전 쇄도': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/arcane_surge_sm.webp',
        '탄환 저항 파쇄기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/bullet_resist_shredder_sm.webp',
        '한랭 전선': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/cold_front_sm.webp',
        '개선된 재사용 대기시간': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_cooldown_sm.webp',
        '지속시간 연장기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/duration_extender_sm.webp',
        '개선된 정신력': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_spirit_sm.webp',
        '신비한 둔화': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_slow_sm.webp',
        '신비한 취약': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_vulnerability_sm.webp',
        '신속 재장전': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/quicksilver_reload_sm.webp',
        '둔화 주문': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/slowing_hex_sm.webp',
        '정신 흡수': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_sap_sm.webp',
        '억제기': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/suppressor_sm.webp',
        '부패': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/decay_sm.webp',
        '무장 해제 주문': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/disarming_hex_sm.webp',
        '거대한 확장': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/greater_expansion_sm.webp',
        '넉다운': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/knockdown_sm.webp',
        '빛나는 재생': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/radiant_regeneration_sm.webp',
        '빠른 충전': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/rapid_recharge_sm.webp',
        '침묵 문양': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/silence_glyph_sm.webp',
        '정신 강탈': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_snatch_sm.webp',
        '우월한 재사용 대기시간': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/superior_cooldown_sm.webp',
        '우월한 지속시간': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/superior_duration_sm.webp',
        '힘의 쇄도': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/surge_of_power_sm.webp',
        '탱크버스터': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/tankbuster_sm.webp',
        '고통 파동': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/torment_pulse_sm.webp',
        '극지 돌풍': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/arctic_blast_sm.webp',
        '무한한 정신력': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/boundless_spirit_sm.webp',
        '저주': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/curse_sm.webp',
        '메아리 파편': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/echo_shard_sm.webp',
        '확대되는 노출': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/escalating_exposure_sm.webp',
        '이더리얼 시프트': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/ethereal_shift_sm.webp',
        '집중 렌즈': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/focus_lens_sm.webp',
        '번개 두루마리': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/lightning_scroll_sm.webp',
        '마법 카펫': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/magic_carpet_sm.webp',
        '수은 대형 권총': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mercurial_magnum_sm.webp',
        '신비한 잔향': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_reverb_sm.webp',
        '리프레셔': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/refresher_sm.webp',
        '재앙': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/scourge_sm.webp',
        '정신 연소': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_burn_sm.webp',
        '초월적 재사용 대기시간': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/transcendent_cooldown_sm.webp',
        '소용돌이 거미줄': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/vortex_web_sm.webp',

        // 영어 이름 지원 (게임 API에서 영어로 올 경우)
        'Basic Magazine': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/basic_magazine_sm.webp',
        'Headshot Booster': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/headshot_booster_sm.webp',
        'High-Velocity Rounds': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/high_velocity_rounds_sm.webp',
        'Monster Rounds': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/monster_rounds_sm.webp',
        'Rapid Rounds': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/rapid_rounds_sm.webp',
        'Restorative Shot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/restorative_shot_sm.webp',
        'Active Reload': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/active_reload_sm.webp',
        'Backstabber': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/backstabber_sm.webp',
        'Fleetfoot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/fleetfoot_sm.webp',
        'Berserker': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/berserker_sm.webp',
        'Tesla Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/tesla_bullets_sm.webp',
        'Mystic Shot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/mystic_shot_sm.webp',
        'Titanic Magazine': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/titanic_magazine_sm.webp',
        'Hunter\'s Aura': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/hunters_aura_sm.webp',
        'Glass Cannon': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/glass_cannon_sm.webp',
        'Extra Health': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_health_sm.webp',
        'Extra Regen': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_regen_sm.webp',
        'Extra Stamina': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_stamina_sm.webp',
        'Sprint Boots': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/sprint_boots_sm.webp',
        'Healing Rite': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_rite_sm.webp',
        'Enduring Speed': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/enduring_speed_sm.webp',
        'Metal Skin': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/metal_skin_sm.webp',
        'Colossus': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/colossus_sm.webp',
        'Extra Spirit': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/extra_spirit_sm.webp',
        'Mystic Burst': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_burst_sm.webp',
        'Spirit Strike': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_strike_sm.webp',
        'Cold Front': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/cold_front_sm.webp',
        'Decay': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/decay_sm.webp',
        'Infuser': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/infuser_sm.webp',
        'Superior Cooldown': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/superior_cooldown_sm.webp',
        'Improved Cooldown': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_cooldown_sm.webp',
        'Echo Shard': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/echo_shard_sm.webp',
        'Mystic Reverb': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_reverb_sm.webp',
        'Refresher': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/refresher_sm.webp',
        'Healing Booster': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_booster_sm.webp',
        'Melee Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/melee_lifesteal_sm.webp',
        'Improved Reach': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_reach_sm.webp'
    };
    
    // 정확한 매칭 먼저 시도
    if (imageMap[itemName]) {
        return imageMap[itemName];
    }
    
    // 부분 매칭 시도 (Unknown Item (ID) 케이스)
    const unknownItemMatch = itemName.match(/Unknown Item \((\d+)\)/);
    if (unknownItemMatch) {
        // ID 기반으로 아이템 매핑 시도
        const itemId = parseInt(unknownItemMatch[1]);
        console.log(`🔍 Unknown Item ID: ${itemId} - 아이템 ID 기반 매핑 시도...`);
        
        // 아이템 ID와 영어 이름 매핑 (imageMap과 일치하도록 영어명 사용)
        const itemIdToName = {
            // 무기 아이템 (Weapon Items)
            715762406: 'Basic Magazine',
            1342610602: 'Close Quarters',
            1437614329: 'Headshot Booster',
            4072270083: 'High-Velocity Mag',
            2220233739: 'Hollow Point Ward',
            1009965641: 'Monster Rounds',
            4147641675: 'Rapid Rounds',
            499683006: 'Restorative Shot',
            1842576017: 'Active Reload',
            393974127: 'Berserker',
            2981692841: 'Escalating Resilience',
            4139877411: 'Fleetfoot',
            1414319208: "Hunter's Aura",
            509856396: 'Kinetic Dash',
            3633614685: 'Long Range',
            2824119765: 'Melee Lifesteal',
            3731635960: 'Mystic Shot',
            865846625: 'Titanic Magazine',
            3977876567: 'Tesla Bullets',
            690458959: 'Rapid Rounds',
            1250307611: 'Restorative Shot',
            1396247347: 'Monster Rounds',
            
            // 활력 아이템 (Vitality Items)
            1537272748: 'Extra Health',
            3970837787: 'Spirit Armor',
            3791587546: 'Bullet Armor',
            2863754076: 'Extra Regen',
            3675059374: 'Extra Stamina',
            2598983158: 'Sprint Boots',
            3730717068: 'Healing Rite',
            1845966100: 'Enduring Speed',
            4033043084: 'Healing Booster',
            1955841979: 'Metal Skin',
            339443430: 'Colossus',
            7409189: 'Healing Booster',
            2463960640: 'Extra Health',
            2061574352: 'Melee Lifesteal',
            2121044373: 'Healing Rite',
            
            // 정신 아이템 (Spirit Items)
            2095565695: 'Extra Spirit',
            1282141666: 'Mystic Burst',
            3677653320: 'Spirit Strike',
            3702319013: 'Cold Front',
            859037655: 'Decay',
            3574779418: 'Infuser',
            1673325555: 'Spirit Lifesteal',
            673001892: 'Ethereal Shift',
            1656913918: 'Superior Cooldown',
            3754524659: 'Improved Cooldown',
            3812615317: 'Echo Shard',
            1729727717: 'Mystic Reverb',
            3802996421: 'Refresher',
            3089858203: 'Improved Reach',
            1292979587: 'Mystic Burst',
            2951612397: 'Spirit Lifesteal'
        };
        
        const englishName = itemIdToName[itemId];
        if (englishName && imageMap[englishName]) {
            console.log(`✅ ID ${itemId} → ${englishName} → 이미지 매핑 성공`);
            return imageMap[englishName];
        }
    }
    
    // 기본 폴백 이미지
    return 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/basic_magazine_sm.webp';
}

function getItemType(itemId) {
    const weaponItems = [715762406, 1342610602, 1458044103, 1835738020, 2460791803, 3977876567, 3731635960, 865846625, 1414319208];
    const vitalityItems = [1537272748, 3970837787, 3791587546, 2863754076, 3675059374, 2598983158, 3730717068, 1845966100, 4033043084, 1955841979, 339443430];
    const spiritItems = [2095565695, 1282141666, 3677653320, 3702319013, 859037655, 3574779418, 1673325555, 673001892, 1656913918, 3754524659, 3812615317, 1729727717, 3802996421];
    
    if (weaponItems.includes(itemId)) return 'weapon';
    if (vitalityItems.includes(itemId)) return 'vitality';
    if (spiritItems.includes(itemId)) return 'spirit';
    return 'weapon';
}

function getItemCost(itemId) {
    const costs = {
        // Tier 1 - 800 소울
        715762406: 800, 1342610602: 800, 1458044103: 800, 1835738020: 800,
        1537272748: 800, 3970837787: 800, 3791587546: 800, 2863754076: 800, 3675059374: 800, 2598983158: 800, 3730717068: 800,
        2095565695: 800, 1282141666: 800, 3677653320: 800, 3702319013: 800, 859037655: 800, 3574779418: 800, 1673325555: 800,
        
        // Tier 2 - 1600 소울
        2460791803: 1600, 3977876567: 1600, 3731635960: 1600, 865846625: 1600, 1414319208: 1600,
        1845966100: 1600, 4033043084: 1600,
        673001892: 1600, 1656913918: 1600, 3754524659: 1600,
        
        // Tier 3 - 3200 소울
        1955841979: 3200, 339443430: 3200,
        3812615317: 3200, 1729727717: 3200, 3802996421: 3200
    };
    return costs[itemId] || 0;
}

function getItemTier(itemId) {
    const tier1 = [715762406, 1342610602, 1458044103, 1835738020, 1537272748, 3970837787, 3791587546, 2863754076, 3675059374, 2598983158, 3730717068, 2095565695, 1282141666, 3677653320, 3702319013, 859037655, 3574779418, 1673325555];
    const tier2 = [2460791803, 3977876567, 3731635960, 865846625, 1414319208, 1845966100, 4033043084, 673001892, 1656913918, 3754524659];
    const tier3 = [1955841979, 339443430, 3812615317, 1729727717, 3802996421];
    
    if (tier1.includes(itemId)) return 1;
    if (tier2.includes(itemId)) return 2;
    if (tier3.includes(itemId)) return 3;
    return 1;
}

// 매치 히스토리 표시 - deadlock-api.com 스타일
function displayMatchHistory(matches) {
    const matchesList = document.getElementById('matches-list');
    
    console.log('🔄 deadlock-api.com 스타일 매치 표시 시작:', matches.length, '개');
    
    try {
        if (!Array.isArray(matches) || matches.length === 0) {
            matchesList.innerHTML = '<p style="color: #94a3b8; text-align: center;">최근 매치 데이터가 없습니다.</p>';
            return;
        }
        
        // Player_숫자 형태에서 실제 플레이어 이름을 찾는 함수
        const getPlayerDisplayName = async (player) => {
            let displayName = player.name || player.player_name || player.steam_name || player.hero || 'Player';
            
            // Player_숫자 패턴 감지 (예: Player_92418199)
            const playerIdMatch = displayName.match(/^Player_(\d+)$/);
            if (playerIdMatch) {
                const playerId = playerIdMatch[1];
                console.log(`🔍 Player_${playerId} 패턴 감지, 실제 플레이어 정보 API 호출 중...`);
                
                try {
                    // 실제 플레이어 정보를 API에서 가져오기
                    const response = await fetch(`/api/v1/players/${playerId}`);
                    if (response.ok) {
                        const playerData = await response.json();
                        const realName = playerData.name || playerData.player_name || playerData.steam_name;
                        if (realName && realName !== 'undefined' && realName !== playerId) {
                            console.log(`✅ Player_${playerId} → 실제 이름: ${realName}`);
                            return realName;
                        }
                    }
                } catch (error) {
                    console.error(`❌ Player_${playerId} 정보 가져오기 실패:`, error);
                }
                
                // API 호출이 실패하면 플레이어 ID만 표시
                return `Player #${playerId}`;
            }
            
            // 일반적인 경우
            return displayName === 'undefined' || !displayName ? player.hero || 'Player' : displayName;
        };

        const getHeroImage = (heroName) => {
            const heroImageMap = {
                'Abrams': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/bull_mm.webp',
                'Bebop': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/bebop_mm.webp',
                'Calico': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/nano_mm.webp',
                'Dynamo': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/sumo_mm.webp',
                'Grey Talon': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/archer_mm.webp',
                'Haze': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/haze_mm.webp',
                'Infernus': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/inferno_mm.webp',
                'Ivy': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/tengu_mm.webp',
                'Kelvin': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/kelvin_mm.webp',
                'Mo & Krill': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/digger_mm.webp',
                'Paradox': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/chrono_mm.webp',
                'Pocket': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/synth_mm.webp',
                'Seven': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/gigawatt_mm.webp',
                'Viper': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viper_mm.webp',
                'Vyper': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viper_mm.webp',
                'Lady Geist': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/lady_geist_mm.webp',
                'Lash': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/lash_mm.webp',
                'McGinnis': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/mcginnis_mm.webp',
                'Mo & Krill': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/digger_mm.webp',
                'Paradox': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/chrono_mm.webp',
                'Pocket': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/synth_mm.webp',
                'Seven': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/gigawatt_mm.webp',
                'Shiv': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/shiv_mm.webp',
                'Viper': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viper_mm.webp',
                'Viscous': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viscous_mm.webp',
                'Warden': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/warden_mm.webp',
                'Vyper': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/viper_mm.webp',
                'Holliday': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/astro_mm.webp',
                'Mirage': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/mirage_mm.webp',
                'Wraith': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/wraith_mm.webp',
                'Yamato': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/yamato_mm.webp',
                'Sinclair': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/sinclair_mm.webp',
                'Vindicta': 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/vindicta_mm.webp'
            };
            return heroImageMap[heroName] || 'https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/abrams_mm.webp';
        };
        
        const formatDate = (dateString) => {
            try {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return '알 수 없음';
                
                const now = new Date();
                const diffHours = Math.floor((now - date) / (1000 * 60 * 60));
                
                if (diffHours < 1) return '방금 전';
                if (diffHours < 24) return `${diffHours}시간 전`;
                const diffDays = Math.floor(diffHours / 24);
                if (diffDays < 7) return `${diffDays}일 전`;
                return date.toLocaleDateString('ko-KR');
            } catch (error) {
                return '알 수 없음';
            }
        };
        
        // 정확한 아이템 이미지 매핑 함수
        const getItemImage = (itemNameOrId) => {
            // 실제 Deadlock API에서 사용하는 아이템 매핑
            const itemImageMap = {
                // Weapon Items
                'Basic Magazine': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/basic_magazine.webp',
                'Close Quarters': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/close_quarters.webp',
                'Headshot Booster': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/headshot_booster.webp',
                'High-Velocity Mag': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/high_velocity_mag.webp',
                'Hollow Point Ward': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/hollow_point_ward.webp',
                'Monster Rounds': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/monster_rounds.webp',
                'Rapid Rounds': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/rapid_rounds.webp',
                'Restorative Shot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/restorative_shot.webp',
                'Soul Shredder Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/soul_shredder_bullets.webp',
                'Titanic Magazine': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/titanic_magazine.webp',
                'Toxic Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/toxic_bullets.webp',
                'Active Reload': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/active_reload.webp',
                'Berserker': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/berserker.webp',
                'Burst Fire': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/burst_fire.webp',
                'Escalating Resilience': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/escalating_resilience.webp',
                'Fleetfoot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/fleetfoot.webp',
                'Hunter\'s Aura': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/hunters_aura.webp',
                'Intensifying Magazine': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/intensifying_magazine.webp',
                'Kinetic Dash': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/kinetic_dash.webp',
                'Long Range': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/long_range.webp',
                'Melee Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/melee_lifesteal.webp',
                'Mystic Shot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/mystic_shot.webp',
                'Point Blank': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/point_blank.webp',
                'Pristine Emblem': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/pristine_emblem.webp',
                'Sharpshooter': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/sharpshooter.webp',
                'Slowing Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/slowing_bullets.webp',
                'Spiritual Overflow': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/spiritual_overflow.webp',
                'Tesla Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/tesla_bullets.webp',
                'Warp Stone': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/warp_stone.webp',
                'Alchemical Fire': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/alchemical_fire.webp',
                'Crippling Headshot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/crippling_headshot.webp',
                'Frenzy': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/frenzy.webp',
                'Glass Cannon': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/glass_cannon.webp',
                'Heroic Aura': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/heroic_aura.webp',
                'Inhibitor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/inhibitor.webp',
                'Lucky Shot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/lucky_shot.webp',
                'Phantom Strike': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/phantom_strike.webp',
                'Ricochet': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/ricochet.webp',
                'Shadow Weave': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/shadow_weave.webp',
                'Silencer': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/silencer.webp',
                'Vampiric Burst': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/vampiric_burst.webp',
                'Leech': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/leech.webp',
                
                // Vitality Items
                'Extra Health': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_health.webp',
                'Extra Regen': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_regen.webp',
                'Extra Stamina': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_stamina.webp',
                'Melee Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/melee_lifesteal.webp',
                'Sprint Boots': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/sprint_boots.webp',
                'Healing Rite': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_rite.webp',
                'Bullet Armor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/bullet_armor.webp',
                'Spirit Armor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/spirit_armor.webp',
                'Enchanter\'s Barrier': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/enchanters_barrier.webp',
                'Enduring Speed': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/enduring_speed.webp',
                'Healing Booster': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_booster.webp',
                'Health Nova': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/health_nova.webp',
                'Majestic Leap': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/majestic_leap.webp',
                'Return Fire': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/return_fire.webp',
                'Restorative Locket': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/restorative_locket.webp',
                'Divine Barrier': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/divine_barrier.webp',
                'Fortitude': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/fortitude.webp',
                'Improved Bullet Armor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/improved_bullet_armor.webp',
                'Improved Spirit Armor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/improved_spirit_armor.webp',
                'Lifestrike': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/lifestrike.webp',
                'Metal Skin': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/metal_skin.webp',
                'Superior Stamina': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/superior_stamina.webp',
                'Combat Barrier': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/combat_barrier.webp',
                'Colossus': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/colossus.webp',
                'Leech': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/leech.webp',
                'Soul Rebirth': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/soul_rebirth.webp',
                'Unstoppable': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/unstoppable.webp',
                
                // Spirit Items
                'Extra Spirit': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/extra_spirit.webp',
                'Spirit Strike': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_strike.webp',
                'Mystic Burst': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_burst.webp',
                'Cold Front': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/cold_front.webp',
                'Decay': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/decay.webp',
                'Infuser': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/infuser.webp',
                'Spirit Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_lifesteal.webp',
                'Ammo Scavenger': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/ammo_scavenger.webp',
                'Bullet Resist Shredder': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/bullet_resist_shredder.webp',
                'Ethereal Shift': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/ethereal_shift.webp',
                'Improved Burst': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_burst.webp',
                'Improved Cooldown': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_cooldown.webp',
                'Improved Reach': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_reach.webp',
                'Improved Spirit': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_spirit.webp',
                'Quicksilver Reload': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/quicksilver_reload.webp',
                'Rapid Recharge': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/rapid_recharge.webp',
                'Spirit Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_lifesteal.webp',
                'Superior Cooldown': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/superior_cooldown.webp',
                'Superior Duration': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/superior_duration.webp',
                'Torment Pulse': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/torment_pulse.webp',
                'Boundless Spirit': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/boundless_spirit.webp',
                'Curse': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/curse.webp',
                'Diviner\'s Kevlar': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/diviners_kevlar.webp',
                'Echo Shard': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/echo_shard.webp',
                'Escalating Exposure': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/escalating_exposure.webp',
                'Frost Grenade': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/frost_grenade.webp',
                'Knockdown': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/knockdown.webp',
                'Magic Carpet': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/magic_carpet.webp',
                'Mystic Reverb': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_reverb.webp',
                'Refresher': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/refresher.webp',
                'Silence Glyph': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/silence_glyph.webp',
                'Slowing Hex': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/slowing_hex.webp',
                'Surge of Power': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/surge_of_power.webp',
                'Withering Whip': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/withering_whip.webp'
            };
            
            // 아이템 이름으로 먼저 찾기
            if (itemImageMap[itemNameOrId]) {
                return itemImageMap[itemNameOrId];
            }
            
            // ID로 찾기 (필요한 경우)
            // TODO: API에서 오는 실제 아이템 ID 매핑 추가
            
            // 기본 이미지 (카테고리별)
            const weaponDefault = 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/basic_magazine.webp';
            const vitalityDefault = 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_health.webp';
            const spiritDefault = 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/extra_spirit.webp';
            
            return weaponDefault; // 기본값
        };
        
        // 아이템 카테고리 결정 함수
        const getItemCategory = (itemNameOrId) => {
            const weaponItems = [
                'Basic Magazine', 'Close Quarters', 'Headshot Booster', 'High-Velocity Mag', 'Hollow Point Ward',
                'Monster Rounds', 'Rapid Rounds', 'Restorative Shot', 'Soul Shredder Bullets', 'Titanic Magazine',
                'Toxic Bullets', 'Active Reload', 'Berserker', 'Burst Fire', 'Escalating Resilience', 'Fleetfoot',
                'Hunter\'s Aura', 'Intensifying Magazine', 'Kinetic Dash', 'Long Range', 'Melee Lifesteal',
                'Mystic Shot', 'Point Blank', 'Pristine Emblem', 'Sharpshooter', 'Slowing Bullets',
                'Spiritual Overflow', 'Tesla Bullets', 'Warp Stone', 'Alchemical Fire', 'Crippling Headshot',
                'Frenzy', 'Glass Cannon', 'Heroic Aura', 'Inhibitor', 'Lucky Shot', 'Phantom Strike',
                'Ricochet', 'Shadow Weave', 'Silencer', 'Vampiric Burst', 'Leech'
            ];
            
            const vitalityItems = [
                'Extra Health', 'Extra Regen', 'Extra Stamina', 'Melee Lifesteal', 'Sprint Boots', 'Healing Rite',
                'Bullet Armor', 'Spirit Armor', 'Enchanter\'s Barrier', 'Enduring Speed', 'Healing Booster',
                'Health Nova', 'Majestic Leap', 'Return Fire', 'Restorative Locket', 'Divine Barrier',
                'Fortitude', 'Improved Bullet Armor', 'Improved Spirit Armor', 'Lifestrike', 'Metal Skin',
                'Superior Stamina', 'Combat Barrier', 'Colossus', 'Soul Rebirth', 'Unstoppable'
            ];
            
            const spiritItems = [
                'Extra Spirit', 'Spirit Strike', 'Mystic Burst', 'Cold Front', 'Decay', 'Infuser',
                'Spirit Lifesteal', 'Ammo Scavenger', 'Bullet Resist Shredder', 'Ethereal Shift',
                'Improved Burst', 'Improved Cooldown', 'Improved Reach', 'Improved Spirit',
                'Quicksilver Reload', 'Rapid Recharge', 'Superior Cooldown', 'Superior Duration',
                'Torment Pulse', 'Boundless Spirit', 'Curse', 'Diviner\'s Kevlar', 'Echo Shard',
                'Escalating Exposure', 'Frost Grenade', 'Knockdown', 'Magic Carpet', 'Mystic Reverb',
                'Refresher', 'Silence Glyph', 'Slowing Hex', 'Surge of Power', 'Withering Whip'
            ];
            
            if (weaponItems.includes(itemNameOrId)) return 'weapon';
            if (vitalityItems.includes(itemNameOrId)) return 'vitality';
            if (spiritItems.includes(itemNameOrId)) return 'spirit';
            
            return 'weapon'; // 기본값
        };
        
        // deadlock-api.com 스타일 매치 카드 생성
        const matchCards = matches.map((match, index) => {
            try {
                // 안전한 데이터 추출
                const hero = match?.hero || 'Unknown';
                const result = match?.result || '알 수 없음';
                const isWin = result === '승리';
                const duration = match?.durationFormatted || match?.duration ? `${Math.floor(match.duration / 60)}:${(match.duration % 60).toString().padStart(2, '0')}` : '0:00';
                const kills = parseInt(match?.kills) || 0;
                const deaths = parseInt(match?.deaths) || 0;
                const assists = parseInt(match?.assists) || 0;
                const kda = match?.kda || '0.0';
                const souls = parseInt(match?.souls) || 0;
                const soulsPerMin = match?.soulsPerMin || Math.round(souls / (match?.duration || 1800) * 60);
                const playedAt = match?.playedAt || new Date().toISOString();
                const matchId = match?.matchId || 'Unknown';
                const teamRank = parseInt(match?.teamRank) || 6;
                const denies = parseInt(match?.denies) || 0;
                const netWorth = Math.round(souls / 1000 * 10) / 10; // 소울을 네트워스로 변환
                
                // 날짜 포맷팅 (deadlock-api.com 스타일: 08/10 03:25)
                const dateObj = new Date(playedAt);
                const dateStr = `${(dateObj.getMonth() + 1).toString().padStart(2, '0')}/${dateObj.getDate().toString().padStart(2, '0')} ${dateObj.getHours().toString().padStart(2, '0')}:${dateObj.getMinutes().toString().padStart(2, '0')}`;
                
                // 랭크 이름 변환 (팀 랭크를 실제 랭크로)
                const getRankName = (rank) => {
                    const rankMap = {
                        1: 'Eternus',
                        2: 'Phantom', 
                        3: 'Oracle',
                        4: 'Ritualist',
                        5: 'Alchemist',
                        6: 'Arcanist',
                        7: 'Seeker',
                        8: 'Initiate'
                    };
                    return rankMap[rank] || 'Arcanist';
                };
                
                const rankName = getRankName(teamRank);
                
                // 랭크 번호 매핑 (deadlock-api.com URL 구조에 맞춤)
                const getRankUrlNumber = (rankName) => {
                    const rankUrlMap = {
                        'Eternus': '1',
                        'Phantom': '1', 
                        'Oracle': '1',
                        'Ritualist': '4',
                        'Alchemist': '3',
                        'Arcanist': '4',
                        'Seeker': '2',
                        'Initiate': '8'
                    };
                    return rankUrlMap[rankName] || '4';
                };
                
                const rankUrlNumber = getRankUrlNumber(rankName);
                
                return `
                    <div class="deadlock-match-card">
                        <div class="deadlock-match-header">
                            <div class="match-outcome-info">
                                <span class="match-result-text ${isWin ? 'win' : 'loss'}">${isWin ? 'Win' : 'Loss'}</span>
                                <span class="match-type">Normal</span>
                                <span class="match-date">${dateStr}</span>
                            </div>
                            <div class="match-id-info">
                                <span class="match-id-label">Match ID: ${matchId}</span>
                                <span class="match-duration">${duration}</span>
                            </div>
                        </div>
                        
                        <div class="match-body">
                            <!-- 새로운 레이아웃: 개인 스탯 왼쪽, 팀 정보 오른쪽 -->
                            <div class="match-content-grid">
                                <!-- 왼쪽: 개인 스탯 영역 -->
                                <div class="match-personal-stats">
                                    <div class="hero-rank-section">
                                        <div class="hero-info-compact">
                                            <img src="${getHeroImage(hero)}" alt="${hero}" class="hero-avatar">
                                            <span class="hero-name-compact">${hero}</span>
                                        </div>
                                        <div class="rank-badge-compact">
                                            <img src="https://assets-bucket.deadlock-api.com/assets-api-res/images/ranks/rank${rankUrlNumber}/badge_sm_subrank${teamRank}.png" 
                                                 alt="${rankName}" 
                                                 class="rank-icon"
                                                 title="${rankName} ${teamRank}"
                                                 onerror="this.style.display='none';">
                                        </div>
                                    </div>
                                    
                                    <div class="personal-stats-grid">
                                        <div class="kda-display">
                                            <div class="kda-labels" style="font-size: 10px; color: #94A3B8; margin-bottom: 2px;">KILL / DEATH / ASSIST</div>
                                            <div class="kda-numbers-large">${kills} / ${deaths} / ${assists}</div>
                                            <div class="kda-ratio-text">${kda} KDA</div>
                                        </div>
                                        
                                        <div class="performance-display">
                                            <div class="stat-row">
                                                <span class="stat-label">SPM</span>
                                                <span class="stat-value">${soulsPerMin}</span>
                                            </div>
                                            <div class="stat-row">
                                                <span class="stat-label">Net Worth</span>
                                                <span class="stat-value">${netWorth}K</span>
                                            </div>
                                            <div class="stat-row">
                                                <span class="stat-label">Denies</span>
                                                <span class="stat-value">${denies}</span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- 아이템 영역도 개인 스탯에 포함 -->
                                    <div class="match-items-compact">
                                        <div class="items-label">Final Items</div>
                                        <div class="items-row" id="match-items-${index}">
                                            <!-- 아이템들이 여기 표시됩니다 -->
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 오른쪽: 팀 정보 영역 -->
                                <div class="match-teams">
                                    <div class="match-players" id="match-players-${index}">
                                        <!-- 플레이어 목록이 여기 표시됩니다 -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } catch (matchError) {
                console.error('매치 카드 생성 오류:', matchError, match);
                return `
                    <div class="match-card">
                        <div class="match-hero">
                            <img src="https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/abrams_mm.webp" alt="Unknown" class="match-hero-image">
                            <span class="match-hero-name">Unknown</span>
                        </div>
                        <div class="match-result">
                            <span class="result-text">데이터 오류</span>
                        </div>
                    </div>
                `;
            }
        });
        
        matchesList.innerHTML = matchCards.join('');
        
        // 매치 아이템 데이터와 플레이어 데이터를 즉시 로드하여 표시
        for (let index = 0; index < matches.length; index++) {
            const match = matches[index];
            const itemsContainer = document.getElementById(`match-items-${index}`);
            const playersContainer = document.getElementById(`match-players-${index}`);
            
            // 플레이어 목록 표시 (실제 매치 데이터 사용)
            if (playersContainer) {
                console.log(`🎮 매치 ${index} 플레이어 데이터 확인:`, match);
                
                // 실제 매치 데이터에서 플레이어 정보 추출
                let players = [];
                if (match.participants && match.participants.length > 0) {
                    console.log(`✅ 매치 ${index}: 실제 participants 데이터 사용 (${match.participants.length}명)`);
                    players = await Promise.all(match.participants.map(async (p, idx) => ({
                        hero: p.hero || 'Unknown',
                        name: await getPlayerDisplayName(p),
                        team: p.team || (idx < 6 ? 1 : 2), // 0-5번은 팀1, 6-11번은 팀2
                        account_id: p.account_id || p.steam_id
                    })));
                } else {
                    console.log(`⚠️ 매치 ${index}: participants 데이터가 없어 빈 배열 사용`);
                    players = []; // 빈 배열로 설정, 더미 데이터 사용 안함
                }
                
                console.log(`👥 매치 ${index} 사용할 플레이어 데이터:`, players);
                
                const getHeroApiUrl = (heroName) => {
                    const heroMap = {
                        'Infernus': 'infernus',
                        'Yamato': 'yamato',
                        'Holliday': 'holliday',
                        'Haze': 'haze',
                        'Lash': 'lash',
                        'Vindicta': 'vindicta',
                        'Bebop': 'bebop', 
                        'Shiv': 'shiv',
                        'Paradox': 'paradox',
                        'Calico': 'calico',
                        'Ivy': 'ivy',
                        'Abrams': 'abrams',
                        'Mo & Krill': 'mo_and_krill',
                        'McGinnis': 'mcginnis',
                        'Mirage': 'mirage',
                        'Grey Talon': 'grey_talon',
                        'Pocket': 'pocket',
                        'Viper': 'viper',
                        'Vyper': 'viper', // Viper의 대체 철자
                        'Dynamo': 'dynamo',
                        'Kelvin': 'kelvin',
                        'Lady Geist': 'lady_geist',
                        'Seven': 'seven',
                        'Warden': 'warden',
                        'Wraith': 'wraith',
                        'Viscous': 'viscous',
                        'Sinclair': 'sinclair',
                        'Atlas': 'sinclair',
                        // 새로운 영웅들 추가
                        'Trapper': 'trapper',
                        'Magician': 'sinclair', 
                        'Fathom': 'fathom',
                        'Wrecker': 'wrecker',
                        'Savage': 'savage',
                        'Forge': 'forge',
                        'Buttercup': 'buttercup',
                        'Cadence': 'cadence',
                        // Player나 Unknown 처리
                        'Player': 'abrams',
                        'Unknown': 'abrams',
                        'player': 'abrams',
                        'unknown': 'abrams',
                        '': 'abrams',
                        null: 'abrams',
                        undefined: 'abrams',
                        // 대소문자 변형
                        'infernus': 'infernus',
                        'yamato': 'yamato',
                        'holliday': 'holliday',
                        'haze': 'haze',
                        'lash': 'lash',
                        'vindicta': 'vindicta',
                        'bebop': 'bebop',
                        'shiv': 'shiv',
                        'paradox': 'paradox',
                        'calico': 'calico',
                        'ivy': 'ivy',
                        'abrams': 'abrams',
                        'mcginnis': 'mcginnis',
                        'mirage': 'mirage',
                        'pocket': 'pocket',
                        'viper': 'viper',
                        'dynamo': 'dynamo',
                        'kelvin': 'kelvin',
                        'seven': 'seven',
                        'warden': 'warden',
                        'wraith': 'wraith',
                        'viscous': 'viscous'
                    };
                    // 영웅 이름 정규화 및 fallback 처리
                    let normalizedName = '';
                    if (heroName && heroName !== null && heroName !== undefined) {
                        normalizedName = heroName.toString().trim();
                    }
                    
                    // 빈 문자열이나 "Player"인 경우 처리
                    if (!normalizedName || normalizedName === 'Player' || normalizedName === 'Unknown') {
                        normalizedName = 'Player';
                    }
                    
                    const heroKey = heroMap[normalizedName] || heroMap[normalizedName.toLowerCase()] || 'abrams';
                    return `https://assets-bucket.deadlock-api.com/assets-api-res/images/heroes/${heroKey}_mm.webp`;
                };
                
                if (players.length > 0) {
                    // 현재 사용자(aski)의 팀을 찾기 - account_id로도 확인
                    let currentUserTeam = 1;
                    let currentUserIndex = -1;
                    
                    // aski 사용자 찾기
                    for (let i = 0; i < players.length; i++) {
                        const p = players[i];
                        if (p.name === 'aski' || 
                            p.account_id === 54776284 || 
                            p.account_id === '54776284' ||
                            (p.name && p.name.includes('54776284'))) {
                            currentUserIndex = i;
                            currentUserTeam = p.team;
                            break;
                        }
                    }
                    
                    // 팀 분리
                    let myTeam = [];
                    let enemyTeam = [];
                    
                    // 사용자를 못찾으면 인덱스 기반으로 팀 구분 (강제로 6:6 분리)
                    if (currentUserIndex === -1) {
                        console.log('⚠️ 현재 사용자를 찾을 수 없음, 강제로 6:6 분리');
                        myTeam = players.slice(0, 6);  // 첫 6명
                        enemyTeam = players.slice(6, 12); // 나머지 6명
                    } else {
                        // 사용자를 찾았으면 팀 기반으로 분리
                        myTeam = players.filter(p => p.team === currentUserTeam);
                        enemyTeam = players.filter(p => p.team !== currentUserTeam);
                        
                        // 만약 팀 분리가 이상하면 (한 팀에 12명 등) 강제로 6:6 분리
                        if (myTeam.length === 12 || enemyTeam.length === 12 || myTeam.length === 0 || enemyTeam.length === 0) {
                            console.log('⚠️ 팀 분리 이상, 강제로 6:6 분리');
                            myTeam = players.slice(0, 6);
                            enemyTeam = players.slice(6, 12);
                        }
                    }
                    
                    console.log(`👥 현재 사용자 팀: ${currentUserTeam}, 우리팀: ${myTeam.length}명, 상대팀: ${enemyTeam.length}명`);
                    
                    // 우리팀 HTML 생성
                    const myTeamHTML = myTeam.map(player => `
                        <div class="flex items-center gap-2">
                            <picture>
                                <source srcset="${getHeroApiUrl(player.hero)}" type="image/webp">
                                <source srcset="${getHeroApiUrl(player.hero).replace('.webp', '.png')}" type="image/png">
                                <img loading="lazy" alt="${player.hero}" title="${player.hero}" 
                                     class="size-8 aspect-square w-6 h-6 rounded-full border border-border" 
                                     src="${getHeroApiUrl(player.hero)}">
                            </picture>
                            <span class="player-name-text w-32 truncate text-xs text-green-400" title="${player.name}">${player.name}</span>
                        </div>
                    `).join('');
                    
                    // 상대팀 HTML 생성
                    const enemyTeamHTML = enemyTeam.map(player => `
                        <div class="flex items-center gap-2">
                            <picture>
                                <source srcset="${getHeroApiUrl(player.hero)}" type="image/webp">
                                <source srcset="${getHeroApiUrl(player.hero).replace('.webp', '.png')}" type="image/png">
                                <img loading="lazy" alt="${player.hero}" title="${player.hero}" 
                                     class="size-8 aspect-square w-6 h-6 rounded-full border border-border" 
                                     src="${getHeroApiUrl(player.hero)}">
                            </picture>
                            <span class="player-name-text w-32 truncate text-xs text-red-400" title="${player.name}">${player.name}</span>
                        </div>
                    `).join('');
                    
                    playersContainer.innerHTML = `
                        <div class="teams-grid">
                            <!-- 팀 섹션 -->
                            <div class="team-section our-team">
                                ${myTeamHTML}
                            </div>
                            <div class="team-section enemy-team">
                                ${enemyTeamHTML}
                            </div>
                        </div>
                    `;
                } else {
                    // 플레이어 데이터가 없을 경우 로딩 메시지 표시
                    playersContainer.innerHTML = `
                        <div class="bg-muted flex items-start p-3 rounded">
                            <div class="w-full text-center text-xs text-muted-foreground py-2">
                                플레이어 정보 로딩 중...
                            </div>
                        </div>
                    `;
                }
            }
            
            if (itemsContainer) {
                console.log(`🎒 매치 ${index} 아이템 처리 시작:`, match);
                
                // 백엔드에서 처리된 아이템 데이터 사용 (finalItems 우선, 없으면 items)
                let itemsData = match.finalItems || match.items || [];
                
                console.log(`📦 매치 ${index} 사용할 아이템 데이터:`, itemsData);
                
                if (itemsData && itemsData.length > 0) {
                    // 게임 종료 시 최종 보유한 모든 아이템 표시
                    // sold_time이 없거나 0인 아이템들만 필터링 (판매되지 않은 아이템)
                    const finalItems = itemsData.filter(item => {
                        const soldTime = item.sold_time_s || item.soldTime || 0;
                        return !soldTime || soldTime === 0;
                    });
                    
                    console.log(`🏆 게임 종료 시 최종 보유 아이템 ${finalItems.length}개:`, finalItems.map(i => i.name));
                    
                    // deadlock-api.com과 동일한 Final Items 로직 (전역 함수로 생성)
                    window.getDeadlockApiItemUrl = function(itemName) {
                        // 정확한 deadlock-api.com 스타일 매핑 (kebab-case 변환 포함)
                        const directMappings = {
                            // Items I observed on deadlock-api.com:
                            'Arcane Surge': 'spirit/arcane_surge_sm',
                            "Enchanter's Emblem": 'vitality/enchanters_emblem_sm', 
                            'Rapid Recharge': 'spirit/rapid_recharge_sm',
                            'Tankbuster': 'spirit/tankbuster_sm',
                            'Boundless Spirit': 'spirit/boundless_spirit_sm',
                            'Leech': 'vitality/leech_sm',
                            'Mystic Shot': 'weapon/mystic_shot_sm',
                            'Trophy Collector': 'vitality/trophy_collector_sm',
                            'Greater Expansion': 'spirit/greater_expansion_sm',
                            'Debuff Remover': 'vitality/debuff_remover_sm',
                            'Transcendent Cooldown': 'spirit/transcendent_cooldown_sm',
                            'Arctic Blast': 'spirit/arctic_blast_sm',
                            'Extra Health': 'vitality/extra_health_sm',
                            'Titanic Magazine': 'weapon/titanic_magazine_sm',
                            'Long Range': 'weapon/long_range_sm',
                            'Battle Vest': 'vitality/battle_vest_sm',
                            'Glass Cannon': 'weapon/glass_cannon_sm',
                            'Extra Stamina': 'vitality/extra_stamina_sm',
                            'Swift Striker': 'weapon/swift_striker_sm',
                            'Bullet Lifesteal': 'vitality/bullet_lifesteal_sm',
                            'Express Shot': 'weapon/express_shot_sm',
                            'Return Fire': 'vitality/return_fire_sm',
                            'Radiant Regeneration': 'vitality/radiant_regeneration_sm',
                            'Healbane': 'vitality/healbane_sm',
                            'Bullet Resilience': 'vitality/bullet_resilience_sm',
                            'Spirit Resilience': 'vitality/spirit_resilience_sm',
                            'Siphon Bullets': 'weapon/siphon_bullets_sm',
                            'Mystic Burst': 'spirit/mystic_burst_sm',
                            'Cold Front': 'spirit/cold_front_sm',
                            'Superior Cooldown': 'spirit/superior_cooldown_sm',
                            'Mystic Expansion': 'spirit/mystic_expansion_sm',
                            'Extra Charge': 'spirit/extra_charge_sm',
                            'Improved Spirit': 'spirit/improved_spirit_sm',
                            'Compress Cooldown': 'spirit/compress_cooldown_sm',
                            'Sprint Boots': 'vitality/sprint_boots_sm',
                            'Superior Duration': 'spirit/superior_duration_sm',
                            'Kinetic Dash': 'weapon/kinetic_dash_sm',
                            'Burst Fire': 'weapon/burst_fire_sm',
                            'Berserker': 'weapon/berserker_sm',
                            'Quicksilver Reload': 'weapon/quicksilver_reload_sm',
                            'Ricochet': 'weapon/ricochet_sm',
                            'Vampiric Burst': 'weapon/vampiric_burst_sm',
                            'Lucky Shot': 'weapon/lucky_shot_sm',
                            'Mystic Vulnerability': 'spirit/mystic_vulnerability_sm',
                            'Mystic Slow': 'spirit/mystic_slow_sm',
                            'Decay': 'vitality/decay_sm',
                            'Mystic Regeneration': 'spirit/mystic_regeneration_sm',
                            'Warp Stone': 'spirit/warp_stone_sm',
                            'Majestic Leap': 'vitality/majestic_leap_sm',
                            'High-Velocity Rounds': 'weapon/high_velocity_rounds_sm',
                            'Enduring Speed': 'vitality/enduring_speed_sm',
                            'Headhunter': 'weapon/headhunter_sm',
                            'Opening Rounds': 'weapon/opening_rounds_sm',
                            'Sharpshooter': 'weapon/sharpshooter_sm',
                            'Spirit Strike': 'spirit/spirit_strike_sm',
                            'Spirit Lifesteal': 'vitality/spirit_lifesteal_sm',
                            'Crushing Fists': 'vitality/crushing_fists_sm',
                            'Healing Tempo': 'vitality/healing_tempo_sm',
                            'Torment Pulse': 'spirit/torment_pulse_sm',
                            'Phantom Strike': 'vitality/phantom_strike_sm',
                            'Healer Tempo': 'vitality/healer_tempo_sm',
                            'Lifestrike': 'vitality/lifestrike_sm',
                            'Spirit Snatch': 'spirit/spirit_snatch_sm',
                            'Cultist Sacrifice': 'spirit/cultist_sacrifice_sm',
                            'Toxic Bullets': 'weapon/toxic_bullets_sm',
                            'Stamina Mastery': 'vitality/stamina_mastery_sm',
                            'Mercurial Magnum': 'weapon/mercurial_magnum_sm',
                            'Suppressor': 'weapon/suppressor_sm',
                            'Escalating Resilience': 'weapon/escalating_resilience_sm',
                            'Surge of Power': 'spirit/surge_of_power_sm',
                            'Basic Magazine': 'weapon/basic_magazine_sm',
                            'Close Quarters': 'weapon/close_quarters_sm',
                            'Monster Rounds': 'weapon/monster_rounds_sm'
                        };
                        
                        // 직접 매핑에서 찾기
                        if (directMappings[itemName]) {
                            return `https://assets-bucket.deadlock-api.com/assets-api-res/images/items/${directMappings[itemName]}.png`;
                        }
                        
                        // 자동 변환 시도 (대부분의 아이템은 이름을 kebab-case로 변환하면 됨)
                        const kebabCase = itemName
                            .toLowerCase()
                            .replace(/['\s&]+/g, '_')
                            .replace(/_+/g, '_')
                            .replace(/^_|_$/g, '');
                        
                        // 카테고리 추정 (아이템 이름 기반)
                        const spiritKeywords = ['mystic', 'spirit', 'arcane', 'charge', 'recharge', 'surge', 'blast', 'expansion', 'cooldown', 'vulnerability', 'slow', 'regeneration', 'warp', 'burst', 'cold', 'compress', 'transcendent', 'boundless', 'greater', 'rapid', 'improved', 'superior', 'torment', 'snatch', 'cultist'];
                        const vitalityKeywords = ['health', 'armor', 'lifesteal', 'stamina', 'boots', 'emblem', 'vest', 'resilience', 'regeneration', 'healbane', 'bullet', 'debuff', 'remover', 'leech', 'trophy', 'collector', 'radiant', 'return', 'fire', 'siphon', 'battle', 'extra', 'enduring', 'majestic', 'leap', 'decay', 'crushing', 'healing', 'tempo', 'phantom', 'strike', 'lifestrike', 'mastery'];
                        
                        let category = 'weapon'; // default
                        const lowerName = itemName.toLowerCase();
                        
                        if (spiritKeywords.some(keyword => lowerName.includes(keyword))) {
                            category = 'spirit';
                        } else if (vitalityKeywords.some(keyword => lowerName.includes(keyword))) {
                            category = 'vitality';
                        }
                        
                        return `https://assets-bucket.deadlock-api.com/assets-api-res/images/items/${category}/${kebabCase}_sm.png`;
                    };
                    
                    // 간단한 12개 슬롯 배치 (deadlock-api.com 스타일)
                    const itemGridHTML = finalItems.slice(0, 12).map((item, index) => {
                        let itemName = item.name || `Item ${item.itemId || item.id || 'Unknown'}`;
                        const itemUrl = getDeadlockApiItemUrl(itemName);
                        
                        return `
                            <img loading="lazy" alt="${itemName}" title="${itemName}" 
                                 class="w-8 h-8 rounded border border-border" 
                                 src="${itemUrl}"
                                 onerror="this.style.opacity='0.3';">
                        `;
                    }).join('');
                    
                    // 빈 슬롯으로 12개 채우기
                    const emptySlots = Math.max(0, 12 - finalItems.length);
                    const emptyHTML = Array(emptySlots).fill('<div class="w-8 h-8 rounded border border-border bg-muted opacity-30"></div>').join('');
                    
                    itemsContainer.innerHTML = `
                        <div class="grid grid-cols-6 gap-1 w-fit">
                            ${itemGridHTML}${emptyHTML}
                        </div>
                    `;
                    console.log(`✅ 매치 ${index} 게임 종료 시 최종 보유 아이템 ${finalItems.length}개 표시 완료 (전체 ${itemsData.length}개 중)`);
                } else {
                    // 아이템 데이터가 없는 경우 - 바로 빈 슬롯 표시 (무한로딩 방지)
                    console.log(`⚠️ 매치 ${index}: 아이템 데이터 없음, 빈 슬롯 표시`);
                    
                    itemsContainer.innerHTML = `
                        <div class="grid grid-cols-6 gap-1 w-fit">
                            ${Array(12).fill('<div class="w-8 h-8 rounded border border-border bg-muted opacity-30"></div>').join('')}
                        </div>
                    `;
                    
                    // deadlock-api.com에서 실시간 매치 상세 정보를 가져와서 아이템 표시 (한 번만 시도)
                    if (!match._itemsRetried) {
                        match._itemsRetried = true; // 재시도 플래그 설정
                        setTimeout(async () => {
                        try {
                            console.log(`🔄 매치 ${match.matchId}: deadlock-api.com에서 실시간 final items 가져오는 중...`);
                            const matchDetailsResponse = await fetch(`/api/v1/matches/${match.matchId}/details`);
                            if (matchDetailsResponse.ok) {
                                const detailsData = await matchDetailsResponse.json();
                                console.log(`📡 매치 ${match.matchId} API 응답:`, detailsData);
                                
                                // 현재 표시중인 플레이어와 매칭되는 플레이어 찾기
                                if (detailsData.finalItemsData && detailsData.finalItemsData.length > 0) {
                                    // 영웅 이름이나 플레이어 이름으로 매칭 시도
                                    const currentPlayerData = detailsData.finalItemsData.find(playerData => 
                                        playerData.heroName === match.hero || 
                                        playerData.playerName === match.playerName
                                    );
                                    
                                    if (currentPlayerData && currentPlayerData.finalItems && currentPlayerData.finalItems.length > 0) {
                                        console.log(`✅ 매치 ${match.matchId}: ${currentPlayerData.heroName}의 final items ${currentPlayerData.finalItems.length}개 발견`);
                                        const finalItems = currentPlayerData.finalItems;
                                    
                                        // deadlock-api.com URL 구조로 아이템 표시 (12개 슬롯)
                                        const retryItemsHTML = finalItems.slice(0, 12).map((item, itemIndex) => {
                                            let itemName = item.name || `Item ${item.itemId || item.id || 'Unknown'}`;
                                            const itemUrl = getDeadlockApiItemUrl(itemName);
                                            
                                            return `
                                                <img loading="lazy" alt="${itemName}" title="${itemName}" 
                                                     class="w-8 h-8 rounded border border-border" 
                                                     src="${itemUrl}"
                                                     onerror="this.style.opacity='0.3';">
                                            `;
                                        }).join('');
                                        
                                        // 빈 슬롯으로 12개 채우기
                                        const emptySlots = Math.max(0, 12 - finalItems.length);
                                        const emptyHTML = Array(emptySlots).fill('<div class="w-8 h-8 rounded border border-border bg-muted opacity-30"></div>').join('');
                                        
                                        itemsContainer.innerHTML = `
                                            <div class="grid grid-cols-6 gap-1 w-fit">
                                                ${retryItemsHTML}${emptyHTML}
                                            </div>
                                        `;
                                        console.log(`✅ 매치 ${match.matchId}: deadlock-api.com에서 실시간으로 가져온 ${finalItems.length}개 final items 표시 완료`);
                                        return;
                                    } else {
                                        console.warn(`⚠️ 매치 ${match.matchId}: 현재 플레이어의 final items를 찾을 수 없음`);
                                    }
                                } else {
                                    console.warn(`⚠️ 매치 ${match.matchId}: deadlock-api.com에서 final items 데이터를 찾을 수 없음`);
                                }
                            }
                        } catch (retryError) {
                            console.error(`❌ 매치 ${index} 아이템 재시도 실패:`, retryError);
                        }
                        
                        // 최종적으로 실패한 경우 빈 슬롯 표시
                        itemsContainer.innerHTML = `
                            <div style="grid-column: 1/-1; text-align: center; color: #666; font-size: 11px; padding: 15px;">
                                <i class="fas fa-info-circle"></i> 게임 종료 시 아이템 정보 없음
                            </div>
                        `;
                        }, 1000 + index * 200); // 각 매치마다 약간의 지연을 두어 API 부하 방지
                    }
                }
            } else {
                console.error(`❌ 매치 ${index}: items-container 요소를 찾을 수 없음`);
            }
        }
        
        console.log('✅ 매치 히스토리 표시 완료');
        
    } catch (error) {
        console.error('❌ 매치 히스토리 표시 오류:', error);
        matchesList.innerHTML = '<p style="color: #ff6b6b; text-align: center;">매치 데이터 표시 중 오류가 발생했습니다.</p>';
    }
}

// 파티 스탯 표시
function displayPartyStats(partyStats) {
    const partyStatsList = document.getElementById('party-stats-list');
    
    try {
        console.log('👥 파티 스탯 표시 시작:', partyStats);
        
        if (!Array.isArray(partyStats) || partyStats.length === 0) {
            partyStatsList.innerHTML = '<p style="color: #999; text-align: center;">파티 데이터가 없습니다.</p>';
            return;
        }
        
        const formatDate = (dateString) => {
            try {
                if (!dateString) return '알 수 없음';
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return '알 수 없음';
                
                const now = new Date();
                const diffHours = Math.floor((now - date) / (1000 * 60 * 60));
                
                if (diffHours < 1) return '방금 전';
                if (diffHours < 24) return `${diffHours}시간 전`;
                const diffDays = Math.floor(diffHours / 24);
                if (diffDays < 7) return `${diffDays}일 전`;
                return date.toLocaleDateString('ko-KR');
            } catch (error) {
                return '알 수 없음';
            }
        };
        
        const partyCards = partyStats.map((member, index) => {
            try {
                // deadlock.coach 스타일 데이터 검증
                if (!member || !member.accountId || member.accountId === 'undefined' || member.accountId === null) {
                    console.log('⚠️ 유효하지 않은 파티 멤버 데이터:', member);
                    return ''; // 유효하지 않은 데이터는 표시하지 않음
                }
                
                const accountId = member.accountId;
                const name = member.name && member.name !== 'undefined' ? member.name : `Player_${accountId}`;
                const matches = parseInt(member.matches) || 0;
                const wins = parseInt(member.wins) || 0;
                const losses = parseInt(member.losses) || 0;
                const winRate = parseInt(member.winRate) || 0;
                const avgKda = member.avgKda || '0.0';
                const lastPlayed = member.lastPlayedTogether || null;
                
                return `
                    <div class="party-member" data-account-id="${accountId}">
                        <div class="party-member-avatar">
                            <img src="${member?.avatar || 'https://avatars.cloudflare.steamstatic.com/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg'}" 
                                 alt="${name}" 
                                 onerror="this.src='https://avatars.cloudflare.steamstatic.com/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg'">
                        </div>
                        <div class="party-member-info">
                            <div class="party-member-name">${name}</div>
                            <div class="party-member-matches">${matches} 매치</div>
                        </div>
                        <div class="party-member-winrate">
                            <div class="winrate-value">${winRate}%</div>
                            <div class="winrate-label">승률</div>
                        </div>
                    </div>
                `;
            } catch (memberError) {
                console.error('파티 멤버 카드 생성 오류:', memberError, member);
                return `
                    <div class="party-member">
                        <div class="party-member-info">
                            <div class="party-member-name">Unknown Player</div>
                            <div class="party-member-id">데이터 오류</div>
                        </div>
                    </div>
                `;
            }
        });
        
        // deadlock.coach 스타일: 빈 카드는 필터링하고 표시
        const validPartyCards = partyCards.filter(card => card.trim() !== '');
        partyStatsList.innerHTML = validPartyCards.join('');
        
        // 파티원 클릭 시 프로필 이동 기능 추가
        partyStatsList.addEventListener('click', (e) => {
            const partyMember = e.target.closest('.party-member');
            if (partyMember) {
                const accountId = partyMember.dataset.accountId;
                console.log('파티 멤버 클릭:', { accountId: accountId });
                if (accountId && accountId !== 'Unknown') {
                    console.log('프로필 페이지로 이동:', `/ko/players/${accountId}`);
                    window.location.href = `/ko/players/${accountId}`;
                } else {
                    console.log('유효하지 않은 Account ID:', accountId);
                    alert('이 플레이어의 프로필을 볼 수 없습니다.');
                }
            }
        });
        
        console.log('✅ 파티 스탯 표시 완료');
        
    } catch (error) {
        console.error('❌ 파티 스탯 표시 오류:', error);
        partyStatsList.innerHTML = '<p style="color: #ff6b6b; text-align: center;">파티 데이터 표시 중 오류가 발생했습니다.</p>';
    }
}

// MMR 그래프 표시
function displayMMRGraph(mmrData) {
    try {
        console.log('📈 MMR 그래프 생성 시작:', mmrData);
        
        const ctx = document.getElementById('mmr-chart').getContext('2d');
        
        // 기존 차트가 있으면 제거
        if (window.mmrChart) {
            window.mmrChart.destroy();
        }
        
        // 데이터 포맷팅
        const labels = mmrData.map(entry => {
            const date = new Date(entry.date);
            return date.toLocaleDateString('ko-KR', { month: 'short', day: 'numeric' });
        });
        
        const mmrValues = mmrData.map(entry => entry.mmr);
        
        // 등급별 색상과 레벨 정의 (deadlock-api.com 기준)
        const rankColors = {
            'Initiate': '#8B4513',
            'Seeker': '#CD853F', 
            'Arcanist': '#4682B4',
            'Alchemist': '#32CD32',
            'Ritualist': '#9932CC',
            'Oracle': '#FF6347',
            'Phantom': '#FF1493',
            'Eternus': '#FFD700'
        };
        
        const rankLevels = {
            'Initiate': 1,
            'Seeker': 2,
            'Arcanist': 3,
            'Alchemist': 4,
            'Ritualist': 5,
            'Oracle': 6,
            'Phantom': 7,
            'Eternus': 8
        };
        
        // 현재 등급 결정
        const currentRank = mmrData.length > 0 ? mmrData[mmrData.length - 1].rank : 'Seeker';
        const currentColor = rankColors[currentRank] || '#CD853F';
        
        window.mmrChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'MMR',
                    data: mmrValues,
                    borderColor: currentColor,
                    backgroundColor: currentColor + '20',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: currentColor,
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2,
                    pointRadius: 6,
                    pointHoverRadius: 8
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                plugins: {
                    legend: {
                        labels: {
                            color: '#FFEFD7',
                            font: {
                                size: 14,
                                family: 'system-ui, -apple-system, sans-serif'
                            }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.9)',
                        titleColor: '#FFEFD7',
                        bodyColor: '#FFEFD7',
                        borderColor: currentColor,
                        borderWidth: 1,
                        titleFont: {
                            size: 14,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 13
                        },
                        callbacks: {
                            label: function(context) {
                                const index = context.dataIndex;
                                const mmr = mmrValues[index];
                                const rank = mmrData[index].rank;
                                const tier = mmrData[index].tier;
                                return [`MMR: ${mmr}`, `등급: ${rank} ${tier}`];
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: '#999',
                            font: {
                                size: 12
                            }
                        }
                    },
                    y: {
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: '#999',
                            font: {
                                size: 12
                            },
                            callback: function(value) {
                                return Math.round(value);
                            }
                        },
                        beginAtZero: false
                    }
                }
            }
        });
        
        console.log('✅ MMR 그래프 생성 완료');
        
    } catch (error) {
        console.error('❌ MMR 그래프 생성 오류:', error);
        document.getElementById('mmr-graph-container').innerHTML = '<p style="color: #ff6b6b; text-align: center;">MMR 그래프를 표시할 수 없습니다.</p>';
    }
}

// Load data when page loads
document.addEventListener('DOMContentLoaded', () => {
    // 아이템 매칭 시스템과 프로필 데이터 로드를 비동기로 처리
    (async () => {
        try {
            // 아이템 매칭 시스템 먼저 초기화
            await initializeItemMatching();
            
            // 프로필 데이터 로드
            loadMyProfileData();
        } catch (error) {
            console.error('❌ 초기화 중 오류:', error);
            // 에러가 발생해도 프로필 데이터는 로드 시도
            loadMyProfileData();
        }
    })();
});
</script>