<div class="player-detail-section">
    <div class="player-detail-container">
        <!-- Welcome Message -->
        <div class="welcome-message">
            <h1>안녕하세요, <%= user.username %>님! 👋</h1>
            <p>데드락에서의 여러분의 활약을 확인해보세요!</p>
            <div class="quick-actions">
                <a href="/ko/leaderboards/asia" class="action-btn secondary">🏆 리더보드</a>
                <a href="<%= user.profileUrl || '#' %>" target="_blank" class="action-btn secondary">🎮 Steam</a>
            </div>
        </div>

        <!-- Loading State -->
        <div class="table-loading" id="player-loading">
            <div class="loading-spinner"></div>
            <p>플레이어 정보를 불러오는 중...</p>
        </div>

        <!-- Player Content -->
        <div class="player-content" id="player-content" style="display: none;">
            <!-- Player Header -->
            <div class="player-header">
                <div class="player-basic-info">
                    <img class="player-detail-avatar" id="player-avatar" alt="Player Avatar">
                    <div class="player-main-info">
                        <h1 class="player-name" id="player-name">플레이어</h1>
                        <div class="player-meta">
                            <span class="player-country" id="player-country">🌍</span>
                            <span class="player-account-id">계정 ID: <%= accountId %></span>
                            <% if (user && user.steamId) { %>
                            <span class="player-steam-id">Steam ID: <%= user.steamId %></span>
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="player-rank">
                    <div class="rank-badge">
                        <img class="rank-medal" id="rank-medal" alt="Rank Medal">
                        <div class="rank-info">
                            <span class="rank-name" id="rank-name">Oracle</span>
                            <span class="rank-score" id="rank-score">3500</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Player Stats -->
            <div class="player-stats">
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value" id="stat-matches">0</div>
                        <div class="stat-label">매치</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-winrate">0%</div>
                        <div class="stat-label">승률</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-lane-winrate">0%</div>
                        <div class="stat-label">라인 승률</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-kda">0.0</div>
                        <div class="stat-label">KDA</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-souls">0</div>
                        <div class="stat-label">소울/분</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-denies">0</div>
                        <div class="stat-label">디나이</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-endorsements">0</div>
                        <div class="stat-label">추천수</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-duration">0:00</div>
                        <div class="stat-label">평균 매치 시간</div>
                    </div>
                </div>
            </div>

            <!-- Heroes Section (전체 게임 기반) -->
            <div class="player-section">
                <h2 class="section-title">플레이한 영웅 (전체 게임)</h2>
                <p class="section-note">
                    <i class="fas fa-info-circle"></i>
                    영웅 통계는 외부 API 데이터를 기반으로 하며, 실제 게임 내 데이터와 약간의 차이가 있을 수 있습니다. 
                    데이터는 주기적으로 업데이트됩니다.
                </p>
                <div class="heroes-grid" id="heroes-grid">
                    <!-- Heroes will be populated by JavaScript -->
                </div>
            </div>

            <!-- Recent Matches -->
            <div class="player-section">
                <h2 class="section-title">최근 매치</h2>
                <div class="matches-list" id="matches-list">
                    <!-- Matches will be populated by JavaScript -->
                </div>
            </div>

            <!-- Party Stats -->
            <div class="player-section">
                <h2 class="section-title">파티 통계 (함께 플레이한 팀원)</h2>
                <div class="party-stats-list" id="party-stats-list">
                    <!-- Party stats will be populated by JavaScript -->
                </div>
            </div>
        </div>

        <!-- Error State -->
        <div class="profile-error" id="profile-error" style="display: none;">
            <h2>⚠️ 데이터를 불러올 수 없습니다</h2>
            <p>데드락 통계를 가져오는 중 문제가 발생했습니다.</p>
            <p id="error-message" style="color: #EF4444; font-size: 14px; margin-top: 10px;"></p>
            <div style="margin-top: 20px;">
                <button onclick="loadMyProfileData()" class="retry-btn">다시 시도</button>
                <a href="/ko/leaderboards/asia" class="back-button" style="margin-left: 15px;">리더보드 보기</a>
            </div>
        </div>
    </div>
</div>

<style>
/* Welcome Message Styles */
.welcome-message {
    text-align: center;
    background: linear-gradient(135deg, rgba(88, 101, 242, 0.1) 0%, rgba(0, 0, 0, 0) 100%);
    padding: 30px;
    border-radius: 16px;
    margin-bottom: 30px;
    border: 1px solid rgba(88, 101, 242, 0.2);
}

.welcome-message h1 {
    font-size: 32px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0 0 10px 0;
}

.welcome-message p {
    color: #999;
    margin: 0 0 20px 0;
    font-size: 16px;
}

.quick-actions {
    display: flex;
    justify-content: center;
    gap: 15px;
    flex-wrap: wrap;
}

.action-btn {
    padding: 8px 16px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    font-size: 14px;
    transition: all 0.3s;
}

.action-btn.secondary {
    background: rgba(255, 255, 255, 0.1);
    color: #FFEFD7;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.action-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
}

/* Player Detail Styles (기존 CSS 재사용) */
.player-detail-section {
    padding: 120px 0 60px;
    min-height: 100vh;
    background: #000000;
}

.player-detail-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 40px;
}

/* 플레이어 기본 스타일 */
.player-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.player-basic-info {
    display: flex;
    align-items: center;
    gap: 20px;
}

.player-detail-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    border: 3px solid #63a2e2;
}

.player-main-info {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.player-name {
    font-size: 32px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0;
}

.player-meta {
    display: flex;
    align-items: center;
    gap: 15px;
    font-size: 16px;
    color: #999;
}

.player-country {
    font-size: 24px;
}

.player-account-id {
    font-family: monospace;
    font-size: 14px;
}

.player-rank {
    text-align: center;
}

.rank-badge {
    display: flex;
    align-items: center;
    gap: 15px;
}

.rank-medal {
    width: 64px;
    height: 64px;
}

.rank-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.rank-name {
    font-size: 18px;
    font-weight: 600;
    color: #63a2e2;
}

.rank-score {
    font-size: 24px;
    font-weight: 700;
    color: #FFEFD7;
}

.player-stats {
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 30px;
}

.stat-card {
    text-align: center;
    padding: 20px;
    background: rgba(255, 255, 255, 0.03);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
}

.stat-card:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateY(-2px);
}

.stat-value {
    font-size: 28px;
    font-weight: 700;
    color: #63a2e2;
    margin-bottom: 8px;
    display: block;
}

.stat-label {
    font-size: 14px;
    color: #999;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.player-section {
    background: rgba(255, 255, 255, 0.05);
    padding: 40px;
    border-radius: 16px;
    margin-bottom: 40px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.section-title {
    font-size: 24px;
    font-weight: 600;
    color: #FFEFD7;
    margin-bottom: 30px;
    border-bottom: 2px solid #63a2e2;
    padding-bottom: 10px;
}

.heroes-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
}

.hero-card {
    display: flex;
    align-items: center;
    gap: 15px;
    background: rgba(255, 255, 255, 0.03);
    padding: 20px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
}

.hero-card:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateY(-2px);
}

.hero-card-image {
    width: 50px;
    height: 50px;
    border-radius: 8px;
}

.hero-card-info h3 {
    font-size: 16px;
    font-weight: 600;
    color: #FFEFD7;
    margin: 0 0 5px 0;
}

.hero-card-stats {
    font-size: 14px;
    color: #999;
}

/* 상세 영웅 카드 스타일 */
.hero-card.detailed {
    flex-direction: column;
    align-items: stretch;
    padding: 25px;
    min-height: 300px;
}

.hero-card.detailed .hero-card-image {
    width: 60px;
    height: 60px;
    align-self: center;
    margin-bottom: 15px;
}

.hero-card-name {
    text-align: center;
    font-size: 18px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0 0 20px 0;
}

.hero-card-main-stats {
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.hero-card-detailed-stats {
    flex: 1;
}

.hero-stat-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
    font-size: 13px;
}

.hero-stat-label {
    color: #999;
    font-weight: 500;
}

.hero-stat-value {
    color: #FFEFD7;
    font-weight: 600;
}

.hero-stat-value.positive {
    color: #10B981;
}

.hero-stat-value.negative {
    color: #EF4444;
}

/* 매치 리스트 스타일 */
.matches-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.match-card {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: rgba(255, 255, 255, 0.03);
    padding: 20px;
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
}

.match-card:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
}

.match-card.win {
    border-left: 4px solid #10B981;
}

.match-card.loss {
    border-left: 4px solid #EF4444;
}

.match-hero {
    display: flex;
    align-items: center;
    gap: 15px;
    min-width: 140px;
}

.match-hero-image {
    width: 40px;
    height: 40px;
    border-radius: 6px;
}

.match-hero-name {
    font-weight: 500;
    color: #FFEFD7;
}

.match-result {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 80px;
}

.result-text {
    font-weight: 600;
    font-size: 14px;
}

.win-text {
    color: #10B981;
}

.loss-text {
    color: #EF4444;
}

.unknown-text {
    color: #999;
}

.match-outcomes {
    display: flex;
    flex-direction: column;
    gap: 2px;
    margin-bottom: 4px;
}

.match-outcome {
    font-weight: 600;
    font-size: 13px;
}

.lane-outcome {
    font-weight: 500;
    font-size: 11px;
}

.match-duration {
    font-size: 12px;
    color: #999;
}

.match-id {
    font-size: 11px;
    color: #666;
    font-family: monospace;
}

.match-stats {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 80px;
}

.kda {
    font-family: monospace;
    font-size: 16px;
    color: #FFEFD7;
}

.kda-ratio {
    font-size: 12px;
    color: #999;
}

.match-performance {
    display: flex;
    gap: 20px;
    flex: 1;
}

.performance-item {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.performance-label {
    font-size: 12px;
    color: #999;
    margin-bottom: 2px;
}

.performance-value {
    font-weight: 500;
    color: #FFEFD7;
    font-size: 14px;
}

.match-time {
    font-size: 12px;
    color: #999;
    min-width: 80px;
    text-align: right;
}

/* Match Items Styles */
.match-items {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    min-width: 250px;
}

.items-label {
    font-size: 12px;
    color: #999;
    font-weight: 500;
}

.items-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 4px;
    max-width: 240px;
}

.item-wrapper {
    position: relative;
    display: inline-block;
}

.empty-slot {
    opacity: 0.3;
}

.empty-item-placeholder {
    width: 48px;
    height: 48px;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    font-size: 20px;
}

.empty-item-placeholder::before {
    content: '?';
    font-weight: bold;
}

.items-info {
    font-size: 11px;
    color: #999;
    text-align: center;
    margin-top: 4px;
    font-style: italic;
}

.item-image {
    width: 48px;
    height: 48px;
    border-radius: 4px;
    transition: transform 0.2s ease;
    object-fit: cover;
}

.item-image:hover {
    transform: scale(1.1);
}

.item-image.real-item {
    border: 2px solid #10B981;
    box-shadow: 0 0 8px rgba(16, 185, 129, 0.3);
}

.item-image.real-item:hover {
    border-color: #059669;
    box-shadow: 0 0 12px rgba(16, 185, 129, 0.5);
}

.weapon-item {
    border-color: #FF8C42 !important;
}

.vitality-item {
    border-color: #4CAF50 !important;
}

.spirit-item {
    border-color: #8E44AD !important;
}

/* 파티 스탯 스타일 */
.party-stats-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.party-member {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px 20px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
    cursor: pointer;
}

.party-member:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateX(5px);
}

.party-member:active {
    background: rgba(99, 162, 226, 0.15);
    border-color: #5289c7;
    transform: translateX(3px) scale(0.98);
}

.party-member-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
}

.party-member-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.party-member-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.party-member-name {
    font-weight: 600;
    color: #FFEFD7;
    font-size: 16px;
}

.party-member-matches {
    font-size: 14px;
    color: #999;
}

.party-member-winrate {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 4px;
    min-width: 80px;
}

.winrate-value {
    font-size: 20px;
    font-weight: 700;
    color: #63a2e2;
}

.winrate-label {
    font-size: 12px;
    color: #999;
    text-transform: uppercase;
}

.party-member-id {
    font-size: 12px;
    color: #999;
    font-family: monospace;
}

.party-stats {
    display: flex;
    gap: 25px;
    flex: 1;
}

.party-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.party-stat-label {
    font-size: 12px;
    color: #999;
    margin-bottom: 4px;
}

.party-stat-value {
    font-weight: 600;
    color: #63a2e2;
    font-size: 14px;
}

.party-last-played {
    font-size: 12px;
    color: #999;
    min-width: 100px;
    text-align: right;
}

/* 에러 및 로딩 스타일 */
.profile-error {
    text-align: center;
    padding: 100px 20px;
    color: #FFEFD7;
}

.profile-error h2 {
    font-size: 36px;
    margin-bottom: 20px;
    color: #EF4444;
}

.retry-btn {
    background: #63a2e2;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

.retry-btn:hover {
    background: #5289c7;
    transform: translateY(-2px);
}

.back-button {
    display: inline-block;
    background: rgba(255, 255, 255, 0.1);
    color: #FFEFD7;
    padding: 12px 24px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s;
}

.back-button:hover {
    background: rgba(255, 255, 255, 0.2);
    color: #FFEFD7;
}

/* 팀 랭크 배지 스타일 */
.match-meta-info {
    display: flex;
    align-items: center;
    gap: 10px;
    margin: 4px 0;
}

.team-rank-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    position: relative;
}

.rank-badge-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
}

.rank-fallback {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    border-radius: 6px;
    font-weight: bold;
    font-size: 12px;
    color: white;
    background: linear-gradient(135deg, #63a2e2, #4a90e2);
    border: 2px solid #63a2e2;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);
    line-height: 1;
}

/* 팀 랭크 호버 효과 */
.team-rank-badge:hover {
    transform: scale(1.1);
    transition: transform 0.2s ease;
}

.team-rank-badge:hover .rank-badge-image {
    filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.5)) brightness(1.1);
}

/* 반응형 */
@media (max-width: 768px) {
    .player-detail-container {
        padding: 0 20px;
    }
    
    .welcome-message h1 {
        font-size: 24px;
    }
    
    .quick-actions {
        flex-direction: column;
        align-items: center;
    }
    
    .player-header {
        flex-direction: column;
        gap: 20px;
        text-align: center;
    }
    
    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }
    
    .heroes-grid {
        grid-template-columns: 1fr;
    }
    
    .match-card {
        flex-direction: column;
        gap: 12px;
        text-align: center;
    }
    
    .match-hero, .match-result, .match-stats {
        min-width: auto;
    }
    
    .match-performance {
        justify-content: center;
    }
    
    .match-time {
        text-align: center;
        min-width: auto;
    }
    
    .match-meta-info {
        flex-direction: column;
        gap: 5px;
        align-items: center;
    }
    
    .team-rank-badge {
        width: 24px;
        height: 24px;
    }
    
    .rank-fallback {
        width: 20px;
        height: 20px;
        font-size: 10px;
    }
    
    .party-member {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }
    
    .party-member-info {
        min-width: auto;
    }
    
    .party-stats {
        justify-content: center;
        flex-wrap: wrap;
        gap: 15px;
    }
    
    .party-last-played {
        text-align: center;
        min-width: auto;
    }
}
</style>

<script>
// 국가 플래그를 이미지로 변환하는 함수
function getCountryImage(countryFlag) {
    const flagImageMap = {
        '🇺🇸': '<img src="https://flagcdn.com/24x18/us.png" alt="미국" title="미국" class="flag-image">',
        '🇨🇦': '<img src="https://flagcdn.com/24x18/ca.png" alt="캐나다" title="캐나다" class="flag-image">',
        '🇲🇽': '<img src="https://flagcdn.com/24x18/mx.png" alt="멕시코" title="멕시코" class="flag-image">',
        '🇬🇧': '<img src="https://flagcdn.com/24x18/gb.png" alt="영국" title="영국" class="flag-image">',
        '🇩🇪': '<img src="https://flagcdn.com/24x18/de.png" alt="독일" title="독일" class="flag-image">',
        '🇫🇷': '<img src="https://flagcdn.com/24x18/fr.png" alt="프랑스" title="프랑스" class="flag-image">',
        '🇪🇸': '<img src="https://flagcdn.com/24x18/es.png" alt="스페인" title="스페인" class="flag-image">',
        '🇮🇹': '<img src="https://flagcdn.com/24x18/it.png" alt="이탈리아" title="이탈리아" class="flag-image">',
        '🇨🇳': '<img src="https://flagcdn.com/24x18/cn.png" alt="중국" title="중국" class="flag-image">',
        '🇯🇵': '<img src="https://flagcdn.com/24x18/jp.png" alt="일본" title="일본" class="flag-image">',
        '🇰🇷': '<img src="https://flagcdn.com/24x18/kr.png" alt="한국" title="한국" class="flag-image">',
        '🇹🇼': '<img src="https://flagcdn.com/24x18/tw.png" alt="대만" title="대만" class="flag-image">',
        '🇸🇬': '<img src="https://flagcdn.com/24x18/sg.png" alt="싱가포르" title="싱가포르" class="flag-image">',
        '🇷🇺': '<img src="https://flagcdn.com/24x18/ru.png" alt="러시아" title="러시아" class="flag-image">',
        '🇵🇱': '<img src="https://flagcdn.com/24x18/pl.png" alt="폴란드" title="폴란드" class="flag-image">',
        '🇸🇪': '<img src="https://flagcdn.com/24x18/se.png" alt="스웨덴" title="스웨덴" class="flag-image">',
        '🇳🇴': '<img src="https://flagcdn.com/24x18/no.png" alt="노르웨이" title="노르웨이" class="flag-image">',
        '🇩🇰': '<img src="https://flagcdn.com/24x18/dk.png" alt="덴마크" title="덴마크" class="flag-image">',
        '🇹🇭': '<img src="https://flagcdn.com/24x18/th.png" alt="태국" title="태국" class="flag-image">',
        '🇻🇳': '<img src="https://flagcdn.com/24x18/vn.png" alt="베트남" title="베트남" class="flag-image">',
        '🇲🇾': '<img src="https://flagcdn.com/24x18/my.png" alt="말레이시아" title="말레이시아" class="flag-image">',
        '🇵🇭': '<img src="https://flagcdn.com/24x18/ph.png" alt="필리핀" title="필리핀" class="flag-image">',
        '🇮🇩': '<img src="https://flagcdn.com/24x18/id.png" alt="인도네시아" title="인도네시아" class="flag-image">',
        '🌍': '<img src="https://flagcdn.com/24x18/un.png" alt="알 수 없음" title="알 수 없음" class="flag-image">'
    };
    
    return flagImageMap[countryFlag] || '<img src="https://flagcdn.com/24x18/un.png" alt="알 수 없음" title="알 수 없음" class="flag-image">';
}

async function loadMyProfileData() {
    const loading = document.getElementById('player-loading');
    const content = document.getElementById('player-content');
    const error = document.getElementById('profile-error');
    
    loading.style.display = 'flex';
    content.style.display = 'none';
    error.style.display = 'none';
    
    try {
        const accountId = '<%= accountId %>';
        console.log('📋 프로필 데이터 로딩 시작, Account ID:', accountId);
        
        // accountId 유효성 검사
        if (!accountId || accountId === 'null' || accountId === 'undefined') {
            throw new Error('Account ID가 유효하지 않습니다. 다시 로그인해주세요.');
        }
        
        // 병렬로 모든 데이터를 동시에 로드 (캐시 활용으로 성능 최적화)
        console.log('🔄 API 호출 시작...');
        const [playerResponse, heroStatsResponse, matchHistoryResponse, partyStatsResponse] = await Promise.all([
            fetch(`/api/v1/players/${accountId}`),
            fetch(`/api/v1/players/${accountId}/hero-stats`),
            fetch(`/api/v1/players/${accountId}/match-history?limit=10`),
            fetch(`/api/v1/players/${accountId}/party-stats`)
        ]);
        
        console.log('📡 API 응답 상태:', {
            player: playerResponse.status,
            heroStats: heroStatsResponse.status,
            matchHistory: matchHistoryResponse.status,
            partyStats: partyStatsResponse.status
        });
        
        const [playerData, heroStats, matchHistory, partyStats] = await Promise.all([
            playerResponse.json(),
            heroStatsResponse.json(),
            matchHistoryResponse.json(),
            partyStatsResponse.json()
        ]);
        
        console.log('📊 받은 데이터:', {
            player: !!playerData,
            heroStats: heroStats?.length || 0,
            matchHistory: matchHistory?.length || 0,
            partyStats: partyStats?.length || 0
        });
        
        if (playerResponse.ok && playerData) {
            // 빠른 UI 업데이트
            updatePlayerUIFast(playerData, heroStats, matchHistory, partyStats);
            loading.style.display = 'none';
            content.style.display = 'block';
            console.log('✅ 프로필 데이터 로딩 완료');
        } else {
            throw new Error(playerData?.error || `플레이어 데이터 로딩 실패 (상태: ${playerResponse.status})`);
        }
        
    } catch (err) {
        console.error('❌ 프로필 데이터 로딩 실패:', err);
        loading.style.display = 'none';
        error.style.display = 'block';
        
        const errorMessageEl = document.getElementById('error-message');
        if (errorMessageEl) {
            errorMessageEl.textContent = `오류 상세: ${err.message || '알 수 없는 오류'}`;
        }
    }
}

// 빠른 UI 업데이트 - 모든 데이터를 한 번에 처리
function updatePlayerUIFast(player, heroStats, matchHistory, partyStats) {
    console.log('🎨 UI 업데이트 시작, 플레이어 데이터:', player);
    
    try {
        // Basic Info (안전한 접근)
        const avatar = player?.avatar || 'https://avatars.cloudflare.steamstatic.com/b5bd56c1aa4644a474a2e4972be27ef9e82e517e_full.jpg';
        const name = player?.name || 'Unknown Player';
        const country = player?.country || '🌍';
        
        document.getElementById('player-avatar').src = avatar;
        document.getElementById('player-name').textContent = name;
        document.getElementById('player-country').innerHTML = getCountryImage(country);
        
        // Rank (안전한 접근)
        const getMedalImage = (medal, subrank) => {
            const medalRankMap = {
                'Eternus': 11, 'Phantom': 10, 'Oracle': 9, 'Ritualist': 8,
                'Alchemist': 7, 'Arcanist': 6, 'Initiate': 5
            };
            const rankNumber = medalRankMap[medal] || 9;
            return `https://cdn.deadlock.coach/vpk/panorama/images/ranked/badges/rank${rankNumber}/badge_sm_subrank${subrank || 1}.webp`;
        };
        
        // 영어 등급을 한글로 변환하는 함수
        const getKoreanMedal = (englishMedal) => {
            const medalTranslation = {
                'Eternus': '이터누스',
                'Phantom': '팬텀',
                'Oracle': '오라클',
                'Ritualist': '리츄얼리스트',
                'Alchemist': '알케미스트',
                'Arcanist': '아케니스트',
                'Initiate': '탐험가'
            };
            return medalTranslation[englishMedal] || englishMedal;
        };
        
        const medal = player?.rank?.medal || 'Oracle';
        const subrank = player?.rank?.subrank || 1;
        const score = player?.rank?.score || 3500;
        
        document.getElementById('rank-medal').src = getMedalImage(medal, subrank);
        document.getElementById('rank-name').textContent = `${getKoreanMedal(medal)} ${subrank}`;
        document.getElementById('rank-score').textContent = (typeof score === 'number' ? score : parseInt(score) || 3500).toLocaleString();
        
        // Stats (안전한 접근)
        const stats = player?.stats || {};
        const matches = stats.matches || 0;
        const winRate = stats.winRate || 0;
        const laneWinRate = stats.laneWinRate || 0;
        const kda = stats.kda || '0.0';
        const soulsPerMin = stats.soulsPerMin || 0;
        const denies = stats.denies || 0;
        const endorsements = stats.endorsements || 0;
        
        document.getElementById('stat-matches').textContent = matches;
        document.getElementById('stat-winrate').textContent = `${winRate}%`;
        document.getElementById('stat-lane-winrate').textContent = `${laneWinRate}%`;
        document.getElementById('stat-kda').textContent = kda;
        document.getElementById('stat-souls').textContent = (typeof soulsPerMin === 'number' ? soulsPerMin : parseInt(soulsPerMin) || 0).toLocaleString();
        document.getElementById('stat-denies').textContent = (typeof denies === 'number' ? denies : parseInt(denies) || 0).toLocaleString();
        document.getElementById('stat-endorsements').textContent = (typeof endorsements === 'number' ? endorsements : parseInt(endorsements) || 0).toLocaleString();
        
        // 평균 매치 시간 업데이트 (avgMatchDuration이 있다면)
        if (window.playerData && window.playerData.stats && window.playerData.stats.avgMatchDuration) {
            document.getElementById('stat-duration').textContent = window.playerData.stats.avgMatchDuration;
        }
        
        console.log('✅ 기본 UI 업데이트 완료');
        
        // 즉시 영웅 및 매치 데이터 표시
        if (heroStats && Array.isArray(heroStats) && heroStats.length > 0) {
            console.log('🎯 영웅 스탯 표시:', heroStats.length, '개');
            displayHeroStats(heroStats);
        } else {
            console.log('⚠️ 영웅 스탯 없음');
            document.getElementById('heroes-grid').innerHTML = '<p style="color: #999; text-align: center;">영웅 데이터가 없습니다.</p>';
        }
        
        if (matchHistory && Array.isArray(matchHistory) && matchHistory.length > 0) {
            console.log('📋 매치 히스토리 표시:', matchHistory.length, '개');
            displayMatchHistory(matchHistory);
        } else {
            console.log('⚠️ 매치 히스토리 없음');
            document.getElementById('matches-list').innerHTML = '<p style="color: #999; text-align: center;">최근 매치 데이터가 없습니다.</p>';
        }
        
        if (partyStats && Array.isArray(partyStats) && partyStats.length > 0) {
            console.log('👥 파티 스탯 표시:', partyStats.length, '개');
            displayPartyStats(partyStats);
        } else {
            console.log('⚠️ 파티 스탯 없음');
            document.getElementById('party-stats-list').innerHTML = '<p style="color: #999; text-align: center;">파티 데이터가 없습니다.</p>';
        }
        
        console.log('🎉 모든 UI 업데이트 완료');
        
    } catch (error) {
        console.error('❌ UI 업데이트 중 오류:', error);
        throw error;
    }
}

// 기존 함수는 호환성을 위해 유지
function updatePlayerUI(player) {
    // 기본 정보만 업데이트하고 별도로 로드
    document.getElementById('player-avatar').src = player.avatar;
    document.getElementById('player-name').textContent = player.name;
    document.getElementById('player-country').textContent = player.country;
    
    const getMedalImage = (medal, subrank) => {
        const medalRankMap = {
            'Eternus': 11, 'Phantom': 10, 'Oracle': 9, 'Ritualist': 8,
            'Alchemist': 7, 'Arcanist': 6, 'Initiate': 5
        };
        const rankNumber = medalRankMap[medal] || 9;
        return `https://cdn.deadlock.coach/vpk/panorama/images/ranked/badges/rank${rankNumber}/badge_sm_subrank${subrank}.webp`;
    };
    
    // 영어 등급을 한글로 변환하는 함수
    const getKoreanMedal = (englishMedal) => {
        const medalTranslation = {
            'Eternus': '이터누스',
            'Phantom': '팬텀',
            'Oracle': '오라클',
            'Ritualist': '리츄얼리스트',
            'Alchemist': '알케미스트',
            'Arcanist': '아케니스트',
            'Initiate': '탐험가'
        };
        return medalTranslation[englishMedal] || englishMedal;
    };
    
    document.getElementById('rank-medal').src = getMedalImage(player.rank.medal, player.rank.subrank);
    document.getElementById('rank-name').textContent = `${getKoreanMedal(player.rank.medal)} ${player.rank.subrank}`;
    document.getElementById('rank-score').textContent = player.rank.score.toLocaleString();
    
    document.getElementById('stat-matches').textContent = player.stats.matches;
    document.getElementById('stat-winrate').textContent = `${player.stats.winRate}%`;
    document.getElementById('stat-lane-winrate').textContent = `${player.stats.laneWinRate}%`;
    document.getElementById('stat-kda').textContent = player.stats.kda;
    document.getElementById('stat-headshots').textContent = `${player.stats.headshotPercent}%`;
    document.getElementById('stat-souls').textContent = player.stats.soulsPerMin.toLocaleString();
    document.getElementById('stat-damage').textContent = player.stats.damagePerMin.toLocaleString();
    document.getElementById('stat-healing').textContent = player.stats.healingPerMin.toLocaleString();
    
    // 평균 매치 시간 업데이트 (deadlock.coach 스타일)
    if (player.stats.avgMatchDuration) {
        document.getElementById('stat-duration').textContent = player.stats.avgMatchDuration;
    }
    
    loadHeroStats(player.accountId);
    loadMatchHistory(player.accountId);
}

// 영웅별 스탯 로드
async function loadHeroStats(accountId) {
    const grid = document.getElementById('heroes-grid');
    
    try {
        const response = await fetch(`/api/v1/players/${accountId}/hero-stats`);
        const heroStats = await response.json();
        
        if (response.ok && heroStats.length > 0) {
            displayHeroStats(heroStats);
        } else {
            throw new Error('영웅 스탯을 불러올 수 없습니다');
        }
    } catch (error) {
        console.error('영웅 스탯 로드 실패:', error);
        grid.innerHTML = '<p style="color: #999; text-align: center;">영웅 스탯을 불러올 수 없습니다.</p>';
    }
}

// 영웅 스탯 표시
function displayHeroStats(heroStats) {
    const grid = document.getElementById('heroes-grid');
    
    try {
        console.log('🎯 영웅 스탯 표시 시작:', heroStats);
        
        if (!Array.isArray(heroStats) || heroStats.length === 0) {
            grid.innerHTML = '<p style="color: #999; text-align: center;">영웅 데이터가 없습니다.</p>';
            return;
        }
        
        const getHeroImage = (heroName) => {
            const heroImageMap = {
                'Abrams': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bull_card.webp',
                'Bebop': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bebop_card.webp',
                'Calico': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/nano_card.webp',
                'Dynamo': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/sumo_card.webp',
                'Grey Talon': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/archer_card.webp',
                'Haze': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/haze_card.webp',
                'Infernus': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/inferno_card.webp',
                'Ivy': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/tengu_card.webp',
                'Kelvin': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/kelvin_card.webp',
                'Lady Geist': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/spectre_card.webp',
                'Lash': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/lash_card.webp',
                'McGinnis': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/engineer_card.webp',
                'Mo & Krill': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/digger_card.webp',
                'Paradox': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/chrono_card.webp',
                'Pocket': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/synth_card.webp',
                'Seven': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/gigawatt_card.webp',
                'Shiv': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/shiv_card.webp',
                'Viper': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/kali_card.webp',
                'Viscous': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/viscous_card.webp',
                'Warden': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/warden_card.webp',
                'Vyper': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/kali_card.webp',
                'Holliday': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/astro_card.webp',
                'Mirage': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/mirage_card.webp',
                'Wraith': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/wraith_card.webp',
                'Yamato': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/yamato_card.webp',
                'Sinclair': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/magician_card.webp'
            };
            return heroImageMap[heroName] || 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bull_card.webp';
        };
        
        const heroCards = heroStats.map((hero, index) => {
            try {
                // 새로운 hero-stats API 데이터 구조 사용
                const matches = parseInt(hero?.matches) || 0;
                const wins = parseInt(hero?.wins) || 0;
                const losses = parseInt(hero?.losses) || (matches - wins);
                const winRate = hero?.winRate || (matches > 0 ? Math.round((wins / matches) * 100) : 0);
                const kda = hero?.kda || '0.0';
                const avgKills = hero?.avgKills || 0;
                const avgDeaths = hero?.avgDeaths || 0;
                const avgAssists = hero?.avgAssists || 0;
                const avgSoulsPerMin = hero?.avgSoulsPerMin || 0;
                const avgDamagePerMin = hero?.avgDamagePerMin || 0;
                const avgHealingPerMin = hero?.avgHealingPerMin || 0;
                const avgMatchDuration = hero?.avgMatchDuration || 0;
                const durationFormatted = hero?.avgMatchDurationFormatted || 
                    (avgMatchDuration > 0 ? `${Math.floor(avgMatchDuration / 60)}:${(avgMatchDuration % 60).toString().padStart(2, '0')}` : '0:00');
                const heroName = hero?.hero || hero?.name || `Hero${index + 1}`;
                const accuracy = hero?.accuracy || 0;
                const critShotRate = hero?.critShotRate || 0;
                const avgLevel = hero?.avgLevel || 0;
                const timePlayedHours = hero?.timePlayedTotal ? (hero.timePlayedTotal / 3600).toFixed(1) : 0;
                
                return `
                    <div class="hero-card detailed">
                        <img src="${getHeroImage(heroName)}" alt="${heroName}" class="hero-card-image">
                        <div class="hero-card-info">
                            <h3 class="hero-card-name">${heroName}</h3>
                            <div class="hero-card-main-stats">
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">매치:</span>
                                    <span class="hero-stat-value">${matches} (${wins}승 ${losses}패)</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">승률:</span>
                                    <span class="hero-stat-value ${winRate >= 50 ? 'positive' : 'negative'}">${winRate}%</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">총 플레이 시간:</span>
                                    <span class="hero-stat-value">${timePlayedHours}시간</span>
                                </div>
                            </div>
                            <div class="hero-card-detailed-stats">
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">KDA:</span>
                                    <span class="hero-stat-value">${avgKills}/${avgDeaths}/${avgAssists} (${kda})</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">평균 레벨:</span>
                                    <span class="hero-stat-value">${avgLevel}</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">명중률:</span>
                                    <span class="hero-stat-value">${accuracy}%</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">크리티컬율:</span>
                                    <span class="hero-stat-value">${critShotRate}%</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">소울/분:</span>
                                    <span class="hero-stat-value">${avgSoulsPerMin.toLocaleString()}</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">데미지/분:</span>
                                    <span class="hero-stat-value">${avgDamagePerMin.toLocaleString()}</span>
                                </div>
                                <div class="hero-stat-row">
                                    <span class="hero-stat-label">평균 시간:</span>
                                    <span class="hero-stat-value">${durationFormatted}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } catch (heroError) {
                console.error('영웅 카드 생성 오류:', heroError, hero);
                return `
                    <div class="hero-card">
                        <img src="https://cdn.deadlock.coach/vpk/panorama/images/heroes/bull_card.webp" alt="Unknown" class="hero-card-image">
                        <div class="hero-card-info">
                            <h3>Unknown Hero</h3>
                            <div class="hero-card-stats">데이터 오류</div>
                        </div>
                    </div>
                `;
            }
        });
        
        grid.innerHTML = heroCards.join('');
        console.log('✅ 영웅 스탯 표시 완료');
        
    } catch (error) {
        console.error('❌ 영웅 스탯 표시 오류:', error);
        grid.innerHTML = '<p style="color: #ff6b6b; text-align: center;">영웅 데이터 표시 중 오류가 발생했습니다.</p>';
    }
}

// 매치 히스토리 로드
async function loadMatchHistory(accountId) {
    const matchesList = document.getElementById('matches-list');
    
    try {
        const response = await fetch(`/api/v1/players/${accountId}/match-history?limit=20`);
        const matches = await response.json();
        
        if (response.ok && matches.length > 0) {
            displayMatchHistory(matches);
        } else {
            throw new Error('매치 히스토리를 불러올 수 없습니다');
        }
    } catch (error) {
        console.error('매치 히스토리 로드 실패:', error);
        matchesList.innerHTML = '<p style="color: #999; text-align: center;">매치 히스토리를 불러올 수 없습니다.</p>';
    }
}

// 매치 히스토리 표시
function displayMatchHistory(matches) {
    const matchesList = document.getElementById('matches-list');
    
    try {
        console.log('📋 매치 히스토리 표시 시작:', matches);
        
        if (!Array.isArray(matches) || matches.length === 0) {
            matchesList.innerHTML = '<p style="color: #999; text-align: center;">최근 매치 데이터가 없습니다.</p>';
            return;
        }
        
        const getHeroImage = (heroName) => {
            const heroImageMap = {
                'Abrams': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bull_card.webp',
                'Bebop': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bebop_card.webp',
                'Calico': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/nano_card.webp',
                'Dynamo': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/sumo_card.webp',
                'Grey Talon': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/archer_card.webp',
                'Haze': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/haze_card.webp',
                'Infernus': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/inferno_card.webp',
                'Ivy': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/tengu_card.webp',
                'Kelvin': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/kelvin_card.webp',
                'Lady Geist': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/spectre_card.webp',
                'Lash': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/lash_card.webp',
                'McGinnis': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/engineer_card.webp',
                'Mo & Krill': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/digger_card.webp',
                'Paradox': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/chrono_card.webp',
                'Pocket': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/synth_card.webp',
                'Seven': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/gigawatt_card.webp',
                'Shiv': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/shiv_card.webp',
                'Viper': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/kali_card.webp',
                'Viscous': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/viscous_card.webp',
                'Warden': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/warden_card.webp',
                'Vyper': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/kali_card.webp',
                'Holliday': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/astro_card.webp',
                'Mirage': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/mirage_card.webp',
                'Wraith': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/wraith_card.webp',
                'Yamato': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/yamato_card.webp',
                'Sinclair': 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/magician_card.webp'
            };
            return heroImageMap[heroName] || 'https://cdn.deadlock.coach/vpk/panorama/images/heroes/bull_card.webp';
        };
        
        const formatDate = (dateString) => {
            try {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return '알 수 없음';
                
                const now = new Date();
                const diffHours = Math.floor((now - date) / (1000 * 60 * 60));
                
                if (diffHours < 1) return '방금 전';
                if (diffHours < 24) return `${diffHours}시간 전`;
                const diffDays = Math.floor(diffHours / 24);
                if (diffDays < 7) return `${diffDays}일 전`;
                return date.toLocaleDateString('ko-KR');
            } catch (error) {
                return '알 수 없음';
            }
        };
        
        // 정확한 아이템 이미지 매핑 함수
        const getItemImage = (itemNameOrId) => {
            // 실제 Deadlock API에서 사용하는 아이템 매핑
            const itemImageMap = {
                // Weapon Items
                'Basic Magazine': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/basic_magazine.webp',
                'Close Quarters': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/close_quarters.webp',
                'Headshot Booster': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/headshot_booster.webp',
                'High-Velocity Mag': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/high_velocity_mag.webp',
                'Hollow Point Ward': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/hollow_point_ward.webp',
                'Monster Rounds': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/monster_rounds.webp',
                'Rapid Rounds': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/rapid_rounds.webp',
                'Restorative Shot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/restorative_shot.webp',
                'Soul Shredder Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/soul_shredder_bullets.webp',
                'Titanic Magazine': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/titanic_magazine.webp',
                'Toxic Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/toxic_bullets.webp',
                'Active Reload': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/active_reload.webp',
                'Berserker': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/berserker.webp',
                'Burst Fire': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/burst_fire.webp',
                'Escalating Resilience': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/escalating_resilience.webp',
                'Fleetfoot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/fleetfoot.webp',
                'Hunter\'s Aura': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/hunters_aura.webp',
                'Intensifying Magazine': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/intensifying_magazine.webp',
                'Kinetic Dash': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/kinetic_dash.webp',
                'Long Range': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/long_range.webp',
                'Melee Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/melee_lifesteal.webp',
                'Mystic Shot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/mystic_shot.webp',
                'Point Blank': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/point_blank.webp',
                'Pristine Emblem': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/pristine_emblem.webp',
                'Sharpshooter': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/sharpshooter.webp',
                'Slowing Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/slowing_bullets.webp',
                'Spiritual Overflow': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/spiritual_overflow.webp',
                'Tesla Bullets': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/tesla_bullets.webp',
                'Warp Stone': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/warp_stone.webp',
                'Alchemical Fire': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/alchemical_fire.webp',
                'Crippling Headshot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/crippling_headshot.webp',
                'Frenzy': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/frenzy.webp',
                'Glass Cannon': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/glass_cannon.webp',
                'Heroic Aura': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/heroic_aura.webp',
                'Inhibitor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/inhibitor.webp',
                'Lucky Shot': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/lucky_shot.webp',
                'Phantom Strike': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/phantom_strike.webp',
                'Ricochet': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/ricochet.webp',
                'Shadow Weave': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/shadow_weave.webp',
                'Silencer': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/silencer.webp',
                'Vampiric Burst': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/vampiric_burst.webp',
                'Leech': 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/leech.webp',
                
                // Vitality Items
                'Extra Health': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_health.webp',
                'Extra Regen': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_regen.webp',
                'Extra Stamina': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_stamina.webp',
                'Melee Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/melee_lifesteal.webp',
                'Sprint Boots': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/sprint_boots.webp',
                'Healing Rite': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_rite.webp',
                'Bullet Armor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/bullet_armor.webp',
                'Spirit Armor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/spirit_armor.webp',
                'Enchanter\'s Barrier': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/enchanters_barrier.webp',
                'Enduring Speed': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/enduring_speed.webp',
                'Healing Booster': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/healing_booster.webp',
                'Health Nova': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/health_nova.webp',
                'Majestic Leap': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/majestic_leap.webp',
                'Return Fire': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/return_fire.webp',
                'Restorative Locket': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/restorative_locket.webp',
                'Divine Barrier': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/divine_barrier.webp',
                'Fortitude': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/fortitude.webp',
                'Improved Bullet Armor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/improved_bullet_armor.webp',
                'Improved Spirit Armor': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/improved_spirit_armor.webp',
                'Lifestrike': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/lifestrike.webp',
                'Metal Skin': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/metal_skin.webp',
                'Superior Stamina': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/superior_stamina.webp',
                'Combat Barrier': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/combat_barrier.webp',
                'Colossus': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/colossus.webp',
                'Leech': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/leech.webp',
                'Soul Rebirth': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/soul_rebirth.webp',
                'Unstoppable': 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/unstoppable.webp',
                
                // Spirit Items
                'Extra Spirit': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/extra_spirit.webp',
                'Spirit Strike': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_strike.webp',
                'Mystic Burst': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_burst.webp',
                'Cold Front': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/cold_front.webp',
                'Decay': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/decay.webp',
                'Infuser': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/infuser.webp',
                'Spirit Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_lifesteal.webp',
                'Ammo Scavenger': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/ammo_scavenger.webp',
                'Bullet Resist Shredder': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/bullet_resist_shredder.webp',
                'Ethereal Shift': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/ethereal_shift.webp',
                'Improved Burst': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_burst.webp',
                'Improved Cooldown': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_cooldown.webp',
                'Improved Reach': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_reach.webp',
                'Improved Spirit': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/improved_spirit.webp',
                'Quicksilver Reload': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/quicksilver_reload.webp',
                'Rapid Recharge': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/rapid_recharge.webp',
                'Spirit Lifesteal': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/spirit_lifesteal.webp',
                'Superior Cooldown': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/superior_cooldown.webp',
                'Superior Duration': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/superior_duration.webp',
                'Torment Pulse': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/torment_pulse.webp',
                'Boundless Spirit': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/boundless_spirit.webp',
                'Curse': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/curse.webp',
                'Diviner\'s Kevlar': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/diviners_kevlar.webp',
                'Echo Shard': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/echo_shard.webp',
                'Escalating Exposure': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/escalating_exposure.webp',
                'Frost Grenade': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/frost_grenade.webp',
                'Knockdown': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/knockdown.webp',
                'Magic Carpet': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/magic_carpet.webp',
                'Mystic Reverb': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/mystic_reverb.webp',
                'Refresher': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/refresher.webp',
                'Silence Glyph': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/silence_glyph.webp',
                'Slowing Hex': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/slowing_hex.webp',
                'Surge of Power': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/surge_of_power.webp',
                'Withering Whip': 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/withering_whip.webp'
            };
            
            // 아이템 이름으로 먼저 찾기
            if (itemImageMap[itemNameOrId]) {
                return itemImageMap[itemNameOrId];
            }
            
            // ID로 찾기 (필요한 경우)
            // TODO: API에서 오는 실제 아이템 ID 매핑 추가
            
            // 기본 이미지 (카테고리별)
            const weaponDefault = 'https://cdn.deadlock.coach/vpk/panorama/images/items/weapon/basic_magazine.webp';
            const vitalityDefault = 'https://cdn.deadlock.coach/vpk/panorama/images/items/vitality/extra_health.webp';
            const spiritDefault = 'https://cdn.deadlock.coach/vpk/panorama/images/items/spirit/extra_spirit.webp';
            
            return weaponDefault; // 기본값
        };
        
        // 아이템 카테고리 결정 함수
        const getItemCategory = (itemNameOrId) => {
            const weaponItems = [
                'Basic Magazine', 'Close Quarters', 'Headshot Booster', 'High-Velocity Mag', 'Hollow Point Ward',
                'Monster Rounds', 'Rapid Rounds', 'Restorative Shot', 'Soul Shredder Bullets', 'Titanic Magazine',
                'Toxic Bullets', 'Active Reload', 'Berserker', 'Burst Fire', 'Escalating Resilience', 'Fleetfoot',
                'Hunter\'s Aura', 'Intensifying Magazine', 'Kinetic Dash', 'Long Range', 'Melee Lifesteal',
                'Mystic Shot', 'Point Blank', 'Pristine Emblem', 'Sharpshooter', 'Slowing Bullets',
                'Spiritual Overflow', 'Tesla Bullets', 'Warp Stone', 'Alchemical Fire', 'Crippling Headshot',
                'Frenzy', 'Glass Cannon', 'Heroic Aura', 'Inhibitor', 'Lucky Shot', 'Phantom Strike',
                'Ricochet', 'Shadow Weave', 'Silencer', 'Vampiric Burst', 'Leech'
            ];
            
            const vitalityItems = [
                'Extra Health', 'Extra Regen', 'Extra Stamina', 'Melee Lifesteal', 'Sprint Boots', 'Healing Rite',
                'Bullet Armor', 'Spirit Armor', 'Enchanter\'s Barrier', 'Enduring Speed', 'Healing Booster',
                'Health Nova', 'Majestic Leap', 'Return Fire', 'Restorative Locket', 'Divine Barrier',
                'Fortitude', 'Improved Bullet Armor', 'Improved Spirit Armor', 'Lifestrike', 'Metal Skin',
                'Superior Stamina', 'Combat Barrier', 'Colossus', 'Soul Rebirth', 'Unstoppable'
            ];
            
            const spiritItems = [
                'Extra Spirit', 'Spirit Strike', 'Mystic Burst', 'Cold Front', 'Decay', 'Infuser',
                'Spirit Lifesteal', 'Ammo Scavenger', 'Bullet Resist Shredder', 'Ethereal Shift',
                'Improved Burst', 'Improved Cooldown', 'Improved Reach', 'Improved Spirit',
                'Quicksilver Reload', 'Rapid Recharge', 'Superior Cooldown', 'Superior Duration',
                'Torment Pulse', 'Boundless Spirit', 'Curse', 'Diviner\'s Kevlar', 'Echo Shard',
                'Escalating Exposure', 'Frost Grenade', 'Knockdown', 'Magic Carpet', 'Mystic Reverb',
                'Refresher', 'Silence Glyph', 'Slowing Hex', 'Surge of Power', 'Withering Whip'
            ];
            
            if (weaponItems.includes(itemNameOrId)) return 'weapon';
            if (vitalityItems.includes(itemNameOrId)) return 'vitality';
            if (spiritItems.includes(itemNameOrId)) return 'spirit';
            
            return 'weapon'; // 기본값
        };
        
        const matchCards = matches.map((match, index) => {
            try {
                // 안전한 데이터 추출
                const hero = match?.hero || 'Unknown';
                const result = match?.result || '알 수 없음';
                const isWin = result === '승리';
                const matchResult = match?.matchResult || (isWin ? 'Match won' : 'Match lost');
                const laneResult = match?.laneResult || 'Lane unknown';
                const duration = match?.durationFormatted || match?.duration ? `${Math.floor(match.duration / 60)}:${(match.duration % 60).toString().padStart(2, '0')}` : '0:00';
                const kills = parseInt(match?.kills) || 0;
                const deaths = parseInt(match?.deaths) || 0;
                const assists = parseInt(match?.assists) || 0;
                const kda = match?.kda || '0.0';
                const souls = parseInt(match?.souls) || 0;
                const damage = parseInt(match?.damage) || 0;
                const playedAt = match?.playedAt || new Date().toISOString();
                const matchId = match?.matchId || 'Unknown';
                const teamRank = parseInt(match?.teamRank) || 6;
                
                return `
                    <div class="match-card ${isWin ? 'win' : 'loss'}">
                        <div class="match-hero">
                            <img src="${getHeroImage(hero)}" alt="${hero}" class="match-hero-image">
                            <span class="match-hero-name">${hero}</span>
                        </div>
                        <div class="match-result">
                            <div class="match-outcomes">
                                <span class="match-outcome ${isWin ? 'win-text' : 'loss-text'}">${matchResult}</span>
                                <span class="lane-outcome ${laneResult.includes('won') ? 'win-text' : laneResult.includes('lost') ? 'loss-text' : 'unknown-text'}">${laneResult}</span>
                            </div>
                            <div class="match-meta-info">
                                <span class="match-duration">${duration}</span>
                                <div class="team-rank-badge">
                                    <img src="https://cdn.deadlock.coach/vpk/panorama/images/ranked/badges/rank${teamRank > 3 ? Math.max(1, 7-teamRank) : teamRank}/badge_sm_subrank${teamRank}.webp" 
                                         alt="Team Rank ${teamRank}" 
                                         class="rank-badge-image"
                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='inline';">
                                    <span class="rank-fallback" style="display: none;">${teamRank}</span>
                                </div>
                            </div>
                            <span class="match-id">매치 #${matchId}</span>
                        </div>
                        <div class="match-stats">
                            <span class="kda">${kills}/${deaths}/${assists}</span>
                            <span class="kda-ratio">KDA: ${kda}</span>
                        </div>
                        <div class="match-performance">
                            <div class="performance-item">
                                <span class="performance-label">소울</span>
                                <span class="performance-value">${souls.toLocaleString()}</span>
                            </div>
                            <div class="performance-item">
                                <span class="performance-label">데미지</span>
                                <span class="performance-value">${damage.toLocaleString()}</span>
                            </div>
                        </div>
                        <div class="match-items">
                            <div class="items-label">최종 아이템</div>
                            <div class="items-grid" id="match-items-${index}">
                                <!-- 아이템 데이터는 안정적으로 로드 후 표시 -->
                                <div style="grid-column: 1/-1; text-align: center; color: #999; font-size: 12px; padding: 20px;">
                                    매치 데이터 로딩 중...
                                </div>
                            </div>
                        </div>
                        <div class="match-time">
                            ${formatDate(playedAt)}
                        </div>
                    </div>
                `;
            } catch (matchError) {
                console.error('매치 카드 생성 오류:', matchError, match);
                return `
                    <div class="match-card">
                        <div class="match-hero">
                            <img src="https://cdn.deadlock.coach/vpk/panorama/images/heroes/bull_card.webp" alt="Unknown" class="match-hero-image">
                            <span class="match-hero-name">Unknown</span>
                        </div>
                        <div class="match-result">
                            <span class="result-text">데이터 오류</span>
                        </div>
                    </div>
                `;
            }
        });
        
        matchesList.innerHTML = matchCards.join('');
        
        // 매치 아이템 데이터를 안정적으로 로드
        matches.forEach((match, index) => {
            const itemsContainer = document.getElementById(`match-items-${index}`);
            if (itemsContainer && match.finalItems && match.finalItems.length > 0) {
                // 실제 API 데이터가 있는 경우에만 표시
                const itemsHTML = match.finalItems.slice(0, 12).map(item => {
                    const itemImage = getItemImage(item.name || item.id);
                    const itemCategory = getItemCategory(item.name || item.id);
                    return `
                        <div class="item-wrapper">
                            <img src="${itemImage}" 
                                 alt="${item.name || 'Unknown Item'}" 
                                 class="item-image real-item ${itemCategory}-item" 
                                 title="${item.name || 'Unknown Item'}"
                                 onerror="this.src='https://via.placeholder.com/48x48/444/fff?text=?';">
                        </div>
                    `;
                }).join('');
                
                // 빈 슬롯 추가 (최대 12개까지)
                const emptySlots = Math.max(0, 12 - match.finalItems.length);
                const emptyHTML = Array(emptySlots).fill().map(() => `
                    <div class="item-wrapper empty-slot">
                        <div class="empty-item-placeholder" title="아이템 없음"></div>
                    </div>
                `).join('');
                
                itemsContainer.innerHTML = itemsHTML + emptyHTML;
            } else if (itemsContainer) {
                // API 데이터가 없는 경우
                itemsContainer.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; color: #999; font-size: 12px; padding: 10px;">
                        <i class="fas fa-info-circle"></i> 아이템 데이터 없음
                    </div>
                `;
            }
        });
        
        console.log('✅ 매치 히스토리 표시 완료');
        
    } catch (error) {
        console.error('❌ 매치 히스토리 표시 오류:', error);
        matchesList.innerHTML = '<p style="color: #ff6b6b; text-align: center;">매치 데이터 표시 중 오류가 발생했습니다.</p>';
    }
}

// 파티 스탯 표시
function displayPartyStats(partyStats) {
    const partyStatsList = document.getElementById('party-stats-list');
    
    try {
        console.log('👥 파티 스탯 표시 시작:', partyStats);
        
        if (!Array.isArray(partyStats) || partyStats.length === 0) {
            partyStatsList.innerHTML = '<p style="color: #999; text-align: center;">파티 데이터가 없습니다.</p>';
            return;
        }
        
        const formatDate = (dateString) => {
            try {
                if (!dateString) return '알 수 없음';
                const date = new Date(dateString);
                if (isNaN(date.getTime())) return '알 수 없음';
                
                const now = new Date();
                const diffHours = Math.floor((now - date) / (1000 * 60 * 60));
                
                if (diffHours < 1) return '방금 전';
                if (diffHours < 24) return `${diffHours}시간 전`;
                const diffDays = Math.floor(diffHours / 24);
                if (diffDays < 7) return `${diffDays}일 전`;
                return date.toLocaleDateString('ko-KR');
            } catch (error) {
                return '알 수 없음';
            }
        };
        
        const partyCards = partyStats.map((member, index) => {
            try {
                // deadlock.coach 스타일 데이터 검증
                if (!member || !member.accountId || member.accountId === 'undefined' || member.accountId === null) {
                    console.log('⚠️ 유효하지 않은 파티 멤버 데이터:', member);
                    return ''; // 유효하지 않은 데이터는 표시하지 않음
                }
                
                const accountId = member.accountId;
                const name = member.name && member.name !== 'undefined' ? member.name : `Player_${accountId}`;
                const matches = parseInt(member.matches) || 0;
                const wins = parseInt(member.wins) || 0;
                const losses = parseInt(member.losses) || 0;
                const winRate = parseInt(member.winRate) || 0;
                const avgKda = member.avgKda || '0.0';
                const lastPlayed = member.lastPlayedTogether || null;
                
                return `
                    <div class="party-member" data-account-id="${accountId}">
                        <div class="party-member-avatar">
                            <img src="${member?.avatar || 'https://avatars.cloudflare.steamstatic.com/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg'}" 
                                 alt="${name}" 
                                 onerror="this.src='https://avatars.cloudflare.steamstatic.com/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg'">
                        </div>
                        <div class="party-member-info">
                            <div class="party-member-name">${name}</div>
                            <div class="party-member-matches">${matches} 매치</div>
                        </div>
                        <div class="party-member-winrate">
                            <div class="winrate-value">${winRate}%</div>
                            <div class="winrate-label">승률</div>
                        </div>
                    </div>
                `;
            } catch (memberError) {
                console.error('파티 멤버 카드 생성 오류:', memberError, member);
                return `
                    <div class="party-member">
                        <div class="party-member-info">
                            <div class="party-member-name">Unknown Player</div>
                            <div class="party-member-id">데이터 오류</div>
                        </div>
                    </div>
                `;
            }
        });
        
        // deadlock.coach 스타일: 빈 카드는 필터링하고 표시
        const validPartyCards = partyCards.filter(card => card.trim() !== '');
        partyStatsList.innerHTML = validPartyCards.join('');
        
        // 파티원 클릭 시 프로필 이동 기능 추가
        partyStatsList.addEventListener('click', (e) => {
            const partyMember = e.target.closest('.party-member');
            if (partyMember) {
                const accountId = partyMember.dataset.accountId;
                console.log('파티 멤버 클릭:', { accountId: accountId });
                if (accountId && accountId !== 'Unknown') {
                    console.log('프로필 페이지로 이동:', `/ko/players/${accountId}`);
                    window.location.href = `/ko/players/${accountId}`;
                } else {
                    console.log('유효하지 않은 Account ID:', accountId);
                    alert('이 플레이어의 프로필을 볼 수 없습니다.');
                }
            }
        });
        
        console.log('✅ 파티 스탯 표시 완료');
        
    } catch (error) {
        console.error('❌ 파티 스탯 표시 오류:', error);
        partyStatsList.innerHTML = '<p style="color: #ff6b6b; text-align: center;">파티 데이터 표시 중 오류가 발생했습니다.</p>';
    }
}


// Load data when page loads
document.addEventListener('DOMContentLoaded', loadMyProfileData);
</script>