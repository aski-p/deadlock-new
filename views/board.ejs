<div class="board-section">
    <div class="board-container">
        <div class="board-header">
            <h1 class="page-title">게시판</h1>
            <% if (user) { %>
                <button class="write-post-btn" id="writePostBtn">✏️ 글쓰기</button>
            <% } else { %>
                <p class="login-notice">글쓰기와 댓글 작성을 위해서는 <a href="/auth/steam" class="steam-login-link">Steam 로그인</a>이 필요합니다.</p>
            <% } %>
        </div>

        <!-- 글쓰기 폼 -->
        <div class="write-form-section" id="writeFormSection" style="display: none;">
            <div class="write-form">
                <h3>새 글 작성</h3>
                <form id="writePostForm">
                    <div class="form-group">
                        <label for="postTitle">제목</label>
                        <input type="text" id="postTitle" name="title" required maxlength="100">
                    </div>
                    <div class="form-group">
                        <label for="postContent">내용</label>
                        <textarea id="postContent" name="content" required rows="8" maxlength="2000"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="submit-btn">작성하기</button>
                        <button type="button" class="cancel-btn" id="cancelWriteBtn">취소</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- 게시글 테이블 -->
        <div class="posts-container">
            <div class="posts-loading" id="postsLoading">
                <div class="loading-spinner"></div>
                <p>게시글을 불러오는 중...</p>
            </div>
            
            <div class="posts-table-container" id="postsTableContainer" style="display: none;">
                <table class="posts-table">
                    <thead>
                        <tr>
                            <th class="seq-column">번호</th>
                            <th class="date-column">날짜</th>
                            <th class="title-column">제목</th>
                            <th class="author-column">글쓴이</th>
                            <th class="views-column">조회수</th>
                            <th class="comments-column">댓글</th>
                        </tr>
                    </thead>
                    <tbody id="postsTableBody">
                        <!-- 게시글들이 여기에 동적으로 로드됩니다 -->
                    </tbody>
                </table>
            </div>
            
            <div class="pagination" id="pagination" style="display: none;">
                <button class="page-btn" id="prevBtn">이전</button>
                <span class="page-info" id="pageInfo">1 / 1</span>
                <button class="page-btn" id="nextBtn">다음</button>
            </div>
        </div>
    </div>
</div>

<!-- 게시글 상세 모달 -->
<div class="post-modal" id="postModal" style="display: none;">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">게시글 제목</h2>
            <div class="modal-actions">
                <div class="post-actions" id="postActions" style="display: none;">
                    <button class="edit-btn" id="editPostBtn">수정</button>
                    <button class="delete-btn" id="deletePostBtn">삭제</button>
                </div>
                <button class="close-btn" id="closeModalBtn">&times;</button>
            </div>
        </div>
        <div class="modal-body">
            <div class="post-info">
                <div class="post-author">
                    <img id="modalAuthorAvatar" src="" alt="작성자" class="author-avatar">
                    <span id="modalAuthorName">작성자</span>
                    <img id="modalAuthorRank" src="" alt="" class="rank-badge" style="display: none;">
                </div>
                <div class="post-meta">
                    <span id="modalDate">2025-01-01</span>
                    <span>조회수: <span id="modalViews">0</span></span>
                </div>
            </div>
            <div class="post-content" id="modalContent">
                게시글 내용이 여기에 표시됩니다.
            </div>
            
            <!-- 수정 폼 (숨김) -->
            <div class="edit-form" id="editForm" style="display: none;">
                <div class="form-group">
                    <label for="editTitle">제목</label>
                    <input type="text" id="editTitle" maxlength="100" required>
                </div>
                <div class="form-group">
                    <label for="editContent">내용</label>
                    <textarea id="editContent" rows="8" maxlength="2000" required></textarea>
                </div>
                <div class="form-actions">
                    <button id="saveEditBtn" class="submit-btn">저장</button>
                    <button id="cancelEditBtn" class="cancel-btn">취소</button>
                </div>
            </div>
            
            <!-- 댓글 섹션 -->
            <div class="comments-section">
                <h3>댓글 <span id="commentsCount">0</span>개</h3>
                <div class="comments-list" id="commentsList">
                    <!-- 댓글들이 여기에 표시됩니다 -->
                </div>
                
                <% if (user) { %>
                <div class="comment-form">
                    <textarea id="commentInput" placeholder="댓글을 입력하세요..." rows="3"></textarea>
                    <button id="addCommentBtn" class="comment-submit-btn">댓글 작성</button>
                </div>
                <% } else { %>
                <p class="login-notice">댓글 작성을 위해서는 <a href="/auth/steam">Steam 로그인</a>이 필요합니다.</p>
                <% } %>
            </div>
        </div>
    </div>
</div>

<style>
.board-section {
    padding: 120px 0 60px;
    min-height: 100vh;
    background: #000000;
    color: #FFEFD7;
}

.board-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 20px;
}

.board-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 40px;
    padding-bottom: 20px;
    border-bottom: 2px solid #63a2e2;
}

.page-title {
    font-size: 32px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0;
}

.write-post-btn {
    background: #63a2e2;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

.write-post-btn:hover {
    background: #4f8bc9;
    transform: translateY(-2px);
}

.login-notice {
    color: #999;
    font-size: 14px;
}

.steam-login-link {
    color: #63a2e2;
    text-decoration: none;
}

.steam-login-link:hover {
    text-decoration: underline;
}

.write-form-section {
    background: rgba(255, 255, 255, 0.05);
    padding: 30px;
    border-radius: 12px;
    margin-bottom: 30px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.write-form h3 {
    margin-bottom: 20px;
    color: #63a2e2;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #FFEFD7;
}

.form-group input, .form-group textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 6px;
    background: rgba(255, 255, 255, 0.05);
    color: #FFEFD7;
    font-size: 14px;
    box-sizing: border-box;
}

.form-group input:focus, .form-group textarea:focus {
    outline: none;
    border-color: #63a2e2;
    background: rgba(255, 255, 255, 0.08);
}

.form-actions {
    display: flex;
    gap: 12px;
}

.submit-btn, .cancel-btn {
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

.submit-btn {
    background: #63a2e2;
    color: white;
}

.submit-btn:hover {
    background: #4f8bc9;
}

.cancel-btn {
    background: rgba(255, 255, 255, 0.1);
    color: #FFEFD7;
}

.cancel-btn:hover {
    background: rgba(255, 255, 255, 0.15);
}

.posts-loading {
    text-align: center;
    padding: 60px 20px;
    color: #999;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(99, 162, 226, 0.3);
    border-left: 4px solid #63a2e2;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* 게시글 테이블 스타일 */
.posts-table-container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.posts-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 14px;
}

.posts-table thead {
    background: rgba(99, 162, 226, 0.2);
}

.posts-table th {
    padding: 15px 12px;
    text-align: left;
    font-weight: 600;
    color: #FFEFD7;
    border-bottom: 2px solid rgba(255, 255, 255, 0.1);
}

.posts-table td {
    padding: 12px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    color: #FFEFD7;
    vertical-align: middle;
}

.posts-table tbody tr {
    transition: all 0.3s;
    cursor: pointer;
}

.posts-table tbody tr:hover {
    background: rgba(99, 162, 226, 0.1);
}

/* 테이블 컬럼 너비 */
.seq-column { width: 60px; text-align: center; font-weight: bold; color: #999; }
.date-column { width: 120px; }
.title-column { width: auto; min-width: 300px; }
.author-column { width: 150px; }
.views-column { width: 80px; text-align: center; }
.comments-column { width: 80px; text-align: center; }

.post-title-link {
    color: #FFEFD7;
    text-decoration: none;
    font-weight: 500;
    display: block;
    padding: 4px 0;
}

.post-title-link:hover {
    color: #63a2e2;
    text-decoration: underline;
}

.post-author {
    display: flex;
    align-items: center;
    gap: 8px;
}

.author-avatar {
    width: 24px;
    height: 24px;
    border-radius: 50%;
}

.post-date {
    color: #999;
    font-size: 12px;
}

/* 모달 스타일 */
.post-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background: #1a1a1a;
    border-radius: 12px;
    max-width: 800px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.modal-header h2 {
    margin: 0;
    color: #FFEFD7;
    font-size: 20px;
    flex: 1;
}

.close-btn {
    background: none;
    border: none;
    color: #999;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.close-btn:hover {
    color: #FFEFD7;
}

.modal-actions {
    display: flex;
    align-items: center;
    gap: 10px;
}

.post-actions {
    display: flex;
    gap: 8px;
}

.edit-btn, .delete-btn {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s;
}

.edit-btn {
    background: #4CAF50;
    color: white;
}

.edit-btn:hover {
    background: #45a049;
}

.delete-btn {
    background: #f44336;
    color: white;
}

.delete-btn:hover {
    background: #da190b;
}

.rank-badge {
    width: 20px;
    height: 20px;
    margin-left: 4px;
    vertical-align: middle;
}

.modal-body {
    padding: 20px;
}

.post-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.post-meta {
    display: flex;
    gap: 20px;
    font-size: 12px;
    color: #999;
}

.post-content {
    color: #FFEFD7;
    line-height: 1.6;
    margin-bottom: 30px;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.comments-section {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 20px;
}

.comments-section h3 {
    color: #FFEFD7;
    margin-bottom: 15px;
}

.comment-item {
    background: rgba(255, 255, 255, 0.05);
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 10px;
}

.comment-author {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
}

.comment-content {
    color: #ccc;
    line-height: 1.4;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.comment-date {
    color: #999;
    font-size: 11px;
    margin-top: 5px;
}

.comment-form {
    margin-top: 20px;
}

.comment-form textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 6px;
    background: rgba(255, 255, 255, 0.05);
    color: #FFEFD7;
    font-size: 14px;
    box-sizing: border-box;
    resize: vertical;
    margin-bottom: 10px;
}

.comment-submit-btn {
    background: #63a2e2;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
}

.comment-submit-btn:hover {
    background: #4f8bc9;
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 40px;
}

.page-btn {
    background: #63a2e2;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s;
}

.page-btn:hover:not(:disabled) {
    background: #4f8bc9;
}

.page-btn:disabled {
    background: rgba(255, 255, 255, 0.1);
    color: #666;
    cursor: not-allowed;
}

.page-info {
    color: #FFEFD7;
    font-weight: 600;
}

/* 반응형 */
@media (max-width: 768px) {
    .board-header {
        flex-direction: column;
        gap: 20px;
        text-align: center;
    }
    
    .post-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
    }
    
    .post-meta {
        flex-wrap: wrap;
    }
}
</style>

<script>
let currentPage = 1;
let totalPages = 1;
let currentPostId = null;

// 페이지 로드 시 게시글 목록 불러오기
document.addEventListener('DOMContentLoaded', () => {
    loadPosts();
    setupEventListeners();
});

// 이벤트 리스너 설정
function setupEventListeners() {
    // 글쓰기 버튼
    const writePostBtn = document.getElementById('writePostBtn');
    if (writePostBtn) {
        writePostBtn.addEventListener('click', showWriteForm);
    }
    
    // 글쓰기 취소 버튼
    const cancelWriteBtn = document.getElementById('cancelWriteBtn');
    if (cancelWriteBtn) {
        cancelWriteBtn.addEventListener('click', hideWriteForm);
    }
    
    // 페이지네이션 버튼
    const prevBtn = document.getElementById('prevBtn');
    if (prevBtn) {
        prevBtn.addEventListener('click', () => changePage(-1));
    }
    
    const nextBtn = document.getElementById('nextBtn');
    if (nextBtn) {
        nextBtn.addEventListener('click', () => changePage(1));
    }
    
    // 모달 관련 버튼
    const closeModalBtn = document.getElementById('closeModalBtn');
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', closePostModal);
    }
    
    const editPostBtn = document.getElementById('editPostBtn');
    if (editPostBtn) {
        editPostBtn.addEventListener('click', editPost);
    }
    
    const deletePostBtn = document.getElementById('deletePostBtn');
    if (deletePostBtn) {
        deletePostBtn.addEventListener('click', deletePost);
    }
    
    const saveEditBtn = document.getElementById('saveEditBtn');
    if (saveEditBtn) {
        saveEditBtn.addEventListener('click', saveEdit);
    }
    
    const cancelEditBtn = document.getElementById('cancelEditBtn');
    if (cancelEditBtn) {
        cancelEditBtn.addEventListener('click', cancelEdit);
    }
    
    const addCommentBtn = document.getElementById('addCommentBtn');
    if (addCommentBtn) {
        addCommentBtn.addEventListener('click', addComment);
    }
    
    // 게시글 테이블 클릭 이벤트 (이벤트 위임)
    const postsTableBody = document.getElementById('postsTableBody');
    if (postsTableBody) {
        postsTableBody.addEventListener('click', (e) => {
            const row = e.target.closest('.post-row');
            if (row) {
                const postId = parseInt(row.dataset.postId);
                if (postId) {
                    openPostModal(postId);
                }
            }
        });
    }
}

// 게시글 목록 불러오기 (50개씩)
async function loadPosts(page = 1) {
    const loading = document.getElementById('postsLoading');
    const tableContainer = document.getElementById('postsTableContainer');
    const pagination = document.getElementById('pagination');
    
    loading.style.display = 'block';
    tableContainer.style.display = 'none';
    pagination.style.display = 'none';
    
    try {
        const response = await fetch(`/api/v1/board/posts?page=${page}`);
        const data = await response.json();
        
        if (response.ok) {
            currentPage = data.currentPage;
            totalPages = data.totalPages;
            
            displayPostsTable(data.posts, data.totalPosts, data.currentPage);
            updatePagination();
            
            loading.style.display = 'none';
            tableContainer.style.display = 'block';
            if (totalPages > 1) {
                pagination.style.display = 'flex';
            }
        } else {
            throw new Error(data.error || '게시글을 불러올 수 없습니다');
        }
    } catch (error) {
        console.error('게시글 로딩 오류:', error);
        loading.innerHTML = '<p style="color: #ff6b6b;">게시글을 불러오는데 실패했습니다.</p>';
    }
}

// 게시글 테이블 표시
function displayPostsTable(posts, totalCount, currentPage) {
    const tableBody = document.getElementById('postsTableBody');
    
    if (posts.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: #999; padding: 40px;">아직 게시글이 없습니다.</td></tr>';
        return;
    }
    
    // 페이지당 50개씩이므로 현재 페이지의 시작 번호 계산
    const postsPerPage = 50;
    const startNumber = totalCount - ((currentPage - 1) * postsPerPage);
    
    tableBody.innerHTML = posts.map((post, index) => {
        const sequenceNumber = startNumber - index;
        return `
        <tr data-post-id="${post.id}" class="post-row" style="cursor: pointer;">
            <td class="seq-column" style="text-align: center;">
                ${sequenceNumber}
            </td>
            <td class="date-column">
                <div class="post-date">${formatDate(post.created_at)}</div>
            </td>
            <td class="title-column">
                <div class="post-title-link">${escapeHtml(post.title)}</div>
            </td>
            <td class="author-column">
                <div class="post-author">
                    <img src="${post.author_avatar}" alt="${post.author_username}" class="author-avatar post-author-avatar">
                    <span>${escapeHtml(post.author_username)}</span>
                    ${post.rank_image ? `<img src="/images/ranks/${post.rank_image}" alt="${post.rank_name}" class="rank-badge" title="${post.rank_name} (${post.points || 0}점)">` : ''}
                </div>
            </td>
            <td class="views-column" style="text-align: center;">
                ${post.view_count || 0}
            </td>
            <td class="comments-column" style="text-align: center;">
                ${post.commentCount || 0}
            </td>
        </tr>
        `;
    }).join('');
    
    // 새로 추가된 이미지들에 오류 핸들러 추가
    setupImageErrorHandlers();
}

// 페이지네이션 업데이트
function updatePagination() {
    document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
    document.getElementById('prevBtn').disabled = currentPage === 1;
    document.getElementById('nextBtn').disabled = currentPage === totalPages;
}

// 페이지 변경
function changePage(direction) {
    const newPage = currentPage + direction;
    if (newPage >= 1 && newPage <= totalPages) {
        loadPosts(newPage);
    }
}

// 글쓰기 폼 표시
function showWriteForm() {
    document.getElementById('writeFormSection').style.display = 'block';
    document.getElementById('postTitle').focus();
}

// 글쓰기 폼 숨기기
function hideWriteForm() {
    document.getElementById('writeFormSection').style.display = 'none';
    document.getElementById('writePostForm').reset();
}

// 게시글 작성
document.getElementById('writePostForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const title = document.getElementById('postTitle').value.trim();
    const content = document.getElementById('postContent').value.trim();
    
    if (!title || !content) {
        alert('제목과 내용을 모두 입력해주세요.');
        return;
    }
    
    try {
        const response = await fetch('/api/v1/board/posts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ title, content })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            hideWriteForm();
            loadPosts(1); // 첫 페이지로 이동
            alert('게시글이 작성되었습니다! (+10점 획득)');
        } else {
            alert(data.error || '게시글 작성에 실패했습니다.');
        }
    } catch (error) {
        console.error('게시글 작성 오류:', error);
        alert('게시글 작성 중 오류가 발생했습니다.');
    }
});

// 게시글 모달 열기
async function openPostModal(postId) {
    console.log('Opening post modal for postId:', postId);
    try {
        currentPostId = postId;
        
        // 게시글 상세 정보 로드
        const response = await fetch(`/api/v1/board/posts/${postId}`);
        const data = await response.json();
        
        if (response.ok) {
            // 모달 내용 업데이트
            document.getElementById('modalTitle').textContent = data.post.title;
            document.getElementById('modalAuthorAvatar').src = data.post.author_avatar;
            document.getElementById('modalAuthorName').textContent = data.post.author_username;
            document.getElementById('modalDate').textContent = formatDate(data.post.created_at);
            document.getElementById('modalViews').textContent = data.post.view_count || 0;
            document.getElementById('modalContent').textContent = data.post.content;
            
            // 랭크 배지 표시
            const rankBadge = document.getElementById('modalAuthorRank');
            if (data.post.rank_image) {
                rankBadge.src = `/images/ranks/${data.post.rank_image}`;
                rankBadge.alt = data.post.rank_name;
                rankBadge.title = `${data.post.rank_name} (${data.post.points || 0}점)`;
                rankBadge.style.display = 'inline';
            } else {
                rankBadge.style.display = 'none';
            }
            
            // 수정/삭제 버튼 표시 여부 (본인 글인 경우에만)
            const postActions = document.getElementById('postActions');
            if (data.canEdit) {
                postActions.style.display = 'flex';
            } else {
                postActions.style.display = 'none';
            }
            
            // 댓글 표시
            displayComments(data.comments || []);
            
            // 모달 표시
            document.getElementById('postModal').style.display = 'flex';
            document.body.style.overflow = 'hidden'; // 스크롤 방지
        } else {
            console.error('게시글 로드 실패:', data);
            alert(data.error || '게시글을 불러올 수 없습니다.');
        }
    } catch (error) {
        console.error('게시글 로드 오류:', error);
        alert('게시글을 불러오는 중 오류가 발생했습니다.\n' + error.message);
    }
}

// 게시글 모달 닫기
function closePostModal() {
    document.getElementById('postModal').style.display = 'none';
    document.body.style.overflow = 'auto'; // 스크롤 복원
    currentPostId = null;
}

// 댓글 표시
function displayComments(comments) {
    console.log('Displaying comments:', comments);
    const commentsList = document.getElementById('commentsList');
    const commentsCount = document.getElementById('commentsCount');
    
    commentsCount.textContent = comments.length;
    
    if (comments.length === 0) {
        commentsList.innerHTML = '<p style="color: #999; text-align: center; padding: 20px;">아직 댓글이 없습니다.</p>';
        return;
    }
    
    commentsList.innerHTML = comments.map(comment => `
        <div class="comment-item">
            <div class="comment-author">
                <img src="${comment.author_avatar}" alt="${comment.author_username}" class="author-avatar"
                     onerror="this.src='data:image/svg+xml;charset=utf-8,${encodeURIComponent('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\" fill=\\\"#666\\\" stroke=\\\"#fff\\\" stroke-width=\\\"2\\\"/><circle cx=\\\"12\\\" cy=\\\"10\\\" r=\\\"3\\\" fill=\\\"#fff\\\"/><path d=\\\"M6.5 17.5 Q12 15 17.5 17.5\\\" stroke=\\\"#fff\\\" stroke-width=\\\"2\\\" fill=\\\"none\\\"/></svg>')}'">
                <span>${escapeHtml(comment.author_username)}</span>
            </div>
            <div class="comment-content">${escapeHtml(comment.content)}</div>
            <div class="comment-date">${formatDate(comment.created_at)}</div>
        </div>
    `).join('');
}

// 댓글 작성
async function addComment() {
    if (!currentPostId) {
        console.error('No currentPostId');
        return;
    }
    
    const commentInput = document.getElementById('commentInput');
    const content = commentInput.value.trim();
    
    if (!content) {
        alert('댓글 내용을 입력해주세요.');
        return;
    }
    
    console.log('Adding comment:', { postId: currentPostId, content });
    
    try {
        const response = await fetch(`/api/v1/board/posts/${currentPostId}/comments`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ content })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            console.log('Comment added successfully:', data);
            commentInput.value = '';
            // 게시글 다시 로드해서 댓글 업데이트
            openPostModal(currentPostId);
        } else {
            console.error('Comment creation failed:', data);
            alert(data.error || '댓글 작성에 실패했습니다.');
        }
    } catch (error) {
        console.error('댓글 작성 오류:', error);
        alert('댓글 작성 중 오류가 발생했습니다.\n' + error.message);
    }
}

// 모달 외부 클릭시 닫기
document.getElementById('postModal').addEventListener('click', (e) => {
    if (e.target === document.getElementById('postModal')) {
        closePostModal();
    }
});

// ESC 키로 모달 닫기
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && document.getElementById('postModal').style.display === 'flex') {
        closePostModal();
    }
});

// HTML 이스케이프
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// 이미지 오류 처리
function handleImageError(img) {
    img.src = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" fill="#666" stroke="#fff" stroke-width="2"/><circle cx="12" cy="10" r="3" fill="#fff"/><path d="M6.5 17.5 Q12 15 17.5 17.5" stroke="#fff" stroke-width="2" fill="none"/></svg>');
}

// 이미지에 오류 핸들러 추가
function setupImageErrorHandlers() {
    // 모든 프로필 아바타에 오류 핸들러 추가
    document.querySelectorAll('.author-avatar, .comment-author-avatar, .post-author-avatar').forEach(img => {
        img.onerror = () => handleImageError(img);
    });
}

// 게시글 수정
async function editPost() {
    if (!currentPostId) return;
    
    // 현재 내용을 수정 폼에 복사
    const currentTitle = document.getElementById('modalTitle').textContent;
    const currentContent = document.getElementById('modalContent').textContent;
    
    document.getElementById('editTitle').value = currentTitle;
    document.getElementById('editContent').value = currentContent;
    
    // 원본 내용 숨기고 수정 폼 표시
    document.getElementById('modalContent').style.display = 'none';
    document.getElementById('editForm').style.display = 'block';
}

// 게시글 수정 취소
function cancelEdit() {
    document.getElementById('modalContent').style.display = 'block';
    document.getElementById('editForm').style.display = 'none';
}

// 게시글 수정 저장
async function saveEdit() {
    if (!currentPostId) return;
    
    const title = document.getElementById('editTitle').value.trim();
    const content = document.getElementById('editContent').value.trim();
    
    if (!title || !content) {
        alert('제목과 내용을 모두 입력해주세요.');
        return;
    }
    
    try {
        const response = await fetch(`/api/v1/board/posts/${currentPostId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ title, content })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // 모달 내용 업데이트
            document.getElementById('modalTitle').textContent = title;
            document.getElementById('modalContent').textContent = content;
            
            // 수정 폼 숨기고 원본 표시
            cancelEdit();
            
            // 게시글 목록도 업데이트
            loadPosts(currentPage);
            
            alert('게시글이 수정되었습니다.');
        } else {
            alert(data.error || '게시글 수정에 실패했습니다.');
        }
    } catch (error) {
        console.error('게시글 수정 오류:', error);
        alert('게시글 수정 중 오류가 발생했습니다.');
    }
}

// 게시글 삭제
async function deletePost() {
    if (!currentPostId) return;
    
    if (!confirm('정말로 이 게시글을 삭제하시겠습니까?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/v1/board/posts/${currentPostId}`, {
            method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // 모달 닫기
            closePostModal();
            
            // 게시글 목록 새로고침
            loadPosts(currentPage);
            
            alert('게시글이 삭제되었습니다.');
        } else {
            alert(data.error || '게시글 삭제에 실패했습니다.');
        }
    } catch (error) {
        console.error('게시글 삭제 오류:', error);
        alert('게시글 삭제 중 오류가 발생했습니다.');
    }
}

// 날짜 포맷팅
function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (minutes < 1) return '방금 전';
    if (minutes < 60) return `${minutes}분 전`;
    if (hours < 24) return `${hours}시간 전`;
    if (days < 7) return `${days}일 전`;
    
    return date.toLocaleDateString('ko-KR');
}
</script>