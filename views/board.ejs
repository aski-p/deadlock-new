<div class="board-section">
    <div class="board-container">
        <div class="board-header">
            <h1 class="page-title">게시판</h1>
            <% if (user) { %>
                <button class="write-post-btn" onclick="showWriteForm()">✏️ 글쓰기</button>
            <% } else { %>
                <p class="login-notice">글쓰기와 댓글 작성을 위해서는 <a href="/auth/steam" class="steam-login-link">Steam 로그인</a>이 필요합니다.</p>
            <% } %>
        </div>

        <!-- 글쓰기 폼 -->
        <div class="write-form-section" id="writeFormSection" style="display: none;">
            <div class="write-form">
                <h3>새 글 작성</h3>
                <form id="writePostForm">
                    <div class="form-group">
                        <label for="postTitle">제목</label>
                        <input type="text" id="postTitle" name="title" required maxlength="100">
                    </div>
                    <div class="form-group">
                        <label for="postContent">내용</label>
                        <textarea id="postContent" name="content" required rows="8" maxlength="2000"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="submit-btn">작성하기</button>
                        <button type="button" class="cancel-btn" onclick="hideWriteForm()">취소</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- 게시글 목록 -->
        <div class="posts-container">
            <div class="posts-loading" id="postsLoading">
                <div class="loading-spinner"></div>
                <p>게시글을 불러오는 중...</p>
            </div>
            
            <div class="posts-list" id="postsList" style="display: none;">
                <!-- 게시글들이 여기에 동적으로 로드됩니다 -->
            </div>
            
            <div class="pagination" id="pagination" style="display: none;">
                <button class="page-btn" id="prevBtn" onclick="changePage(-1)">이전</button>
                <span class="page-info" id="pageInfo">1 / 1</span>
                <button class="page-btn" id="nextBtn" onclick="changePage(1)">다음</button>
            </div>
        </div>
    </div>
</div>

<style>
.board-section {
    padding: 120px 0 60px;
    min-height: 100vh;
    background: #000000;
    color: #FFEFD7;
}

.board-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 20px;
}

.board-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 40px;
    padding-bottom: 20px;
    border-bottom: 2px solid #63a2e2;
}

.page-title {
    font-size: 32px;
    font-weight: 700;
    color: #FFEFD7;
    margin: 0;
}

.write-post-btn {
    background: #63a2e2;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

.write-post-btn:hover {
    background: #4f8bc9;
    transform: translateY(-2px);
}

.login-notice {
    color: #999;
    font-size: 14px;
}

.steam-login-link {
    color: #63a2e2;
    text-decoration: none;
}

.steam-login-link:hover {
    text-decoration: underline;
}

.write-form-section {
    background: rgba(255, 255, 255, 0.05);
    padding: 30px;
    border-radius: 12px;
    margin-bottom: 30px;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.write-form h3 {
    margin-bottom: 20px;
    color: #63a2e2;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #FFEFD7;
}

.form-group input, .form-group textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 6px;
    background: rgba(255, 255, 255, 0.05);
    color: #FFEFD7;
    font-size: 14px;
    box-sizing: border-box;
}

.form-group input:focus, .form-group textarea:focus {
    outline: none;
    border-color: #63a2e2;
    background: rgba(255, 255, 255, 0.08);
}

.form-actions {
    display: flex;
    gap: 12px;
}

.submit-btn, .cancel-btn {
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

.submit-btn {
    background: #63a2e2;
    color: white;
}

.submit-btn:hover {
    background: #4f8bc9;
}

.cancel-btn {
    background: rgba(255, 255, 255, 0.1);
    color: #FFEFD7;
}

.cancel-btn:hover {
    background: rgba(255, 255, 255, 0.15);
}

.posts-loading {
    text-align: center;
    padding: 60px 20px;
    color: #999;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(99, 162, 226, 0.3);
    border-left: 4px solid #63a2e2;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.post-item {
    background: rgba(255, 255, 255, 0.05);
    padding: 20px;
    border-radius: 12px;
    margin-bottom: 20px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s;
    cursor: pointer;
}

.post-item:hover {
    background: rgba(99, 162, 226, 0.1);
    border-color: #63a2e2;
    transform: translateY(-2px);
}

.post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
}

.post-title {
    font-size: 18px;
    font-weight: 600;
    color: #FFEFD7;
    margin: 0;
}

.post-meta {
    display: flex;
    align-items: center;
    gap: 15px;
    font-size: 12px;
    color: #999;
}

.post-author {
    display: flex;
    align-items: center;
    gap: 8px;
}

.author-avatar {
    width: 24px;
    height: 24px;
    border-radius: 50%;
}

.post-content-preview {
    color: #ccc;
    font-size: 14px;
    line-height: 1.4;
    margin-bottom: 12px;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.post-stats {
    display: flex;
    gap: 15px;
    font-size: 12px;
    color: #999;
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 40px;
}

.page-btn {
    background: #63a2e2;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s;
}

.page-btn:hover:not(:disabled) {
    background: #4f8bc9;
}

.page-btn:disabled {
    background: rgba(255, 255, 255, 0.1);
    color: #666;
    cursor: not-allowed;
}

.page-info {
    color: #FFEFD7;
    font-weight: 600;
}

/* 반응형 */
@media (max-width: 768px) {
    .board-header {
        flex-direction: column;
        gap: 20px;
        text-align: center;
    }
    
    .post-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
    }
    
    .post-meta {
        flex-wrap: wrap;
    }
}
</style>

<script>
let currentPage = 1;
let totalPages = 1;

// 페이지 로드 시 게시글 목록 불러오기
document.addEventListener('DOMContentLoaded', () => {
    loadPosts();
});

// 게시글 목록 불러오기
async function loadPosts(page = 1) {
    const loading = document.getElementById('postsLoading');
    const postsList = document.getElementById('postsList');
    const pagination = document.getElementById('pagination');
    
    loading.style.display = 'block';
    postsList.style.display = 'none';
    pagination.style.display = 'none';
    
    try {
        const response = await fetch(`/api/v1/board/posts?page=${page}&limit=10`);
        const data = await response.json();
        
        if (response.ok) {
            currentPage = data.currentPage;
            totalPages = data.totalPages;
            
            displayPosts(data.posts);
            updatePagination();
            
            loading.style.display = 'none';
            postsList.style.display = 'block';
            if (totalPages > 1) {
                pagination.style.display = 'flex';
            }
        } else {
            throw new Error(data.error || '게시글을 불러올 수 없습니다');
        }
    } catch (error) {
        console.error('게시글 로딩 오류:', error);
        loading.innerHTML = '<p style="color: #ff6b6b;">게시글을 불러오는데 실패했습니다.</p>';
    }
}

// 게시글 목록 표시
function displayPosts(posts) {
    const postsList = document.getElementById('postsList');
    
    if (posts.length === 0) {
        postsList.innerHTML = '<p style="text-align: center; color: #999; padding: 40px;">아직 게시글이 없습니다.</p>';
        return;
    }
    
    postsList.innerHTML = posts.map(post => `
        <div class="post-item" onclick="viewPost(${post.id})">
            <div class="post-header">
                <h3 class="post-title">${escapeHtml(post.title)}</h3>
                <div class="post-meta">
                    <div class="post-author">
                        <img src="${post.author.avatar}" alt="${post.author.username}" class="author-avatar" onerror="this.src='data:image/svg+xml;charset=utf-8,${encodeURIComponent('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\" fill=\\\"#666\\\" stroke=\\\"#fff\\\" stroke-width=\\\"2\\\"/><circle cx=\\\"12\\\" cy=\\\"10\\\" r=\\\"3\\\" fill=\\\"#fff\\\"/><path d=\\\"M6.5 17.5 Q12 15 17.5 17.5\\\" stroke=\\\"#fff\\\" stroke-width=\\\"2\\\" fill=\\\"none\\\"/></svg>')}'">
                        <span>${escapeHtml(post.author.username)}</span>
                    </div>
                    <span>${formatDate(post.created_at)}</span>
                </div>
            </div>
            <div class="post-content-preview">
                ${escapeHtml(post.content)}
            </div>
            <div class="post-stats">
                <span>💬 댓글 ${post.commentCount || 0}개</span>
            </div>
        </div>
    `).join('');
}

// 페이지네이션 업데이트
function updatePagination() {
    document.getElementById('pageInfo').textContent = `${currentPage} / ${totalPages}`;
    document.getElementById('prevBtn').disabled = currentPage === 1;
    document.getElementById('nextBtn').disabled = currentPage === totalPages;
}

// 페이지 변경
function changePage(direction) {
    const newPage = currentPage + direction;
    if (newPage >= 1 && newPage <= totalPages) {
        loadPosts(newPage);
    }
}

// 글쓰기 폼 표시
function showWriteForm() {
    document.getElementById('writeFormSection').style.display = 'block';
    document.getElementById('postTitle').focus();
}

// 글쓰기 폼 숨기기
function hideWriteForm() {
    document.getElementById('writeFormSection').style.display = 'none';
    document.getElementById('writePostForm').reset();
}

// 게시글 작성
document.getElementById('writePostForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const title = document.getElementById('postTitle').value.trim();
    const content = document.getElementById('postContent').value.trim();
    
    if (!title || !content) {
        alert('제목과 내용을 모두 입력해주세요.');
        return;
    }
    
    try {
        const response = await fetch('/api/v1/board/posts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ title, content })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            hideWriteForm();
            loadPosts(1); // 첫 페이지로 이동
            alert('게시글이 작성되었습니다!');
        } else {
            alert(data.error || '게시글 작성에 실패했습니다.');
        }
    } catch (error) {
        console.error('게시글 작성 오류:', error);
        alert('게시글 작성 중 오류가 발생했습니다.');
    }
});

// 게시글 상세 보기 (추후 구현)
function viewPost(postId) {
    console.log('게시글 상세보기:', postId);
    // 추후 모달이나 별도 페이지로 구현
}

// HTML 이스케이프
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// 날짜 포맷팅
function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (minutes < 1) return '방금 전';
    if (minutes < 60) return `${minutes}분 전`;
    if (hours < 24) return `${hours}시간 전`;
    if (days < 7) return `${days}일 전`;
    
    return date.toLocaleDateString('ko-KR');
}
</script>